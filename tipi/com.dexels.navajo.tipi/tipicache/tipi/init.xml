<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<tid xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" errorhandler="error" xsi:noNamespaceSchemaLocation="tipi.xsd">
    <tipi-storage scriptPrefix="vla/" type="asp" />

    <d.frame name="init" h="700" w="900" cssClass="'windowIcon windowTitle'" fullscreen="true" centered="true" visible="true" applyCss="true">
        <onInstantiate>
            <!-- If we want to disable people from logging in SLC, then set the next local to true -->
            <setValue to="{localref:/ShowSLCMaintenanceMessage}" from="false"/>
            
            <block condition="{local:/ShowSLCMaintenanceMessage} == true">
                <instantiate id="'showSLCMaintenanceDialog'" location="{component://init/desktop}" name="'showSLCMaintenanceDialog'" />
            </block>
        
            <block condition="{local:/ShowSLCMaintenanceMessage} == false">
                <!-- Turn on extensive debugging -->
<!--                 <setValue to="{globalref:/enrichInputWithDebug}" from="true"/>  -->

                <!-- COMMENT ONLY: Apply the styles. This happens in the set global css event, so we can use the locale -->
                <setValue to="{globalref:/userSettingsService}" from="'vla/tools/user_settings/ProcessQueryAllPropertiesForUser'"/>
                
                <!-- This window contains the methods which could be in this file, but for maintainability reasons.... are not -->
                <instantiate id="'initglobalmethods'" location="{component://init/desktop}" name="'initglobalmethods'" force="true" />
                <instantiate id="'initauthorizationglobals'" location="{component://init/desktop}" name="'initauthorizationglobals'" force="true" />
                
                <!-- Define some style settings -->
                <setValue to="{globalref:/selectedColorTipiTable}" from="{color:/#ccccff}"/>
                
                <instantiate id="'loginDialog'" location="{component://init/desktop}" name="'loginDialog'" />
                <frame.maximize path="{component:/.}"/>
                <callService service="'vla/authorization/InitLoginSystemUser'"/>
            </block>
        </onInstantiate>

        <!-- local method to set the borders of the toolbar and desktop elements -->
        <!-- This method is being called from loginDialog, but it makes sense to leave it here -->
        <localmethod name="DoSetBorders">
            <panel.attribute path="{component://init/toolbar}" cssClass="'backgroundDesktopToolbarPanel'"/>
            <applyCss component="{component://init/toolbar}"/>
            <desktop.attribute path="{component://init/desktop}" cssClass="'backgroundWindowPanel'"/>
            <applyCss component="{component://init/desktop}"/>
            <!-- When a logo is present, then set it -->
            <block condition="!IsEmpty( {property:/vla/sportlinkkernel/club/ProcessQueryClubLogo:/ClubData/SmallLogo} )">
                <desktop.attribute path="{component://init/desktop}" logo="{property:/vla/sportlinkkernel/club/ProcessQueryClubLogo:/ClubData/SmallLogo}"/>
                <!-- For now this option is not activated, because I can not get it to center -->
                <!-- Also pay attention to the fact that the panel is commented for now -->
                <block condition="false">
                    <label.attribute path="{component://init/desktop/panelClubLogo/logo}" icon="{property:/vla/sportlinkkernel/club/ProcessQueryClubLogo:/ClubData/SmallLogo}"/>
                    <!-- Set some dimensions for the logo part -->
                    <panel.attribute path="{component://init/desktop/panelClubLogo}" visible="true"/>
                </block>
            </block>

            <!-- When NO logo is present and it concerns a Lite club, then set that logo -->
            <block condition="IsEmpty( {property:/vla/sportlinkkernel/club/ProcessQueryClubLogo:/ClubData/SmallLogo} ) AND {global:/HasLite} == true">
                <desktop.attribute path="{component://init/desktop}" logo="{resource:/images/slc_lite.png}"/>
            </block>
        </localmethod>
        
        <!-- Set visibility for desktop button(s) -->
        <!-- This method is being called from loginDialog, but it makes sense to leave it here -->
        <localmethod name="SetDesktopButtonAuthorization">
            <desktopbutton.attribute path="{component://init/toolbar/InsertNumberFixation}" visible="{global:/IsUserNameSportlink}"/>
            <desktopbutton.attribute path="{component://init/toolbar/searchScreenButton}" visible="{global:/IsClubLiquidated} == false AND {global:/HasSearchScreenAccess}"/>
            <desktopbutton.attribute path="{component://init/toolbar/excludeSearchScreenButton}" visible="{global:/IsClubLiquidated} == false AND {global:/IsUserNameSportlink}"/>
            <desktopbutton.attribute path="{component://init/toolbar/workingsetButton}" visible="{global:/IsClubLiquidated} == false AND {global:/HasWorkingSetAccess}"/>
            <desktopbutton.attribute path="{component://init/toolbar/onlineHelpdeskButton}" visible="{global:/IsClubLiquidated} == false"/>
            <desktopbutton.attribute path="{component://init/toolbar/financialFormsButton}" visible="{global:/IsClubLiquidated} == false AND ( {global:/HasLite} == true AND {system:/navajo.globals.DefaultSport} == 'VOETBAL' )"/>
            <desktopbutton.attribute path="{component://init/toolbar/newOrganizationButton}" visible="{global:/IsClubLiquidated} == false AND ( {global:/IsUserNameSportlink} OR ( {global:/HasClubRelations} AND !{global:/IsClubRelationsReadOnly} ) )"/>
            <desktopbutton.attribute path="{component://init/toolbar/newPersonButton}" visible="{global:/IsClubLiquidated} == false AND ( ( ( {global:/HasClubRelations} AND !{global:/IsClubRelationsReadOnly} ) OR ( {global:/HasClubMembers} AND !{global:/IsClubMembersReadOnly} ) ) AND !{global:/HasProfessional} )"/>
            <desktopbutton.attribute path="{component://init/toolbar/synchronizationInfoButton}" visible="{global:/IsClubLiquidated} == false AND ( ( {global:/HasClubRelations} OR {global:/HasClubMembers} ) AND {global:/HasProfessional} == false AND {global:/HasSync} )"/>
            <desktopbutton.attribute path="{component://init/toolbar/ConvertAccountNumbers}" visible="{global:/IsUserNameSportlink} OR ( {global:/IsClubLiquidated} == false AND ( {global:/HasClubMenu} OR ( {global:/HasContribution} AND !{global:/IsContributionReadOnly} ) ) )"/>
        </localmethod>
        
        <!-- This method is created so the startup actions can be asynchronous -->
        <localmethod name="DoAsyncStartupActions">
            <!-- Startup actions caught in 1 webservice for performance reasons -->
            <!-- usermessage, survey -->
            <callService service="'vla/tools/init/ProcessExecuteInitActions'" input="{navajo:/vla/InitMessageStoreData}"/>
            <block condition="{property:/vla/tools/init/ProcessExecuteInitActions:/UserMessage/UserHasMessages}" >
                <instantiate id="'userMessageDialog'" location="{component://init/desktop}" name="'userMessageDialog'" />
            </block>
            
            <block condition="{global:/DWFOnly} == false AND {global:/HasClubMembers} == true" >
                <callService service="'vla/survey/ProcessQueryUnansweredSurvey'" input="{navajo:/vla/InitMessageStoreData}" />
                <block condition="{property:/vla/survey/ProcessQueryUnansweredSurvey:/Survey/Exists}" >
                    <instantiate id="'surveyDialog'" location="{component://init/desktop}" name="'surveyDialog'" />
                </block>
            </block>
            
            <!-- Load the personwindow, so it is already present at the client -->
            <!-- (purely for performance when opening the personwindow for the first time) -->
            <setValue to="{globalref:/IsPersonWindowFirstUse}" from="true"/>
            <instantiate id="'personWindow'" location="{component://init/desktop}" name="'personWindow'" visible="false"/>
        </localmethod>
        
        
        <l.border>
            <!-- top toolbar -->
            <c.panel id="toolbar" constraint="North" opaque="false" visible="false">
                <l.flow alignment="center">
                    <!-- Hidden message labels. Don't delete, because they are used in conditional checks -->
                    <c.label id="messagePersonNotFound" cssClass="'messagePersonNotFound'" constraint="hidemode 3" visible="false"/>
                    <!-- End hidden labels -->

                    <!-- TEMPORARY UNTIL executeMethod support async -->
                    <c.headlessbutton id="btnSetSynchronizationIcon">
                        <onActionPerformed>
                            <executeMethod name="'SetSynchronizationButtonIcon'"/>
                        </onActionPerformed>
                    </c.headlessbutton>
                    <c.headlessbutton id="btnDoAsyncStartupActions">
                        <onActionPerformed>
                            <executeMethod name="'DoAsyncStartupActions'"/>
                        </onActionPerformed>
                    </c.headlessbutton>
                    
                    <!-- The actual buttons -->
                    <c.desktopbutton cssClass="'desktopUserButton desktopBtnAddPerson'" visible="false" id="newPersonButton">
                        <onActionPerformed>
                            <instantiate id="'personInsertWizardDialog'" location="{component://init/desktop}" name="'personInsertWizardDialog'" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <c.desktopbutton cssClass="'desktopOrganizationButton desktopBtnAddOrganization'" visible="false" id="newOrganizationButton">
                        <onActionPerformed>
                            <instantiate id="'insertOrganizationFrame'" location="{component://init/desktop}" name="'insertOrganizationFrame'" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <c.desktopbutton cssClass="'desktopSearchButton desktopBtnSearch'" visible="false" id="searchScreenButton">
                        <onActionPerformed>
                            <instantiate id="'mainFrameSearch'" location="{component://init/desktop}" name="'mainFrameSearch'" />
                            <setValue from="0" to="{attributeref://init/desktop/mainFrameSearch/tabs:selectedindex}" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <c.desktopbutton cssClass="'desktopExcludeSearchButton desktopBtnExcludeSearch'" visible="false" id="excludeSearchScreenButton">
                        <onActionPerformed>
                            <instantiate id="'excludeSearchWindow'" location="{component://init/desktop}" name="'excludeSearchWindow'" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <!-- Exchange -->
                    <c.desktopbutton cssClass="'desktopExchangeButton desktopBtnNotifications'" id="synchronizationInfoButton" visible="false">
                        <onActionPerformed>
                            <instantiate id="'synchronizationInfoWindow'" location="{component://init/desktop}" name="'synchronizationInfoWindow'" />                            
                        </onActionPerformed>
                    </c.desktopbutton>
                    
                    <c.desktopbutton cssClass="'desktopWrenchButton desktopBtnWorkingSet'" visible="false" id="workingsetButton">
                        <onActionPerformed>
                            <instantiate name="'workingSetWindow'" id="'workingSetWindow'" location="{component://init/desktop}" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <c.desktopbutton cssClass="'desktopOnlineHelpdeskButton desktopBtnOnlineHelpdeskSystem'" visible="false" id="onlineHelpdeskButton">
                        <onActionPerformed>
                            <callService service="'vla/tools/support/ProcessQueryOnlineSupportSystemURL'" input="{navajo:/vla/InitMessageStoreData}"/>
                            <openBrowser url="{property:/vla/tools/support/ProcessQueryOnlineSupportSystemURL:/Result/URL}" />
                        </onActionPerformed>
                    </c.desktopbutton>

                    <c.desktopbutton cssClass="'desktopEditTableButton desktopBtnFinancialForms'" visible="false" id="financialFormsButton">
                        <onActionPerformed>
                            <callService service="'vla/sportlinkkernel/club/InitUpdateClub'" />
                            <instantiate id="'formserverlist'" location="{component://init/desktop}" name="'FormServerList'" />
                            <callService service="'clubforms/ProcessGetNewForms'" input="{navajo:/vla/InitMessageStoreData}" />
                        </onActionPerformed>
                    </c.desktopbutton>

                    <!-- convert accountnumbers (this really is temporary) -->
                    <c.desktopbutton cssClass="'desktopBtnConvertAccountNumbers'" visible="false" id="ConvertAccountNumbers">
                        <onActionPerformed>
                            <instantiate force="true" id="'convertAccountNumbersDialog'" location="{component://init/desktop}" name="'convertAccountNumbersDialog'" />
                        </onActionPerformed>
                    </c.desktopbutton>
                    <!-- insert accountnumber exception (this really is temporary) -->
                    <c.desktopbutton cssClass="'desktopBtnInsertNumberFixation'" visible="false" id="InsertNumberFixation">
                        <onActionPerformed>
                            <instantiate force="true" id="'insertSingleAccountNumberExceptionDialog'" location="{component://init/desktop}" name="'insertSingleAccountNumberExceptionDialog'" />
                        </onActionPerformed>
                    </c.desktopbutton>
                </l.flow>
            </c.panel>
            
            <!-- desktop and messagestores -->
            <c.desktop id="desktop" constraint="Center, grow">
<!--                 <c.panel id="panelClubLogo" constraint="Center, grow, h 600!, w 600!" opaque="false" visible="false"> -->
<!--                     <l.mig grid="ins 0, fill"> -->
<!--                         <c.label id="logo" constraint="grow" /> -->
<!--                     </l.mig> -->
<!--                 </c.panel> -->
            </c.desktop>
            
            <c.messagestore id="mfMsgStore" service="matchform/InitGetCurrentMatches">
                <onLoad>
                    <setValue from="{property:/vla/InitMessageStoreData:/Club/ClubIdentifier}" to="{propertyref:/.:.:/User/UserId}" />
                    <callService service="'matchform/ProcessQueryCurrentMatches'" input="{navajo:/matchform/InitGetCurrentMatches}"/>
                </onLoad>
            </c.messagestore>
            <c.messagestore id="etiketten" service="vla/ProcessVLAGetAddressLabels">
                <onLoad>
                    <callService service="'ProcessDelegateBirt'" input="{navajo:/vla/ProcessVLAGetAddressLabels}" />
                    <openBinary value="{property:/ProcessDelegateBirt:/Result/Data}" />
                </onLoad>
            </c.messagestore>
        </l.border>
        
        <onDispose>
            <block condition="!IsNull( {navajo:/vla/tools/user_settings/ProcessQueryAllPropertiesForUser} )">
                <setValue to="{propertyref:/vla/tools/user_settings/ProcessQueryAllPropertiesForUser:/UserProperties/WorkingSetId}" from="{global:/ActiveWorkingSetId}"/>
                <callService service="'vla/tools/user_settings/ProcessInsertAllPropertiesForUser'" input="{navajo:/vla/tools/user_settings/ProcessQueryAllPropertiesForUser}"/>
            </block>
        </onDispose>
        <onWindowClosed>
        <!-- This is the correct spot for a question like the following. Unknown if we could use CSS for this or not. -->
<!--             <showQuestion text="'Weet u het zeker?'"/> -->
		<!--  english version of the question -->
<!--             <showQuestion text="'Are you sure?'"/> -->
        </onWindowClosed>
    </d.frame>
</tid>
