/* Generated By:JJTree&JavaCC: Do not edit this line. TMLParserTokenManager.java */
package com.dexels.navajo.parser.internal;

/** Token Manager. */
public class TMLParserTokenManager implements TMLParserConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x10000L) != 0L)
				return 112;
			if ((active0 & 0x4000000000000L) != 0L)
				return 113;
			if ((active0 & 0x400000L) != 0L)
				return 114;
			if ((active0 & 0x10038c0L) != 0L) {
				jjmatchedKind = 37;
				return 114;
			}
			return -1;
		case 1:
			if ((active0 & 0x80L) != 0L)
				return 115;
			if ((active0 & 0x1003840L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 1;
				return 115;
			}
			return -1;
		case 2:
			if ((active0 & 0x40L) != 0L)
				return 116;
			if ((active0 & 0x1003800L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 2;
				return 116;
			}
			return -1;
		case 3:
			if ((active0 & 0x1000800L) != 0L)
				return 116;
			if ((active0 & 0x3000L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 3;
				return 116;
			}
			return -1;
		case 4:
			if ((active0 & 0x3000L) != 0L)
				return 116;
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			jjmatchedKind = 8;
			return jjMoveStringLiteralDfa1_0(0x400L);
		case 35:
			return jjStopAtPos(0, 45);
		case 36:
			return jjStopAtPos(0, 48);
		case 37:
			return jjStopAtPos(0, 23);
		case 40:
			return jjStopAtPos(0, 46);
		case 41:
			return jjStopAtPos(0, 47);
		case 42:
			return jjStopAtPos(0, 20);
		case 43:
			return jjStopAtPos(0, 19);
		case 44:
			return jjStopAtPos(0, 18);
		case 45:
			return jjStopAtPos(0, 21);
		case 46:
			return jjStartNfaWithStates_0(0, 50, 113);
		case 47:
			return jjStartNfaWithStates_0(0, 22, 114);
		case 58:
			return jjMoveStringLiteralDfa1_0(0xc000L);
		case 60:
			jjmatchedKind = 41;
			return jjMoveStringLiteralDfa1_0(0x80000000000L);
		case 61:
			return jjMoveStringLiteralDfa1_0(0x200L);
		case 62:
			jjmatchedKind = 42;
			return jjMoveStringLiteralDfa1_0(0x100000000000L);
		case 65:
			return jjMoveStringLiteralDfa1_0(0x40L);
		case 79:
			return jjMoveStringLiteralDfa1_0(0x80L);
		case 84:
			return jjMoveStringLiteralDfa1_0(0x2000L);
		case 93:
			return jjStopAtPos(0, 49);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x1000L);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x1000000L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x800L);
		case 123:
			return jjStartNfaWithStates_0(0, 16, 112);
		case 125:
			return jjStopAtPos(0, 17);
		default:
			return jjMoveNfa_0(5, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 61:
			if ((active0 & 0x200L) != 0L)
				return jjStopAtPos(1, 9);
			else if ((active0 & 0x400L) != 0L)
				return jjStopAtPos(1, 10);
			else if ((active0 & 0x80000000000L) != 0L)
				return jjStopAtPos(1, 43);
			else if ((active0 & 0x100000000000L) != 0L)
				return jjStopAtPos(1, 44);
			break;
		case 78:
			return jjMoveStringLiteralDfa2_0(active0, 0x40L);
		case 79:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
		case 82:
			if ((active0 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(1, 7, 115);
			break;
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x800L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
		case 118:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 68:
			if ((active0 & 0x40L) != 0L)
				return jjStartNfaWithStates_0(2, 6, 116);
			return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x1001000L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x800L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
		case 101:
			if ((active0 & 0x800L) != 0L)
				return jjStartNfaWithStates_0(3, 11, 116);
			break;
		case 108:
			if ((active0 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(3, 24, 116);
			return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
		case 109:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 89:
			if ((active0 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(4, 13, 116);
			break;
		case 101:
			if ((active0 & 0x1000L) != 0L)
				return jjStartNfaWithStates_0(4, 12, 116);
			else if ((active0 & 0x4000L) != 0L)
				return jjStopAtPos(4, 14);
			break;
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 101:
			if ((active0 & 0x8000L) != 0L)
				return jjStopAtPos(5, 15);
			break;
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0x1600L, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec1 = { 0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L };
	static final long[] jjbitVec2 = { 0x1000000L, 0x0L, 0x0L, 0x8000000000000000L };
	static final long[] jjbitVec3 = { 0x3ff0000L, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec4 = { 0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L };
	static final long[] jjbitVec5 = { 0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L };
	static final long[] jjbitVec6 = { 0x0L, 0xffc000000000L, 0x0L, 0x0L };
	static final long[] jjbitVec7 = { 0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L };
	static final long[] jjbitVec8 = { 0x3ff00000000L, 0x0L, 0x0L, 0x0L };
	static final long[] jjbitVec9 = { 0x0L, 0x3ffL, 0x0L, 0x0L };
	static final long[] jjbitVec10 = { 0x0L, 0x3fe0000000000L, 0x0L, 0x0L };
	static final long[] jjbitVec11 = { 0x0L, 0x0L, 0x0L, 0x3ff00000000L };
	static final long[] jjbitVec12 = { 0x0L, 0xffc0L, 0x0L, 0x0L };
	static final long[] jjbitVec13 = { 0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL,
			0x12000000007fffffL };
	static final long[] jjbitVec15 = { 0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec16 = { 0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L };
	static final long[] jjbitVec17 = { 0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL };
	static final long[] jjbitVec18 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L,
			0x33fffffffff7fffL };
	static final long[] jjbitVec19 = { 0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L };
	static final long[] jjbitVec20 = { 0x7fffffe00000000L, 0xfffec3ff000007ffL, 0xffffffffffffffffL,
			0x9fffc060002fffffL };
	static final long[] jjbitVec21 = { 0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L };
	static final long[] jjbitVec22 = { 0x23fffffffffffff0L, 0xffc3ff010000L, 0x23c5fdfffff99fe0L, 0x3ffc3b0000000L };
	static final long[] jjbitVec23 = { 0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbbfe0L, 0xffc300010000L };
	static final long[] jjbitVec24 = { 0x23edfdfffff99fe0L, 0x2ffc3b0000000L, 0x3bfc718d63dc7e8L, 0xff8000000000L };
	static final long[] jjbitVec25 = { 0x3effdfffffddfe0L, 0xffc300000000L, 0x23effdfffffddfe0L, 0xffc340000000L };
	static final long[] jjbitVec26 = { 0x3fffdfffffddfe0L, 0xffc300000000L, 0x2ffbfffffc7fffe0L, 0x7fL };
	static final long[] jjbitVec27 = { 0xdfffffffffffeL, 0x3ff007fL, 0x200decaefef02596L, 0x33ff005fL };
	static final long[] jjbitVec28 = { 0x3ff00000001L, 0x7fffffffeffL, 0xf00L, 0x0L };
	static final long[] jjbitVec29 = { 0x6fbffffffffL, 0x3f03ffL, 0xffffffff00000000L, 0x1ffffffffff003fL };
	static final long[] jjbitVec30 = { 0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL,
			0x3ffffffffffffffL };
	static final long[] jjbitVec31 = { 0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL,
			0xffff7fffff7f7f3dL };
	static final long[] jjbitVec32 = { 0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL };
	static final long[] jjbitVec33 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL };
	static final long[] jjbitVec34 = { 0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL };
	static final long[] jjbitVec35 = { 0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x3ff10800000L };
	static final long[] jjbitVec36 = { 0xffffffff03ff0000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L };
	static final long[] jjbitVec37 = { 0x1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L };
	static final long[] jjbitVec38 = { 0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L };
	static final long[] jjbitVec39 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL,
			0x3ffffffffffffffL };
	static final long[] jjbitVec40 = { 0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL,
			0x1fdc1fff0fcf1fdcL };
	static final long[] jjbitVec41 = { 0x0L, 0x8002000000000000L, 0x0L, 0x0L };
	static final long[] jjbitVec42 = { 0xe3fbbd503e2ffc84L, 0x3e0L, 0x0L, 0x0L };
	static final long[] jjbitVec43 = { 0x183e000000000060L, 0xfffffffffffffffeL, 0xfffffffee07fffffL,
			0xf7ffffffffffffffL };
	static final long[] jjbitVec44 = { 0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL,
			0xffff000000000000L };
	static final long[] jjbitVec45 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L };
	static final long[] jjbitVec46 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L };
	static final long[] jjbitVec47 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L };
	static final long[] jjbitVec48 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L };
	static final long[] jjbitVec49 = { 0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L };
	static final long[] jjbitVec50 = { 0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL,
			0xfffffffffff80000L };
	static final long[] jjbitVec51 = { 0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL,
			0xfff0000000000ffL };
	static final long[] jjbitVec52 = { 0x0L, 0xffdf000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL };
	static final long[] jjbitVec53 = { 0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL };
	static final long[] jjbitVec54 = { 0x7fffffe00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL,
			0x9c00c060002fffffL };
	static final long[] jjbitVec55 = { 0x23fffffffffffff0L, 0x3ff010000L, 0x23c5fdfffff99fe0L, 0x30003b0000000L };
	static final long[] jjbitVec56 = { 0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x300010000L };
	static final long[] jjbitVec57 = { 0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3bfc718d63dc7e8L, 0x0L };
	static final long[] jjbitVec58 = { 0x3effdfffffddfe0L, 0x300000000L, 0x23effdfffffddfe0L, 0x340000000L };
	static final long[] jjbitVec59 = { 0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL };
	static final long[] jjbitVec60 = { 0xdfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL };
	static final long[] jjbitVec61 = { 0x1L, 0x7fffffffeffL, 0xf00L, 0x0L };
	static final long[] jjbitVec62 = { 0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x1ffffffffff003fL };
	static final long[] jjbitVec63 = { 0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL };
	static final long[] jjbitVec64 = { 0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x10800000L };
	static final long[] jjbitVec65 = { 0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L };
	static final long[] jjbitVec66 = { 0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L };
	static final long[] jjbitVec67 = { 0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 112;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 116:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						} else if (curChar == 46)
							jjCheckNAddStates(3, 5);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						} else if (curChar == 46)
							jjCheckNAddTwoStates(68, 63);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (curChar == 46)
							jjCheckNAddTwoStates(63, 65);
						if (curChar == 46)
							jjCheckNAddTwoStates(63, 65);
						break;
					case 114:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						} else if (curChar == 46)
							jjCheckNAddStates(3, 5);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						break;
					case 112:
						if ((0xffffff7f00000400L & l) != 0L)
							jjCheckNAddStates(15, 18);
						if (curChar == 46)
							jjCheckNAdd(105);
						else if (curChar == 47)
							jjCheckNAddStates(19, 23);
						break;
					case 5:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddStates(24, 26);
						} else if (curChar == 39)
							jjCheckNAddStates(27, 31);
						else if (curChar == 46)
							jjCheckNAdd(72);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(32, 34);
						} else if (curChar == 63)
							jjstateSet[jjnewStateCnt++] = 35;
						if (curChar == 46)
							jjCheckNAdd(13);
						break;
					case 113:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 27)
								kind = 27;
							jjCheckNAdd(13);
						} else if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 71;
						break;
					case 115:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						} else if (curChar == 46)
							jjCheckNAddStates(3, 5);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						} else if (curChar == 46)
							jjCheckNAddTwoStates(68, 63);
						else if (curChar == 47) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (curChar == 46)
							jjCheckNAddTwoStates(63, 65);
						break;
					case 12:
						if (curChar == 46)
							jjCheckNAdd(13);
						break;
					case 13:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 27)
							kind = 27;
						jjCheckNAdd(13);
						break;
					case 15:
						if (curChar != 47)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 16:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 17:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 18:
						if ((0xa3ff230000000000L & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 19:
						if ((0x3ff400000000000L & l) != 0L)
							jjCheckNAddTwoStates(19, 20);
						break;
					case 20:
						if (curChar != 42)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 22:
						if ((0x23ff200000000000L & l) != 0L)
							jjAddStates(40, 41);
						break;
					case 24:
						if (curChar == 47)
							jjCheckNAddStates(42, 45);
						break;
					case 25:
						if (curChar != 47)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 26:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 27:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 26;
						break;
					case 28:
						if ((0xa3ff230000000000L & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 29:
						if ((0x3ff400000000000L & l) != 0L)
							jjCheckNAddTwoStates(29, 30);
						break;
					case 30:
						if (curChar != 42)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 32:
						if ((0x23ff200000000000L & l) != 0L)
							jjAddStates(51, 52);
						break;
					case 34:
						if (curChar != 47)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(53, 61);
						break;
					case 36:
						if (curChar == 47)
							jjCheckNAddStates(62, 65);
						break;
					case 37:
						if (curChar != 47)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 38:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 37;
						break;
					case 39:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 38;
						break;
					case 40:
						if ((0xa3ff230000000000L & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 41:
						if ((0x3ff400000000000L & l) != 0L)
							jjCheckNAddTwoStates(41, 42);
						break;
					case 42:
						if (curChar != 42)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 44:
						if ((0x23ff200000000000L & l) != 0L)
							jjAddStates(71, 72);
						break;
					case 46:
						if (curChar == 47)
							jjCheckNAddStates(73, 76);
						break;
					case 47:
						if (curChar != 47)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 48:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 47;
						break;
					case 49:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 48;
						break;
					case 50:
						if ((0xa3ff230000000000L & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 51:
						if ((0x3ff400000000000L & l) != 0L)
							jjCheckNAddTwoStates(51, 52);
						break;
					case 52:
						if (curChar != 42)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 54:
						if ((0x23ff200000000000L & l) != 0L)
							jjAddStates(82, 83);
						break;
					case 56:
						if (curChar == 63)
							jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 57:
					case 71:
						if (curChar != 47)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(32, 34);
						break;
					case 58:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(12, 14);
						break;
					case 59:
					case 62:
					case 64:
						if (curChar != 47)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 60:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 61:
						if (curChar == 46)
							jjCheckNAddTwoStates(63, 65);
						break;
					case 63:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 62;
						break;
					case 65:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 64;
						break;
					case 66:
						if (curChar == 46)
							jjCheckNAddTwoStates(68, 63);
						break;
					case 67:
						if (curChar != 47)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(12, 14);
						break;
					case 68:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 67;
						break;
					case 69:
						if (curChar != 47)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(6, 11);
						break;
					case 70:
						if (curChar == 46)
							jjCheckNAddStates(3, 5);
						break;
					case 72:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 71;
						break;
					case 73:
						if (curChar == 46)
							jjCheckNAdd(72);
						break;
					case 74:
					case 79:
						if (curChar == 39)
							jjCheckNAddStates(27, 31);
						break;
					case 75:
					case 78:
					case 85:
						if (curChar == 47)
							jjCheckNAddStates(84, 89);
						break;
					case 76:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(84, 89);
						break;
					case 77:
						if ((0xffffff7f00000600L & l) != 0L)
							jjCheckNAddStates(27, 31);
						break;
					case 80:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 81:
						if (curChar == 46)
							jjCheckNAdd(80);
						break;
					case 83:
						if (curChar == 39 && kind > 38)
							kind = 38;
						break;
					case 84:
						if (curChar == 46)
							jjCheckNAddTwoStates(80, 86);
						break;
					case 86:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 88:
					case 91:
					case 95:
						if (curChar == 47)
							jjCheckNAddStates(90, 94);
						break;
					case 89:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(90, 94);
						break;
					case 90:
						if ((0xffffffbb00000000L & l) != 0L)
							jjCheckNAddStates(95, 98);
						break;
					case 93:
						if (curChar == 46)
							jjCheckNAddTwoStates(94, 96);
						break;
					case 94:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 91;
						break;
					case 96:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 95;
						break;
					case 97:
						if (curChar == 46)
							jjCheckNAdd(94);
						break;
					case 99:
					case 102:
					case 106:
						if (curChar == 47)
							jjCheckNAddStates(19, 23);
						break;
					case 100:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(19, 23);
						break;
					case 101:
						if ((0xffffff7f00000400L & l) != 0L)
							jjCheckNAddStates(15, 18);
						break;
					case 104:
						if (curChar == 46)
							jjCheckNAddTwoStates(105, 107);
						break;
					case 105:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 102;
						break;
					case 107:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 106;
						break;
					case 108:
						if (curChar == 46)
							jjCheckNAdd(105);
						break;
					case 109:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddStates(24, 26);
						break;
					case 110:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAdd(110);
						break;
					case 111:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(111, 12);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 116:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						break;
					case 114:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						break;
					case 112:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(19, 23);
						if ((0x40000000f8000001L & l) != 0L)
							jjCheckNAddStates(15, 18);
						break;
					case 5:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(32, 34);
						} else if (curChar == 123)
							jjCheckNAddStates(99, 101);
						else if (curChar == 96)
							jjCheckNAddStates(95, 98);
						else if (curChar == 91) {
							if (kind > 28)
								kind = 28;
							jjCheckNAddStates(102, 106);
						}
						if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 10;
						else if (curChar == 70)
							jjstateSet[jjnewStateCnt++] = 4;
						break;
					case 115:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						break;
					case 0:
						if (curChar == 76 && kind > 25)
							kind = 25;
						break;
					case 1:
						if (curChar == 76)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 2:
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 3:
						if (curChar == 82)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 4:
						if (curChar == 79)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 6:
						if (curChar == 83 && kind > 25)
							kind = 25;
						break;
					case 7:
						if (curChar == 84)
							jjstateSet[jjnewStateCnt++] = 6;
						break;
					case 8:
						if (curChar == 83)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 9:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 8;
						break;
					case 10:
						if (curChar == 88)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 11:
						if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 14:
						if (curChar != 91)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(102, 106);
						break;
					case 18:
						if ((0x7fffffe97ffffffL & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 19:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(19, 20);
						break;
					case 21:
						if (curChar == 91)
							jjCheckNAdd(22);
						break;
					case 22:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(22, 23);
						break;
					case 23:
						if (curChar != 93)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 28:
						if ((0x7fffffe97ffffffL & l) == 0L)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 29:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(29, 30);
						break;
					case 31:
						if (curChar == 91)
							jjCheckNAdd(32);
						break;
					case 32:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(32, 33);
						break;
					case 33:
						if (curChar != 93)
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 35:
						if (curChar == 91)
							jjCheckNAddStates(107, 111);
						break;
					case 40:
						if ((0x7fffffe97ffffffL & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 41:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(41, 42);
						break;
					case 43:
						if (curChar == 91)
							jjCheckNAdd(44);
						break;
					case 44:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(44, 45);
						break;
					case 45:
						if (curChar != 93)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 50:
						if ((0x7fffffe97ffffffL & l) == 0L)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 51:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(51, 52);
						break;
					case 53:
						if (curChar == 91)
							jjCheckNAdd(54);
						break;
					case 54:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddTwoStates(54, 55);
						break;
					case 55:
						if (curChar != 93)
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 57:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(32, 34);
						break;
					case 58:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(12, 14);
						break;
					case 59:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 60:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 69:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(6, 11);
						break;
					case 75:
					case 76:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(84, 89);
						break;
					case 77:
						if ((0x78000000f8000001L & l) != 0L)
							jjCheckNAddStates(27, 31);
						break;
					case 82:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 79;
						break;
					case 87:
						if (curChar == 96)
							jjCheckNAddStates(95, 98);
						break;
					case 88:
					case 89:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(90, 94);
						break;
					case 90:
						if ((0xa8000001L & l) != 0L)
							jjCheckNAddStates(95, 98);
						break;
					case 92:
						if (curChar == 96 && kind > 39)
							kind = 39;
						break;
					case 98:
						if (curChar == 123)
							jjCheckNAddStates(99, 101);
						break;
					case 99:
					case 100:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(19, 23);
						break;
					case 101:
						if ((0x40000000f8000001L & l) != 0L)
							jjCheckNAddStates(15, 18);
						break;
					case 103:
						if (curChar == 125 && kind > 40)
							kind = 40;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 116:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						break;
					case 114:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						break;
					case 112:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(19, 23);
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(15, 18);
						break;
					case 5:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(32, 34);
						}
						if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddStates(24, 26);
						}
						break;
					case 113:
					case 13:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 27)
							kind = 27;
						jjCheckNAdd(13);
						break;
					case 115:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(12, 14);
						}
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(0, 2);
						}
						if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
							if (kind > 37)
								kind = 37;
							jjCheckNAddStates(6, 11);
						}
						break;
					case 18:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(35, 39);
						break;
					case 19:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(19, 20);
						break;
					case 22:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjAddStates(40, 41);
						break;
					case 28:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 28)
							kind = 28;
						jjCheckNAddStates(46, 50);
						break;
					case 29:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(29, 30);
						break;
					case 32:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjAddStates(51, 52);
						break;
					case 40:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(66, 70);
						break;
					case 41:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(41, 42);
						break;
					case 44:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjAddStates(71, 72);
						break;
					case 50:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 29)
							kind = 29;
						jjCheckNAddStates(77, 81);
						break;
					case 51:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(51, 52);
						break;
					case 54:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjAddStates(82, 83);
						break;
					case 57:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(32, 34);
						break;
					case 58:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(12, 14);
						break;
					case 59:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 60:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(0, 2);
						break;
					case 69:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 37)
							kind = 37;
						jjCheckNAddStates(6, 11);
						break;
					case 75:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(84, 89);
						break;
					case 76:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(84, 89);
						break;
					case 77:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(27, 31);
						break;
					case 88:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(90, 94);
						break;
					case 89:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(90, 94);
						break;
					case 90:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(95, 98);
						break;
					case 99:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(19, 23);
						break;
					case 100:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(19, 23);
						break;
					case 101:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(15, 18);
						break;
					case 109:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddStates(24, 26);
						break;
					case 110:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAdd(110);
						break;
					case 111:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(111, 12);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 59, 60, 61, 72, 68, 63, 58, 59, 60, 61, 69, 70, 58, 59, 66, 99, 108, 101, 103,
			99, 100, 101, 103, 104, 110, 111, 12, 75, 81, 77, 82, 83, 58, 69, 70, 17, 18, 19, 21, 24, 22, 23, 27, 28,
			29, 31, 24, 27, 28, 29, 31, 32, 33, 17, 18, 19, 21, 24, 27, 28, 29, 31, 39, 40, 41, 43, 39, 40, 41, 43, 46,
			44, 45, 49, 50, 51, 53, 46, 49, 50, 51, 53, 54, 55, 75, 76, 77, 82, 83, 84, 88, 89, 90, 92, 93, 88, 97, 90,
			92, 99, 108, 101, 17, 18, 19, 21, 34, 36, 39, 40, 41, 43, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 6:
			return ((jjbitVec4[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec8[i2] & l2) != 0L);
		case 16:
			return ((jjbitVec9[i2] & l2) != 0L);
		case 19:
			return ((jjbitVec10[i2] & l2) != 0L);
		case 23:
			return ((jjbitVec11[i2] & l2) != 0L);
		case 25:
			return ((jjbitVec12[i2] & l2) != 0L);
		default:
			if ((jjbitVec2[i1] & l1) != 0L)
				if ((jjbitVec3[i2] & l2) == 0L)
					return false;
				else
					return true;
			if ((jjbitVec0[i1] & l1) != 0L)
				if ((jjbitVec1[i2] & l2) == 0L)
					return false;
				else
					return true;
			return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec15[i2] & l2) != 0L);
		case 2:
			return ((jjbitVec16[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec17[i2] & l2) != 0L);
		case 4:
			return ((jjbitVec18[i2] & l2) != 0L);
		case 5:
			return ((jjbitVec19[i2] & l2) != 0L);
		case 6:
			return ((jjbitVec20[i2] & l2) != 0L);
		case 7:
			return ((jjbitVec21[i2] & l2) != 0L);
		case 9:
			return ((jjbitVec22[i2] & l2) != 0L);
		case 10:
			return ((jjbitVec23[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec24[i2] & l2) != 0L);
		case 12:
			return ((jjbitVec25[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec26[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec27[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec28[i2] & l2) != 0L);
		case 16:
			return ((jjbitVec29[i2] & l2) != 0L);
		case 17:
			return ((jjbitVec30[i2] & l2) != 0L);
		case 18:
			return ((jjbitVec31[i2] & l2) != 0L);
		case 19:
			return ((jjbitVec32[i2] & l2) != 0L);
		case 20:
			return ((jjbitVec33[i2] & l2) != 0L);
		case 22:
			return ((jjbitVec34[i2] & l2) != 0L);
		case 23:
			return ((jjbitVec35[i2] & l2) != 0L);
		case 24:
			return ((jjbitVec36[i2] & l2) != 0L);
		case 25:
			return ((jjbitVec37[i2] & l2) != 0L);
		case 29:
			return ((jjbitVec38[i2] & l2) != 0L);
		case 30:
			return ((jjbitVec39[i2] & l2) != 0L);
		case 31:
			return ((jjbitVec40[i2] & l2) != 0L);
		case 32:
			return ((jjbitVec41[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec42[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec43[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec44[i2] & l2) != 0L);
		case 77:
			return ((jjbitVec45[i2] & l2) != 0L);
		case 159:
			return ((jjbitVec46[i2] & l2) != 0L);
		case 164:
			return ((jjbitVec47[i2] & l2) != 0L);
		case 215:
			return ((jjbitVec48[i2] & l2) != 0L);
		case 250:
			return ((jjbitVec49[i2] & l2) != 0L);
		case 251:
			return ((jjbitVec50[i2] & l2) != 0L);
		case 253:
			return ((jjbitVec51[i2] & l2) != 0L);
		case 254:
			return ((jjbitVec52[i2] & l2) != 0L);
		case 255:
			return ((jjbitVec53[i2] & l2) != 0L);
		default:
			if ((jjbitVec13[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec15[i2] & l2) != 0L);
		case 2:
			return ((jjbitVec16[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec17[i2] & l2) != 0L);
		case 4:
			return ((jjbitVec18[i2] & l2) != 0L);
		case 5:
			return ((jjbitVec19[i2] & l2) != 0L);
		case 6:
			return ((jjbitVec54[i2] & l2) != 0L);
		case 7:
			return ((jjbitVec21[i2] & l2) != 0L);
		case 9:
			return ((jjbitVec55[i2] & l2) != 0L);
		case 10:
			return ((jjbitVec56[i2] & l2) != 0L);
		case 11:
			return ((jjbitVec57[i2] & l2) != 0L);
		case 12:
			return ((jjbitVec58[i2] & l2) != 0L);
		case 13:
			return ((jjbitVec59[i2] & l2) != 0L);
		case 14:
			return ((jjbitVec60[i2] & l2) != 0L);
		case 15:
			return ((jjbitVec61[i2] & l2) != 0L);
		case 16:
			return ((jjbitVec62[i2] & l2) != 0L);
		case 17:
			return ((jjbitVec30[i2] & l2) != 0L);
		case 18:
			return ((jjbitVec31[i2] & l2) != 0L);
		case 19:
			return ((jjbitVec63[i2] & l2) != 0L);
		case 20:
			return ((jjbitVec33[i2] & l2) != 0L);
		case 22:
			return ((jjbitVec34[i2] & l2) != 0L);
		case 23:
			return ((jjbitVec64[i2] & l2) != 0L);
		case 24:
			return ((jjbitVec65[i2] & l2) != 0L);
		case 25:
			return ((jjbitVec66[i2] & l2) != 0L);
		case 29:
			return ((jjbitVec38[i2] & l2) != 0L);
		case 30:
			return ((jjbitVec39[i2] & l2) != 0L);
		case 31:
			return ((jjbitVec40[i2] & l2) != 0L);
		case 32:
			return ((jjbitVec41[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec42[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec43[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec44[i2] & l2) != 0L);
		case 77:
			return ((jjbitVec45[i2] & l2) != 0L);
		case 159:
			return ((jjbitVec46[i2] & l2) != 0L);
		case 164:
			return ((jjbitVec47[i2] & l2) != 0L);
		case 215:
			return ((jjbitVec48[i2] & l2) != 0L);
		case 250:
			return ((jjbitVec49[i2] & l2) != 0L);
		case 251:
			return ((jjbitVec50[i2] & l2) != 0L);
		case 253:
			return ((jjbitVec51[i2] & l2) != 0L);
		case 254:
			return ((jjbitVec52[i2] & l2) != 0L);
		case 255:
			return ((jjbitVec67[i2] & l2) != 0L);
		default:
			if ((jjbitVec13[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, "\101\116\104", "\117\122",
			"\41", "\75\75", "\41\75", "\164\162\165\145", "\146\141\154\163\145", "\124\117\104\101\131",
			"\72\156\141\155\145", "\72\166\141\154\165\145", "\173", "\175", "\54", "\53", "\52", "\55", "\57", "\45",
			"\156\165\154\154", null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, "\74", "\76", "\74\75", "\76\75", "\43", "\50", "\51", "\44", "\135", "\56", };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x7ffe03fffffc1L, };
	static final long[] jjtoSkip = { 0x3eL, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[112];
	private final int[] jjstateSet = new int[224];
	protected char curChar;

	/** Constructor. */
	public TMLParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public TMLParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 112; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
