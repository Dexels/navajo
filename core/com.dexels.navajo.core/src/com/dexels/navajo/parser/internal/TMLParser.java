/* Generated By:JJTree&JavaCC: Do not edit this line. TMLParser.java */
package com.dexels.navajo.parser.internal;

import java.util.Map;

import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;
import com.dexels.navajo.tipilink.TipiLink;

public class TMLParser/* @bgen(jjtree) */ implements TMLParserTreeConstants, TMLParserConstants {/* @bgen(jjtree) */
	public JJTTMLParserState jjtree = new JJTTMLParserState();
	protected Navajo inputDoc;
	protected MappableTreeNode mapObject;
	protected Message parentMsg;
	protected Message parentParamMsg;
	protected Selection parentSel;
	protected TipiLink tipiLink;
	protected Access access;
	protected Map<String, Object> params;

	public void setNavajoDocument(Navajo doc) {
		this.inputDoc = doc;
	}

	public void setMappableObject(MappableTreeNode o) {
		this.mapObject = o;
	}

	public void setParentMsg(Message m) {
		this.parentMsg = m;
	}

	public void setParentParamMsg(Message m) {
		parentParamMsg = m;
	}

	public void setParams(Map<String, Object> params) {
		this.params = params;
	}

	public void setParentSel(Selection s) {
		this.parentSel = s;
	}

	public void setTipiLink(TipiLink tl) {
		this.tipiLink = tl;
	}

	public void setAccess(Access a) {
		this.access = a;
	}

	final public void ListExpression() throws ParseException {
		ASTListNode jjtn001 = new ASTListNode(JJTLISTNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			jj_consume_token(BEGIN_LIST);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NOT:
			case TRUE:
			case FALSE:
			case TODAY:
			case BEGIN_LIST:
			case MIN:
			case NULL:
			case SARTRE:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case TML_IDENTIFIER:
			case EXISTS_TML_IDENTIFIER:
			case NORMAL_IDENTIFIER:
			case STRING_LITERAL:
			case TIPI_IDENTIFIER:
			case 46:
			case 48:
				Expression();
				jjtn001.args++;
				label_1: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case LIST_SEPARATOR:
						;
						break;
					default:
						jj_la1[0] = jj_gen;
						break label_1;
					}
					jj_consume_token(LIST_SEPARATOR);
					Expression();
					jjtn001.args++;
				}
				break;
			default:
				jj_la1[1] = jj_gen;
				;
			}
			jj_consume_token(END_LIST);
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte001;
				}
			}
			if (jjte001 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte001;
				}
			}
			{
				if (true)
					throw (Error) jjte001;
			}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void Expression() throws ParseException {
		OrExpression();
	}

	final public void OrExpression() throws ParseException {
		AndExpression();
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OR:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_2;
			}
			jj_consume_token(OR);
			ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				AndExpression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					{
						if (true)
							throw (ParseException) jjte001;
					}
				}
				{
					if (true)
						throw (Error) jjte001;
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	final public void AndExpression() throws ParseException {
		EqualityExpression();
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case AND:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_3;
			}
			jj_consume_token(AND);
			ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				EqualityExpression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					{
						if (true)
							throw (ParseException) jjte001;
					}
				}
				{
					if (true)
						throw (Error) jjte001;
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	final public void EqualityExpression() throws ParseException {
		RelationalExpression();
		label_4: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case EQUALS:
			case NOT_EQUALS:
				;
				break;
			default:
				jj_la1[4] = jj_gen;
				break label_4;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case EQUALS:
				jj_consume_token(EQUALS);
				ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					RelationalExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			case NOT_EQUALS:
				jj_consume_token(NOT_EQUALS);
				ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					RelationalExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			default:
				jj_la1[5] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void RelationalExpression() throws ParseException {
		AdditiveExpression();
		label_5: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 41:
			case 42:
			case 43:
			case 44:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_5;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 41:
				jj_consume_token(41);
				ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					AdditiveExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			case 42:
				jj_consume_token(42);
				ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					AdditiveExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			case 43:
				jj_consume_token(43);
				ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
				boolean jjtc003 = true;
				jjtree.openNodeScope(jjtn003);
				try {
					AdditiveExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte003;
						}
					}
					if (jjte003 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte003;
						}
					}
					{
						if (true)
							throw (Error) jjte003;
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;
			case 44:
				jj_consume_token(44);
				ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
				boolean jjtc004 = true;
				jjtree.openNodeScope(jjtn004);
				try {
					AdditiveExpression();
				} catch (Throwable jjte004) {
					if (jjtc004) {
						jjtree.clearNodeScope(jjtn004);
						jjtc004 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte004 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte004;
						}
					}
					if (jjte004 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte004;
						}
					}
					{
						if (true)
							throw (Error) jjte004;
					}
				} finally {
					if (jjtc004) {
						jjtree.closeNodeScope(jjtn004, 2);
					}
				}
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void PrimaryExpression() throws ParseException {
//		String name;
		if (jj_2_1(2147483647)) {
			DatePatternLiteral();
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case TRUE:
			case FALSE:
			case TODAY:
			case BEGIN_LIST:
			case NULL:
			case SARTRE:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case TML_IDENTIFIER:
			case EXISTS_TML_IDENTIFIER:
			case NORMAL_IDENTIFIER:
			case STRING_LITERAL:
			case TIPI_IDENTIFIER:
			case 48:
				Literal();
				break;
			case 46:
				jj_consume_token(46);
				Expression();
				jj_consume_token(47);
				break;
			default:
				jj_la1[8] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void AdditiveExpression() throws ParseException {
		MultiplicativeExpression();
		label_6: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ADD:
			case MIN:
				;
				break;
			default:
				jj_la1[9] = jj_gen;
				break label_6;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ADD:
				jj_consume_token(ADD);
				ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					MultiplicativeExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			case MIN:
				jj_consume_token(MIN);
				ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					MultiplicativeExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			default:
				jj_la1[10] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void MultiplicativeExpression() throws ParseException {
		UnaryExpression();
		label_7: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MUL:
			case DIV:
			case MOD:
				;
				break;
			default:
				jj_la1[11] = jj_gen;
				break label_7;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MUL:
				jj_consume_token(MUL);
				ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					UnaryExpression();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			case DIV:
				jj_consume_token(DIV);
				ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					UnaryExpression();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			case MOD:
				jj_consume_token(MOD);
				ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
				boolean jjtc003 = true;
				jjtree.openNodeScope(jjtn003);
				try {
					UnaryExpression();
				} catch (Throwable jjte003) {
					if (jjtc003) {
						jjtree.clearNodeScope(jjtn003);
						jjtc003 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte003 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte003;
						}
					}
					if (jjte003 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte003;
						}
					}
					{
						if (true)
							throw (Error) jjte003;
					}
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, 2);
					}
				}
				break;
			default:
				jj_la1[12] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	final public void UnaryExpression() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case MIN:
			jj_consume_token(MIN);
			ASTNegativeNode jjtn001 = new ASTNegativeNode(JJTNEGATIVENODE);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				UnaryExpression();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					{
						if (true)
							throw (ParseException) jjte001;
					}
				}
				{
					if (true)
						throw (Error) jjte001;
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, 1);
				}
			}
			break;
		case NOT:
			jj_consume_token(NOT);
			ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
			boolean jjtc002 = true;
			jjtree.openNodeScope(jjtn002);
			try {
				UnaryExpression();
			} catch (Throwable jjte002) {
				if (jjtc002) {
					jjtree.clearNodeScope(jjtn002);
					jjtc002 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte002 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte002;
					}
				}
				if (jjte002 instanceof ParseException) {
					{
						if (true)
							throw (ParseException) jjte002;
					}
				}
				{
					if (true)
						throw (Error) jjte002;
				}
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, 1);
				}
			}
			break;
		case TRUE:
		case FALSE:
		case TODAY:
		case BEGIN_LIST:
		case NULL:
		case SARTRE:
		case INTEGER_LITERAL:
		case FLOAT_LITERAL:
		case TML_IDENTIFIER:
		case EXISTS_TML_IDENTIFIER:
		case NORMAL_IDENTIFIER:
		case STRING_LITERAL:
		case TIPI_IDENTIFIER:
		case 46:
		case 48:
			PrimaryExpression();
			break;
		default:
			jj_la1[13] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void Literal() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SARTRE:
			ForAllLiteral();
			break;
		case BEGIN_LIST:
			ListExpression();
			break;
		case FLOAT_LITERAL:
			FloatLiteral();
			break;
		case INTEGER_LITERAL:
			IntegerLiteral();
			break;
		case NULL:
			ASTNullNode jjtn001 = new ASTNullNode(JJTNULLNODE);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				jj_consume_token(NULL);
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			break;
		case TODAY:
			ASTTodayNode jjtn002 = new ASTTodayNode(JJTTODAYNODE);
			boolean jjtc002 = true;
			jjtree.openNodeScope(jjtn002);
			try {
				jj_consume_token(TODAY);
			} finally {
				if (jjtc002) {
					jjtree.closeNodeScope(jjtn002, true);
				}
			}
			break;
		case TRUE:
			ASTTrueNode jjtn003 = new ASTTrueNode(JJTTRUENODE);
			boolean jjtc003 = true;
			jjtree.openNodeScope(jjtn003);
			try {
				jj_consume_token(TRUE);
			} finally {
				if (jjtc003) {
					jjtree.closeNodeScope(jjtn003, true);
				}
			}
			break;
		case FALSE:
			ASTFalseNode jjtn004 = new ASTFalseNode(JJTFALSENODE);
			boolean jjtc004 = true;
			jjtree.openNodeScope(jjtn004);
			try {
				jj_consume_token(FALSE);
			} finally {
				if (jjtc004) {
					jjtree.closeNodeScope(jjtn004, true);
				}
			}
			break;
		case NORMAL_IDENTIFIER:
			FunctionLiteral();
			break;
		case STRING_LITERAL:
			StringLiteral();
			break;
		case EXISTS_TML_IDENTIFIER:
			ExistsTmlLiteral();
			break;
		case TML_IDENTIFIER:
			TmlLiteral();
			break;
		case TIPI_IDENTIFIER:
			TipiLiteral();
			break;
		case 48:
			jj_consume_token(48);
			MappableLiteral();
			break;
		default:
			jj_la1[14] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	final public void DatePatternLiteral() throws ParseException {
		ASTDatePatternNode jjtn001 = new ASTDatePatternNode(JJTDATEPATTERNNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			Literal();
			jj_consume_token(45);
			Literal();
			jj_consume_token(45);
			Literal();
			jj_consume_token(45);
			Literal();
			jj_consume_token(45);
			Literal();
			jj_consume_token(45);
			Literal();
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte001;
				}
			}
			if (jjte001 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte001;
				}
			}
			{
				if (true)
					throw (Error) jjte001;
			}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void ForAllLiteral() throws ParseException {
		Token t;
		ASTForAllNode jjtn001 = new ASTForAllNode(JJTFORALLNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(SARTRE);
			jj_consume_token(46);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case STRING_LITERAL:
				StringLiteral();
				jj_consume_token(LIST_SEPARATOR);
				ExpressionLiteral();
				break;
			default:
				jj_la1[15] = jj_gen;
				;
			}
			jj_consume_token(47);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.doc = inputDoc;
			jjtn001.parentMsg = parentMsg;
			jjtn001.mapObject = mapObject;
			jjtn001.functionName = t.image;
			jjtn001.setAccess(access);
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte001;
				}
			}
			if (jjte001 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte001;
				}
			}
			{
				if (true)
					throw (Error) jjte001;
			}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void FunctionLiteral() throws ParseException {
		Token t;
		ASTFunctionNode jjtn001 = new ASTFunctionNode(JJTFUNCTIONNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(NORMAL_IDENTIFIER);
			jj_consume_token(46);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NOT:
			case TRUE:
			case FALSE:
			case TODAY:
			case BEGIN_LIST:
			case MIN:
			case NULL:
			case SARTRE:
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case TML_IDENTIFIER:
			case EXISTS_TML_IDENTIFIER:
			case NORMAL_IDENTIFIER:
			case STRING_LITERAL:
			case TIPI_IDENTIFIER:
			case 46:
			case 48:
				Expression();
				jjtn001.args++;
				label_8: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case LIST_SEPARATOR:
						;
						break;
					default:
						jj_la1[16] = jj_gen;
						break label_8;
					}
					jj_consume_token(LIST_SEPARATOR);
					Expression();
					jjtn001.args++;
				}
				break;
			default:
				jj_la1[17] = jj_gen;
				;
			}
			jj_consume_token(47);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.functionName = t.image;
			jjtn001.doc = inputDoc;
			jjtn001.parentMsg = parentMsg;
			jjtn001.parentParamMsg = parentParamMsg;
			jjtn001.setAccess(access);
			jjtn001.setParams(params);
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte001;
				}
			}
			if (jjte001 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte001;
				}
			}
			{
				if (true)
					throw (Error) jjte001;
			}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void FloatLiteral() throws ParseException {
		Token t;
		ASTFloatConstantNode jjtn001 = new ASTFloatConstantNode(JJTFLOATCONSTANTNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(FLOAT_LITERAL);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = Double.parseDouble(t.image);
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void IntegerLiteral() throws ParseException {
		Token t;
		ASTIntegerConstantNode jjtn001 = new ASTIntegerConstantNode(JJTINTEGERCONSTANTNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(INTEGER_LITERAL);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = Integer.parseInt(t.image);
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void StringLiteral() throws ParseException {
		Token t;
		ASTStringConstantNode jjtn001 = new ASTStringConstantNode(JJTSTRINGCONSTANTNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(STRING_LITERAL);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = t.image;
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void ExpressionLiteral() throws ParseException {
		Token t;
		ASTExpresionLiteralNode jjtn001 = new ASTExpresionLiteralNode(JJTEXPRESIONLITERALNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(EXPRESSION_LITERAL);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = t.image;
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void ExistsTmlLiteral() throws ParseException {
		Token t;
		ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(EXISTS_TML_IDENTIFIER);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NAME_OPTION:
			case VALUE_OPTION:
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NAME_OPTION:
					jj_consume_token(NAME_OPTION);
					jjtn001.selectionOption = "name";
					break;
				case VALUE_OPTION:
					jj_consume_token(VALUE_OPTION);
					jjtn001.selectionOption = "value";
					break;
				default:
					jj_la1[18] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				break;
			default:
				jj_la1[19] = jj_gen;
				;
			}
			jj_consume_token(49);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 50:
				jj_consume_token(50);
				jj_consume_token(NORMAL_IDENTIFIER);
				jjtn001.option = token.image;
				break;
			default:
				jj_la1[20] = jj_gen;
				;
			}
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.exists = true;
			jjtn001.val = t.image;
			jjtn001.doc = inputDoc;
			jjtn001.parentMsg = parentMsg;
			jjtn001.parentParamMsg = parentParamMsg;
			jjtn001.parentSel = parentSel;
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void TmlLiteral() throws ParseException {
		Token t;
		ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(TML_IDENTIFIER);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NAME_OPTION:
			case VALUE_OPTION:
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NAME_OPTION:
					jj_consume_token(NAME_OPTION);
					jjtn001.selectionOption = "name";
					break;
				case VALUE_OPTION:
					jj_consume_token(VALUE_OPTION);
					jjtn001.selectionOption = "value";
					break;
				default:
					jj_la1[21] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				break;
			default:
				jj_la1[22] = jj_gen;
				;
			}
			jj_consume_token(49);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 50:
				jj_consume_token(50);
				jj_consume_token(NORMAL_IDENTIFIER);
				jjtn001.option = token.image;
				break;
			default:
				jj_la1[23] = jj_gen;
				;
			}
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.exists = false;
			jjtn001.val = t.image;
			jjtn001.doc = inputDoc;
			jjtn001.parentMsg = parentMsg;
			jjtn001.parentParamMsg = parentParamMsg;
			jjtn001.parentSel = parentSel;
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void TipiLiteral() throws ParseException {
		Token t;
		ASTTipiNode jjtn001 = new ASTTipiNode(JJTTIPINODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(TIPI_IDENTIFIER);
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = t.image;
			jjtn001.tipiLink = tipiLink;
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	final public void MappableLiteral() throws ParseException {
		Token t;
		ASTMappableNode jjtn001 = new ASTMappableNode(JJTMAPPABLENODE);
		boolean jjtc001 = true;
		jjtree.openNodeScope(jjtn001);
		try {
			t = jj_consume_token(NORMAL_IDENTIFIER);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 46:
				jj_consume_token(46);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NOT:
				case TRUE:
				case FALSE:
				case TODAY:
				case BEGIN_LIST:
				case MIN:
				case NULL:
				case SARTRE:
				case INTEGER_LITERAL:
				case FLOAT_LITERAL:
				case TML_IDENTIFIER:
				case EXISTS_TML_IDENTIFIER:
				case NORMAL_IDENTIFIER:
				case STRING_LITERAL:
				case TIPI_IDENTIFIER:
				case 46:
				case 48:
					Expression();
					jjtn001.args++;
					label_9: while (true) {
						switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
						case LIST_SEPARATOR:
							;
							break;
						default:
							jj_la1[24] = jj_gen;
							break label_9;
						}
						jj_consume_token(LIST_SEPARATOR);
						Expression();
						jjtn001.args++;
					}
					break;
				default:
					jj_la1[25] = jj_gen;
					;
				}
				jj_consume_token(47);
				break;
			default:
				jj_la1[26] = jj_gen;
				;
			}
			jjtree.closeNodeScope(jjtn001, true);
			jjtc001 = false;
			jjtn001.val = t.image;
			jjtn001.mapObject = mapObject;
		} catch (Throwable jjte001) {
			if (jjtc001) {
				jjtree.clearNodeScope(jjtn001);
				jjtc001 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte001 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte001;
				}
			}
			if (jjte001 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte001;
				}
			}
			{
				if (true)
					throw (Error) jjte001;
			}
		} finally {
			if (jjtc001) {
				jjtree.closeNodeScope(jjtn001, true);
			}
		}
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_3R_33() {
		if (jj_scan_token(TIPI_IDENTIFIER))
			return true;
		return false;
	}

	private boolean jj_3R_32() {
		if (jj_scan_token(TML_IDENTIFIER))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_40())
			jj_scanpos = xsp;
		if (jj_scan_token(49))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_41())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_15() {
		if (jj_scan_token(NULL))
			return true;
		return false;
	}

	private boolean jj_3R_31() {
		if (jj_scan_token(EXISTS_TML_IDENTIFIER))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_38())
			jj_scanpos = xsp;
		if (jj_scan_token(49))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_39())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_scan_token(LIST_SEPARATOR))
			return true;
		if (jj_3R_44())
			return true;
		return false;
	}

	private boolean jj_3R_43() {
		if (jj_scan_token(EXPRESSION_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_3R_28())
			return true;
		return false;
	}

	private boolean jj_3R_24() {
		if (jj_scan_token(48))
			return true;
		if (jj_3R_34())
			return true;
		return false;
	}

	private boolean jj_3R_30() {
		if (jj_scan_token(STRING_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_28() {
		if (jj_scan_token(INTEGER_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_23() {
		if (jj_3R_33())
			return true;
		return false;
	}

	private boolean jj_3R_13() {
		if (jj_3R_27())
			return true;
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_3R_30())
			return true;
		if (jj_scan_token(LIST_SEPARATOR))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	private boolean jj_3R_27() {
		if (jj_scan_token(FLOAT_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_3R_44())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_46()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_scan_token(50))
			return true;
		if (jj_scan_token(NORMAL_IDENTIFIER))
			return true;
		return false;
	}

	private boolean jj_3R_83() {
		if (jj_scan_token(46))
			return true;
		if (jj_3R_44())
			return true;
		if (jj_scan_token(47))
			return true;
		return false;
	}

	private boolean jj_3R_22() {
		if (jj_3R_32())
			return true;
		return false;
	}

	private boolean jj_3R_39() {
		if (jj_scan_token(50))
			return true;
		if (jj_scan_token(NORMAL_IDENTIFIER))
			return true;
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_scan_token(NORMAL_IDENTIFIER))
			return true;
		if (jj_scan_token(46))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_37())
			jj_scanpos = xsp;
		if (jj_scan_token(47))
			return true;
		return false;
	}

	private boolean jj_3R_20() {
		if (jj_3R_30())
			return true;
		return false;
	}

	private boolean jj_3R_12() {
		if (jj_3R_26())
			return true;
		return false;
	}

	private boolean jj_3R_25() {
		if (jj_scan_token(SARTRE))
			return true;
		if (jj_scan_token(46))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_35())
			jj_scanpos = xsp;
		if (jj_scan_token(47))
			return true;
		return false;
	}

	private boolean jj_3R_82() {
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3R_84() {
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		if (jj_3R_10())
			return true;
		return false;
	}

	private boolean jj_3R_21() {
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3R_19() {
		if (jj_3R_29())
			return true;
		return false;
	}

	private boolean jj_3R_11() {
		if (jj_3R_25())
			return true;
		return false;
	}

	private boolean jj_3R_10() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_11()) {
			jj_scanpos = xsp;
			if (jj_3R_12()) {
				jj_scanpos = xsp;
				if (jj_3R_13()) {
					jj_scanpos = xsp;
					if (jj_3R_14()) {
						jj_scanpos = xsp;
						if (jj_3R_15()) {
							jj_scanpos = xsp;
							if (jj_3R_16()) {
								jj_scanpos = xsp;
								if (jj_3R_17()) {
									jj_scanpos = xsp;
									if (jj_3R_18()) {
										jj_scanpos = xsp;
										if (jj_3R_19()) {
											jj_scanpos = xsp;
											if (jj_3R_20()) {
												jj_scanpos = xsp;
												if (jj_3R_21()) {
													jj_scanpos = xsp;
													if (jj_3R_22()) {
														jj_scanpos = xsp;
														if (jj_3R_23()) {
															jj_scanpos = xsp;
															if (jj_3R_24())
																return true;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_76() {
		if (jj_3R_80())
			return true;
		return false;
	}

	private boolean jj_3R_75() {
		if (jj_scan_token(NOT))
			return true;
		if (jj_3R_70())
			return true;
		return false;
	}

	private boolean jj_3R_70() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_74()) {
			jj_scanpos = xsp;
			if (jj_3R_75()) {
				jj_scanpos = xsp;
				if (jj_3R_76())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_74() {
		if (jj_scan_token(MIN))
			return true;
		if (jj_3R_70())
			return true;
		return false;
	}

	private boolean jj_3R_79() {
		if (jj_scan_token(MOD))
			return true;
		if (jj_3R_70())
			return true;
		return false;
	}

	private boolean jj_3R_78() {
		if (jj_scan_token(DIV))
			return true;
		if (jj_3R_70())
			return true;
		return false;
	}

	private boolean jj_3R_71() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_77()) {
			jj_scanpos = xsp;
			if (jj_3R_78()) {
				jj_scanpos = xsp;
				if (jj_3R_79())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_77() {
		if (jj_scan_token(MUL))
			return true;
		if (jj_3R_70())
			return true;
		return false;
	}

	private boolean jj_3R_64() {
		if (jj_3R_70())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_71()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_73() {
		if (jj_scan_token(MIN))
			return true;
		if (jj_3R_64())
			return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_10())
			return true;
		if (jj_scan_token(45))
			return true;
		return false;
	}

	private boolean jj_3R_65() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_72()) {
			jj_scanpos = xsp;
			if (jj_3R_73())
				return true;
		}
		return false;
	}

	private boolean jj_3R_72() {
		if (jj_scan_token(ADD))
			return true;
		if (jj_3R_64())
			return true;
		return false;
	}

	private boolean jj_3R_60() {
		if (jj_3R_64())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_65()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_50() {
		if (jj_scan_token(VALUE_OPTION))
			return true;
		return false;
	}

	private boolean jj_3R_81() {
		if (jj_3R_84())
			return true;
		return false;
	}

	private boolean jj_3R_80() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_81()) {
			jj_scanpos = xsp;
			if (jj_3R_82()) {
				jj_scanpos = xsp;
				if (jj_3R_83())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_45() {
		if (jj_scan_token(LIST_SEPARATOR))
			return true;
		if (jj_3R_44())
			return true;
		return false;
	}

	private boolean jj_3R_48() {
		if (jj_scan_token(VALUE_OPTION))
			return true;
		return false;
	}

	private boolean jj_3R_69() {
		if (jj_scan_token(44))
			return true;
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_68() {
		if (jj_scan_token(43))
			return true;
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_67() {
		if (jj_scan_token(42))
			return true;
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_61() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_66()) {
			jj_scanpos = xsp;
			if (jj_3R_67()) {
				jj_scanpos = xsp;
				if (jj_3R_68()) {
					jj_scanpos = xsp;
					if (jj_3R_69())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_66() {
		if (jj_scan_token(41))
			return true;
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_58() {
		if (jj_3R_60())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_61()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_59() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_62()) {
			jj_scanpos = xsp;
			if (jj_3R_63())
				return true;
		}
		return false;
	}

	private boolean jj_3R_62() {
		if (jj_scan_token(EQUALS))
			return true;
		if (jj_3R_58())
			return true;
		return false;
	}

	private boolean jj_3R_63() {
		if (jj_scan_token(NOT_EQUALS))
			return true;
		if (jj_3R_58())
			return true;
		return false;
	}

	private boolean jj_3R_56() {
		if (jj_3R_58())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_59()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_18() {
		if (jj_scan_token(FALSE))
			return true;
		return false;
	}

	private boolean jj_3R_53() {
		if (jj_scan_token(LIST_SEPARATOR))
			return true;
		if (jj_3R_44())
			return true;
		return false;
	}

	private boolean jj_3R_57() {
		if (jj_scan_token(AND))
			return true;
		if (jj_3R_56())
			return true;
		return false;
	}

	private boolean jj_3R_54() {
		if (jj_3R_56())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_57()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_36() {
		if (jj_3R_44())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_45()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_55() {
		if (jj_scan_token(OR))
			return true;
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_52() {
		if (jj_3R_54())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_55()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_17() {
		if (jj_scan_token(TRUE))
			return true;
		return false;
	}

	private boolean jj_3R_44() {
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_26() {
		if (jj_scan_token(BEGIN_LIST))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_36())
			jj_scanpos = xsp;
		if (jj_scan_token(END_LIST))
			return true;
		return false;
	}

	private boolean jj_3R_49() {
		if (jj_scan_token(NAME_OPTION))
			return true;
		return false;
	}

	private boolean jj_3R_40() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_49()) {
			jj_scanpos = xsp;
			if (jj_3R_50())
				return true;
		}
		return false;
	}

	private boolean jj_3R_47() {
		if (jj_scan_token(NAME_OPTION))
			return true;
		return false;
	}

	private boolean jj_3R_38() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_47()) {
			jj_scanpos = xsp;
			if (jj_3R_48())
				return true;
		}
		return false;
	}

	private boolean jj_3R_51() {
		if (jj_3R_44())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_53()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_42() {
		if (jj_scan_token(46))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_51())
			jj_scanpos = xsp;
		if (jj_scan_token(47))
			return true;
		return false;
	}

	private boolean jj_3R_34() {
		if (jj_scan_token(NORMAL_IDENTIFIER))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_42())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_16() {
		if (jj_scan_token(TODAY))
			return true;
		return false;
	}

	/** Generated Token Manager. */
	public TMLParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[27];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x40000, 0x3f213900, 0x80, 0x40, 0x600, 0x600, 0x0, 0x0, 0x3f013800, 0x280000, 0x280000,
				0xd00000, 0xd00000, 0x3f213900, 0x3f013800, 0x0, 0x40000, 0x3f213900, 0xc000, 0xc000, 0x0, 0xc000,
				0xc000, 0x0, 0x40000, 0x3f213900, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x14160, 0x0, 0x0, 0x0, 0x0, 0x1e00, 0x1e00, 0x14160, 0x0, 0x0, 0x0, 0x0, 0x14160,
				0x10160, 0x40, 0x0, 0x14160, 0x0, 0x0, 0x40000, 0x0, 0x0, 0x40000, 0x0, 0x14160, 0x4000, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[1];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public TMLParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public TMLParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new TMLParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public TMLParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new TMLParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public TMLParser(TMLParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(TMLParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 27; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {

		private static final long serialVersionUID = 4452050120923456281L;
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[51];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 27; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 51; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 1; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
