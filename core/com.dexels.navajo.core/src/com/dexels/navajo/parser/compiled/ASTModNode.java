/* Generated By:JJTree&JavaCC: Do not edit this line. ASTModNode.java */
package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import com.dexels.navajo.document.Operand;
import com.dexels.navajo.document.Property;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TMLExpressionException;

final class ASTModNode extends SimpleNode {
    ASTModNode(int id) {
        super(id);
    }
	@Override
	public ContextExpression interpretToLambda(List<String> problems, String expression, Function<String, FunctionClassification> functionClassifier) {
		return lazyBiFunction(problems,expression, (a,b)->interpret(a, b),emptyOrType(Property.INTEGER_PROPERTY),(a,b)->Optional.of(Property.INTEGER_PROPERTY),functionClassifier);
	}

	private final Operand interpret(Operand ao, Operand bo){
		Object a = ao.value;
		Object b = bo.value;
		if(a==null) {
            throw new TMLExpressionException("Modulo operator failed: First operand is null.");
		}
		if(b==null) {
            throw new TMLExpressionException("Modulo operator failed: Second operand is null.");
		}
        if (!(a instanceof Integer && b instanceof Integer)) {
                throw new TMLExpressionException("Modulo operator only defined for integers, not: "+a.getClass()+" and "+b.getClass());
        }
        	
        return Operand.ofInteger(((Integer) a).intValue() % ((Integer) b).intValue());
    }
}
