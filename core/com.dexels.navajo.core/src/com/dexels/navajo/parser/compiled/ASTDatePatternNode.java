/* Generated By:JJTree&JavaCC: Do not edit this line. ASTDatePatternNode.java */
package com.dexels.navajo.parser.compiled;

import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.parser.DatePattern;
import com.dexels.navajo.parser.TMLExpressionException;
import com.dexels.navajo.parser.compiled.api.ContextExpression;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;
import com.dexels.navajo.tipilink.TipiLink;
import com.dexels.replication.api.ReplicationMessage;

public final class ASTDatePatternNode extends SimpleNode {
    public ASTDatePatternNode(int id) {
        super(id);
    }


	@Override
	public ContextExpression interpretToLambda() {
		ContextExpression y = jjtGetChild(0).interpretToLambda();
		ContextExpression m = jjtGetChild(1).interpretToLambda();
		ContextExpression d = jjtGetChild(2).interpretToLambda();
		ContextExpression h = jjtGetChild(3).interpretToLambda();
		ContextExpression min = jjtGetChild(4).interpretToLambda();
		ContextExpression s = jjtGetChild(5).interpretToLambda();
		final boolean isLiteral = y.isLiteral() && m.isLiteral() && d.isLiteral() && h.isLiteral() && h.isLiteral() && s.isLiteral();
		
		return new ContextExpression() {
			
			@Override
			public boolean isLiteral() {
				return isLiteral;
			}
			
			@Override
			public Object apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel,
					 MappableTreeNode mapNode, TipiLink tipiLink, Access access, ReplicationMessage immutableMessage) throws TMLExpressionException {
		        int yearT = ((Integer) y.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        int monthT = ((Integer)m.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        int dayT = ((Integer) d.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        int hourT = ((Integer) h.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        int minT = ((Integer) min.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        int secT = ((Integer) s.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access, immutableMessage)).intValue();
		        return new DatePattern(yearT, monthT, dayT, hourT, minT, secT, true);
			}
		};
	}

}
