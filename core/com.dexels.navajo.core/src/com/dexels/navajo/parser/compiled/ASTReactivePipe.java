/* Generated By:JJTree: Do not edit this line. ASTReactivePipe.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.dexels.navajo.parser.compiled;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

import com.dexels.navajo.document.Operand;
import com.dexels.navajo.document.stream.DataItem;
import com.dexels.navajo.document.stream.api.StreamScriptContext;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.parser.compiled.api.ReactiveParseItem;
import com.dexels.navajo.parser.compiled.api.ReactivePipeNode;
import com.dexels.navajo.reactive.api.ReactiveMerger;
import com.dexels.navajo.reactive.api.ReactiveSource;
import com.dexels.navajo.reactive.api.ReactiveTransformer;


public
class ASTReactivePipe extends SimpleNode {
  public ASTReactivePipe(int id) {
    super(id);
  }

@Override
public ContextExpression interpretToLambda(List<String> problems, String originalExpression, Function<String, FunctionClassification> functionClassifier) {

	int count = jjtGetNumChildren();
	Node sourceNode = jjtGetChild(0);
	System.err.println("Nodeclass: "+sourceNode);
//	if(mode==ParseMode.DEFAULT) {
//		ContextExpression passthough = (ContextExpression) sourceNode.interpretToLambda(problems, originalExpression,functionClassifier);
//		return passthough;
//	}
	List<Object> pipeElements = new ArrayList<>();
	ReactiveSource source = (ReactiveSource) sourceNode.interpretToLambda(problems, originalExpression,functionClassifier).apply().value;
//	pipeElements.add(source);
	for (int i = 1; i < count; i++) {
		ContextExpression interpretToLambda = jjtGetChild(i).interpretToLambda(problems, originalExpression,functionClassifier);
		Object result = interpretToLambda.apply().value;
		if(result instanceof io.reactivex.functions.Function) {
			io.reactivex.functions.Function<StreamScriptContext,io.reactivex.functions.Function<DataItem,DataItem>> merger = (io.reactivex.functions.Function) result;
			pipeElements.add(merger);

		} else if(result instanceof ReactiveTransformer) {
			ReactiveTransformer transformer = (ReactiveTransformer) result;
			pipeElements.add(transformer);
		} else {
			// something weird
		}
	}
	ReactivePipeNode pipe = new ReactivePipeNode(source, pipeElements);
	return pipe;
	
}

}
/* JavaCC - OriginalChecksum=dd1db8c7a34ea094a180c8dc73739db3 (do not edit this line) */
