/* Generated By:JJTree: Do not edit this line. ASTReactiveElementNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import com.dexels.immutable.api.ImmutableMessage;
import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Operand;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TipiLink;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;

class ASTReactiveElementNode extends SimpleNode {
  public int args = 0;
  ASTReactiveElementNode(int id) {
    super(id);
  }

@Override
public ContextExpression interpretToLambda(List<String> problems, String originalExpression, Function<String, FunctionClassification> functionClassifier) {
	return new ContextExpression() {

		@Override
		public Operand apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel,
				MappableTreeNode mapNode, TipiLink tipiLink, Access access, Optional<ImmutableMessage> immutableMessage,
				Optional<ImmutableMessage> paramMessage) {
			
			return Operand.ofCustom("monkey","reactiveelement");
		}

		@Override
		public boolean isLiteral() {
			return true;
		}

		@Override
		public Optional<String> returnType() {
			return Optional.of("reactiveElement");
		}

		@Override
		public String expression() {
			return originalExpression;
		}
		
	};
}


}
/* JavaCC - OriginalChecksum=028cb8e5b820f108a5f2014943d4cf94 (do not edit this line) */
