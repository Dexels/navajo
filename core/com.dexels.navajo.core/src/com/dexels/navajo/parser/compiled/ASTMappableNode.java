/*
This file is part of the Navajo Project. 
It is subject to the license terms in the COPYING file found in the top-level directory of this distribution and at https://www.gnu.org/licenses/agpl-3.0.txt. 
No part of the Navajo Project, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYING file.
*/
/* Generated By:JJTree&JavaCC: Do not edit this line. ASTMappableNode.java */

package com.dexels.navajo.parser.compiled;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.dexels.immutable.api.ImmutableMessage;
import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Operand;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TMLExpressionException;
import com.dexels.navajo.expression.api.TipiLink;
import com.dexels.navajo.mapping.MappingUtils;
import com.dexels.navajo.mapping.bean.DomainObjectMapper;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;

@SuppressWarnings({"unchecked","rawtypes"})
final class ASTMappableNode extends SimpleNode {

	
	private static final Logger logger = LoggerFactory
			.getLogger(ASTMappableNode.class);
    String val = "";
    int args = 0;

    ASTMappableNode(int id) {
        super(id);
    }
    
	private static Object maybeGetMapAttribute(String text, MappableTreeNode mapNode, Object[] parameterArray) throws Exception {
		Object oValue = null;
		try {
			oValue = MappingUtils.getAttributeValue(mapNode, text, parameterArray);
		} catch (Exception e2) {
			logger.error("Error: ", e2);
			// Maybe domainobjectmapper?
			if ( mapNode.myObject instanceof DomainObjectMapper ) {
				oValue = ((DomainObjectMapper) mapNode.myObject).getDomainObjectAttribute(text, parameterArray);
			} else {
				throw new TMLExpressionException("Can not resolve attribute value",e2);
			}
		}
		return oValue;
	}

	@Override
	public ContextExpression interpretToLambda(List<String> problems, String expression, Function<String, FunctionClassification> functionClassifier, Function<String,Optional<Node>> mapResolver) {
		Optional<Node> resolved = mapResolver.apply(val);
		if(resolved.isPresent()) {
			return resolved.get().interpretToLambda(problems, expression, functionClassifier, mapResolver);
		}
		return new ContextExpression() {
			
			@Override
			public boolean isLiteral() {
				return false;
			}
			
			@Override
			public Operand apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel,
					 MappableTreeNode mapNode, TipiLink tipiLink, Access access, Optional<ImmutableMessage> immutableMessage, Optional<ImmutableMessage> paramMessage) {
		        if (mapNode == null) {
		            throw new TMLExpressionException("No known mapobject resolver");
		        }

//		        MappableTreeNode mapNode = mapNodeResolver.apply(val);
//				if(mapNode==null) {
//		            throw new TMLExpressionException("No known mapobject");
//		        	
//		        }
//		        if(mapNode==null) {
//		        	Node resolvedItem = mapResolver.get().apply(val);
//		        	System.err.println(">> "+resolvedItem.getClass());
//		        	resolvedItem.interpretToLambda(problems, expression, functionClassifier, mapResolver);
//		        	
//		        }
		        List objects = null;

		        // Parameter array may contain parameters that are used when calling the get method.
		        Object[] parameterArray = null;

		        if (args > 0) {
		            objects = new ArrayList();
		        }
		        for (int i = 0; i < args; i++) {
		        		List<String> problems = new ArrayList<>();
		            Operand a = jjtGetChild(i).interpretToLambda(problems, expression,functionClassifier,mapResolver).apply(doc, parentMsg, parentParamMsg, parentSel, mapNode, tipiLink, access,immutableMessage,paramMessage);
		            if(!problems.isEmpty()) {
		            		throw new TMLExpressionException(problems,expression);
		            }
		            if(objects!=null) {
		                objects.add(a.value);
		            }
		        }

//		        List<String> problems
		        if (objects != null) {
		            parameterArray = new Object[objects.size()];
		            parameterArray = objects.toArray(parameterArray);
		        }

		        try {
		        	Object oValue = maybeGetMapAttribute(val,mapNode, parameterArray);
		            if (oValue == null)
		                return Operand.NULL;
		            else if (oValue instanceof Float) {
		              return Operand.ofFloat(((Float) oValue).doubleValue()); 
		            } else if (oValue instanceof Long) {
			              return Operand.ofLong(((Long) oValue).longValue());
		            } else {
			              return Operand.ofDynamic(oValue);
		            }
		        } catch (Exception me) {
		            throw new TMLExpressionException(me.getMessage(),me);
		        }
			}


			@Override
			public Optional<String> returnType() {
				return Optional.empty();
			}
			
			@Override
			public String expression() {
				return expression;
			}
		};
	}
}

