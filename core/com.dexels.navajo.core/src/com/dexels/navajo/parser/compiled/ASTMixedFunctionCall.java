/* Generated By:JJTree: Do not edit this line. ASTMixedFunctionCall.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.dexels.navajo.parser.compiled;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.dexels.navajo.parser.NamedExpression;
import com.dexels.navajo.parser.compiled.api.ContextExpression;

public
class ASTMixedFunctionCall extends SimpleNode {

	public int args = 0;
	public String functionCall = "";
	private Map<String,ContextExpression> named = new HashMap<>();
	private List<ContextExpression> unnamed = new LinkedList<>();

	public ASTMixedFunctionCall(int id) {
		super(id);
	}


@Override
public ContextExpression interpretToLambda(List<String> problems, String originalExpression) {
	for (int i = 0; i <jjtGetNumChildren(); i++) {
		Node sn = jjtGetChild(i);
		ContextExpression cn = sn.interpretToLambda(problems, originalExpression);
		if(sn instanceof NamedExpression) {
			NamedExpression ne = (NamedExpression)cn;
			named.put(ne.name, ne.expression);
		} else {
			unnamed.add(cn);
		}
	}
//	ContextExpression atn = (ASTMixedFunctionCall) cp.getJJTree().rootNode();
	System.err.println("Named: "+named+" unnamed: "+unnamed);
	return null;
}

}
/* JavaCC - OriginalChecksum=0dedba3ff53277f3359b6a8cacfe77c8 (do not edit this line) */
