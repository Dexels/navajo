/* Generated By:JJTree&JavaCC: Do not edit this line. ASTMulNode.java */
package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;

import com.dexels.navajo.document.types.Money;
import com.dexels.navajo.document.types.Percentage;
import com.dexels.navajo.parser.TMLExpressionException;
import com.dexels.navajo.parser.Utils;
import com.dexels.navajo.parser.compiled.api.ContextExpression;


public final class ASTMulNode extends SimpleNode {

    public ASTMulNode(int id) {
        super(id);
    }
	@Override
	public ContextExpression interpretToLambda(List<String> problems, String expression) {
		// TODO We can do *some* type restriction, just not much.
		return lazyBiFunction(problems,expression, (a,b)->interpret(a, b),(a,b)->true,(a,b)->Optional.empty());
	}
	
	public  Object interpret(Object a, Object b) {

        if ((a instanceof Integer) && (b instanceof Integer))
            return new Integer(((Integer) a).intValue() * ((Integer) b).intValue());
        else if ((a instanceof String) || (b instanceof String))
            throw new TMLExpressionException("Multiplication not defined for String values");
        else if (a instanceof Double && b instanceof Integer)
            return new Double(((Double) a).doubleValue() * ((Integer) b).intValue());
        else if (a instanceof Integer && b instanceof Double)
            return new Double(((Double) b).doubleValue() * ((Integer) a).intValue());
        else if (a instanceof Double && b instanceof Double)
            return new Double(((Double) b).doubleValue() * ((Double) a).doubleValue());
        else if (a instanceof Money || b instanceof Money)
            return new Money(Utils.getDoubleValue(a) * Utils.getDoubleValue(b));
          else if (a instanceof Percentage || b instanceof Percentage)
              return new Money(Utils.getDoubleValue(a) * Utils.getDoubleValue(b));
        else
//            throw new TMLExpressionException("Unknown type");
        	return null;
    }

}
