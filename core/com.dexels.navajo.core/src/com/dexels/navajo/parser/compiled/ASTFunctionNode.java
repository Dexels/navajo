/* Generated By:JJTree&JavaCC: Do not edit this line. ASTFunctionNode.java */
package com.dexels.navajo.parser.compiled;

import java.util.LinkedList;
import java.util.List;

import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.functions.util.FunctionFactoryFactory;
import com.dexels.navajo.functions.util.OSGiFunctionFactoryFactory;
import com.dexels.navajo.parser.FunctionInterface;
import com.dexels.navajo.parser.TMLExpressionException;
import com.dexels.navajo.script.api.MappableTreeNode;
import com.dexels.navajo.server.DispatcherFactory;
import com.dexels.navajo.tipilink.TipiLink;
import com.dexels.navajo.version.AbstractVersion;


public final class ASTFunctionNode extends SimpleNode {

	String functionName;
	int args = 0;
	
	public ASTFunctionNode(int id) {
		super(id);
	}
	
	@Override
	public ContextExpression interpretToLambda() {

		
//		if(AbstractVersion.osgiActive()) {
//			f = OSGiFunctionFactoryFactory.getFunctionInterface(functionName);
//		} else {
//			f = FunctionFactoryFactory.getInstance().getInstance(cl, functionName);
//		}
		List<ContextExpression> l = new LinkedList<>();
		for (int i = 0; i < args; i++) {
			ContextExpression a = jjtGetChild(i).interpretToLambda();
			l.add(a);
		}
		return new ContextExpression() {
			
			@Override
			public boolean isLiteral() {
				return getFunction().isPure() && l.stream().allMatch(e->e.isLiteral());
			}
			
			@Override
			public Object apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel, String option,
					String selectionOption, MappableTreeNode mapNode, TipiLink tipiLink) throws TMLExpressionException {
				FunctionInterface f = getFunction();
				f.setInMessage(doc);
				f.setCurrentMessage(parentMsg);
				f.reset();
				l.stream()
					.map(e->{
						try {
							return e.apply(doc, parentMsg, parentParamMsg, parentSel, option, selectionOption, mapNode,tipiLink);
						} catch (TMLExpressionException e1) {
							throw new RuntimeException("Error parsing parameters for function: "+functionName, e1);
						}
					})
					.forEach(e->f.insertOperand(e));
				return f.evaluateWithTypeChecking();
			}

			private FunctionInterface getFunction() {
				ClassLoader cl = null;
				if ( DispatcherFactory.getInstance() == null ) {
					cl = getClass().getClassLoader();
				} else  {
					cl = DispatcherFactory.getInstance().getNavajoConfig().getClassloader();
				} 

				FunctionInterface f = AbstractVersion.osgiActive() ? OSGiFunctionFactoryFactory.getFunctionInterface(functionName) :
					FunctionFactoryFactory.getInstance().getInstance(cl, functionName);
				return f;
			}
		};
	}

}
