/* Generated By:JJTree&JavaCC: Do not edit this line. ASTAndNode.java */
package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;

import com.dexels.immutable.api.ImmutableMessage;
import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Property;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.parser.TMLExpressionException;
import com.dexels.navajo.parser.compiled.api.ContextExpression;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;
import com.dexels.navajo.tipilink.TipiLink;

public final class ASTAndNode extends SimpleNode {
    public ASTAndNode(int id) {
        super(id);
    }

	@Override
	public ContextExpression interpretToLambda(List<String> problems) {
		ContextExpression expA = jjtGetChild(0).interpretToLambda(problems);
		ContextExpression expB = jjtGetChild(1).interpretToLambda(problems);
		Optional<String> expressionA = expA.returnType();
        if (expressionA != null && expressionA.isPresent() && !expressionA.get().equals(Property.BOOLEAN_PROPERTY)
                && !expressionA.get().equals("any")) {
			problems.add("In AND expression the first expression is not a boolean but a "+expressionA.get());
		}
		Optional<String> expressionB = expB.returnType();
        if (expressionB != null && expressionB.isPresent() && !expressionB.get().equals(Property.BOOLEAN_PROPERTY)
                && !expressionB.get().equals("any")) {
			problems.add("In AND expression the second expression is not a boolean but a "+expressionB.get());
		}

		return new ContextExpression() {
			@Override
			public Object apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel,
					MappableTreeNode mapNode, TipiLink tipiLink, Access access, Optional<ImmutableMessage> immutableMessage, Optional<ImmutableMessage> paramMessage) throws TMLExpressionException {
		        Object a = expA.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode,tipiLink,access,immutableMessage,paramMessage);
				if(a==null) {
		        		return Boolean.FALSE;
		        }
				Boolean ba = (Boolean)a;
		        if (!(ba.booleanValue())) {
					return Boolean.FALSE;
				}
		        Object b = expB.apply(doc, parentMsg, parentParamMsg, parentSel, mapNode,tipiLink,access, immutableMessage,paramMessage);
		        if(b==null) {
		        		return Boolean.FALSE;
		        }
		        Boolean bb = (Boolean)b;
		        return bb.booleanValue();
			}

			@Override
			public boolean isLiteral() {
				return expA.isLiteral() && expB.isLiteral();
			}

			@Override
			public Optional<String> returnType() {
				return Optional.of(Property.BOOLEAN_PROPERTY);
			}
		};
	}
}
