/* Generated By:JJTree&JavaCC: Do not edit this line. ASTNegativeNode.java */
package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import com.dexels.navajo.document.types.Money;
import com.dexels.navajo.document.types.Percentage;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TMLExpressionException;


public final class ASTNegativeNode extends SimpleNode {
    public ASTNegativeNode(int id) {
        super(id);
    }

	public final Object interpret(Object a) throws TMLExpressionException {


        if (a instanceof String)
            return "-" + ((String) a); // this is just silly
        else if (a instanceof Integer)
            return Integer.valueOf(0 - ((Integer) a).intValue());
        else if (a instanceof Double)
            return Double.valueOf(0 - ((Double) a).doubleValue());
        else if (a instanceof Money)
          return new Money(0 - ((Money) a).doubleValue());
        else if (a instanceof Percentage)
          return new Percentage(0 - ((Percentage) a).doubleValue());
        else
          throw new TMLExpressionException("Illegal type encountered before negation");
    }

	@Override
	public ContextExpression interpretToLambda(List<String> problems, String expression, Function<String, FunctionClassification> functionClassifier) {
		return lazyFunction(problems,expression, a->interpret(a), Optional.empty(),functionClassifier);
	}

}
