/*
This file is part of the Navajo Project. 
It is subject to the license terms in the COPYING file found in the top-level directory of this distribution and at https://www.gnu.org/licenses/agpl-3.0.txt. 
No part of the Navajo Project, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYING file.
*/
/* Generated By:JJTree&JavaCC: Do not edit this line. ASTTipiNode.java */

package com.dexels.navajo.parser.compiled;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import com.dexels.immutable.api.ImmutableMessage;
import com.dexels.navajo.document.Message;
import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.document.Operand;
import com.dexels.navajo.document.Selection;
import com.dexels.navajo.expression.api.ContextExpression;
import com.dexels.navajo.expression.api.FunctionClassification;
import com.dexels.navajo.expression.api.TMLExpressionException;
import com.dexels.navajo.expression.api.TipiLink;
import com.dexels.navajo.script.api.Access;
import com.dexels.navajo.script.api.MappableTreeNode;

final class ASTTipiNode extends SimpleNode {

  String val = "";

  ASTTipiNode(int id) {
    super(id);
  }

@Override
public ContextExpression interpretToLambda(List<String> problems, String expression, Function<String, FunctionClassification> functionClassifier, Function<String,Optional<Node>> mapResolver) {
	return new ContextExpression() {
		
		@Override
		public boolean isLiteral() {
			return false;
		}
		
		@Override
		public Operand apply(Navajo doc, Message parentMsg, Message parentParamMsg, Selection parentSel,
				 MappableTreeNode mapNode, TipiLink tipiLink, Access access, Optional<ImmutableMessage> immutableMessage, Optional<ImmutableMessage> paramMessage)  {
		      try {
				return Operand.ofDynamic(tipiLink.evaluateExpression(val),"tipi");
			} catch (Exception e) {
				throw new TMLExpressionException("Error evaluating tipiLink: "+val, e);
			}
		}

		@Override
		public Optional<String> returnType() {
			return Optional.empty();
		}
		
		@Override
		public String expression() {
			return expression;
		}
	};
}

}
