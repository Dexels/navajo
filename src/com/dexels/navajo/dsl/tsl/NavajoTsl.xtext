//grammar com.dexels.navajo.dsl.tsl.Tsl with org.eclipse.xtext.common.Terminals //with com.dexels.navajo.dsl.expression.NavajoExpression
grammar com.dexels.navajo.dsl.tsl.Tsl with com.dexels.navajo.dsl.expression.NavajoExpression

//import "platform:/resource/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
//import "http://www.dexels.com/navajo/dsl/expression/NavajoExpression" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.tsl.model/model/NavaScript.ecore" 

//com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
//generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"




Tml :
	'<navascript' {Tml} (attributes+=PossibleExpression)* 
	(
		('>' 
			((children+=Message) | (children+=Map))*
		'</navascript>'
		)
	|	(
		'/>'
		)
	);

terminal QUOTEQ: '"=';	

//
//terminal ATTSTRING	: 
//	  '"' '"' 
//	  |
//	  ('"' !('"') '"')
//	  |
//	  ('"' !('='|'"')  ( '\\' ('b'|'t'|'n'|'f'|'r'|"'"|'\\') | !('\\'|'"') )*  !(';'|'"') '"')
//	;	

terminal EMPTYSTRING:
		'""'
		;

terminal ATTRIBUTESTRING	: 
			(   '"' !('='|'"')* '"')
	;	



PossibleExpression:
	key=ID '='
	(
		 QUOTEQ expressionValue=TopLevel ';"'
		| value=ATTRIBUTESTRING
		| EMPTYSTRING
	)
	;


Message:
	'<message' {Message}  (attributes+=PossibleExpression)* 
	
	(('>'
		((children+=Message) | (children+=Property) | (children+=Map))*
	'</message>'
	)
	|
	'/>'
	)
	;


Map:
	MapStart
	( '/>'
	| ('>'
		((children+=Message) | (children+=Property) | (children+=Map))*
		'</map.' mapClosingName=ID '>'
	))
	;

MapStart returns Map:
	{Map} '<map.' mapName=ID (attributes+=PossibleExpression)*
;



// doesn't seem to work. All are optional
	
//Modifier: static?='static'? & final?='final'? & visibility=Visibility;

// ToDo Add ALL types!

// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.

//PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
//MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
//MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";

// The direction 'inout' has been deprecated, so I've left that one out.
//PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";

// '1' this makes 1 a keyword
//PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
	
	
Property:
	'<property' {Property} (attributes+=PossibleExpression)* 
	(
		('/>')
	|
		( '>' 	
			(expressionValue = ExpressionTag)?
		'</property>'
		)
	);

ExpressionTag returns ExpressionTag:
	'<expression>' expression=TopLevel '</expression>'
	;	
	