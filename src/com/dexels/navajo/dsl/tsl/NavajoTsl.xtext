//grammar com.dexels.navajo.dsl.tsl.Tsl with org.eclipse.xtext.common.Terminals //with com.dexels.navajo.dsl.expression.NavajoExpression
grammar com.dexels.navajo.dsl.tsl.Tsl with com.dexels.navajo.dsl.expression.NavajoExpression hidden(WS, ML_COMMENT, SL_COMMENT,XMLComment,XMLHead)

//import "platform:/resource/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
//import "http://www.dexels.com/navajo/dsl/expression/NavajoExpression" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore" as nexpr
import "platform:/resource/com.dexels.navajo.dsl.tsl.model/model/NavaScript.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
//generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"




Tml :
	NAVASCRIPT_START {Tml} (attributes+=PossibleExpression)* 
	(
		(XML_TAG_END 
			((children+=Message) | (children+=Map)| (children+=Param) | (methods += Methods) | (children+=DebugTag)| (children+=Include) | (children+=Validations) | (children+=Comment))*
		NAVASCRIPT_END
		)
	|	(
		XML_TAG_SINGLEEND
		)
	);

terminal XMLHead: '<?' -> '?>';
terminal XMLComment: '<!--' -> '-->';
terminal QUOTEQ: '"=';	
terminal SEMICOLONQUOTE: ';"';



terminal DEBUG_START_TAG:
	 '<debug';
terminal DEBUG_END_TAG:
	 '</debug' XML_TAG_END;


//terminal NAVASCRIPT_START:
//	'<navascript';


terminal EMPTYSTRING:
	'""'
;

terminal ATTRIBUTESTRING	: 
	('"' !('='|'"')* '"')
;	

terminal XML_START_ENDTAG:
	'</'
;
	
terminal XML_TAG_END: 
	'>'
;

terminal XML_TAG_SINGLEEND: 
	'/>'
;

terminal MAP_METHOD_STARTTAG_START: '<_';
terminal MAP_METHOD_ENDTAG_START: '</_';


//terminal XML_TAG_START: '<';


terminal MAPENDKEYWORD: 
	'</map'
;

terminal MAPSTARTKEYWORD: 
	'<map' 
;



terminal INCLUDE_START_TAG:
	 '<include'
;

terminal PROPERTY_START_TAG:
	 '<property'
;

terminal REQUIRED_START_TAG:
	 '<required'
;

terminal VALIDATIONS_START_TAG:
	 '<validations'
;
terminal CHECK_START_TAG:
	 '<check'
;
terminal COMMENT_START_TAG:
	 '<comment'
;

terminal BREAK_START_TAG:
	 '<break'
;


//
terminal OPTION_START_TAG:
	 '<option'
;



terminal BREAK_END_TAG: 
	 '</break' XML_TAG_END
;


terminal OPTION_END_TAG: 
	 '</option' XML_TAG_END
;


terminal REQUIRED_END_TAG: 
	 '</required' XML_TAG_END
;

terminal PROPERTY_END_TAG: 
	 '</property' XML_TAG_END
;

terminal COMMENT_END_TAG: 
	 '</comment' XML_TAG_END
;
terminal VALIDATIONS_END_TAG: 
	'</validations' XML_TAG_END
;
terminal CHECK_END_TAG: 
	'</check' XML_TAG_END
;


terminal PARAM_END_TAG: 
	'</param' XML_TAG_END
;

terminal MESSAGE_END_TAG: 
	'</message' XML_TAG_END
;

terminal METHODS_END_TAG: 
	 '</methods' XML_TAG_END
;
terminal METHOD_END_TAG: 
	 '</method' XML_TAG_END
;

terminal FIELD_END_TAG: 
	 '</field' XML_TAG_END
;

terminal EXPRESSION_START_TAG:
	 '<expression'
;

terminal EXPRESSION_END_TAG:
	 '</expression' XML_TAG_END
;
terminal PARAM_START_TAG:
	 '<param'
;

terminal MESSAGE_START_TAG:
	'<message'
;

terminal METHOD_START_TAG:
	 '<method'
;

terminal METHODS_START_TAG:
	 '<methods'
;

terminal FIELD_START_TAG:
	 '<field'
;
terminal NAVASCRIPT_START:
 //	XML_TAG_START NAVASCRIPT_KEYWORD;
	'<navascript' | '<tsl';

terminal  NAVASCRIPT_END:
 	//XML_START_ENDTAG NAVASCRIPT_KEYWORD XML_TAG_END;
	('</navascript' XML_TAG_END ) | ('</tsl' XML_TAG_END)
	;
	


// might need to add a lot more kywords here 'message' | 'comment' 
AttributeName:
	ID ;

PossibleExpression:
	(namespace= ID ':')? key=AttributeName '='
	(
		 QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE
		| value=ATTRIBUTESTRING
		| EMPTYSTRING
	)
	;

Methods :
	METHODS_START_TAG {Methods} 
	
	((XML_TAG_END
	(method+=Method)*
	METHODS_END_TAG)
	|
	XML_TAG_SINGLEEND)
	;
	
Method:
	METHOD_START_TAG {Method}  (attributes+=PossibleExpression)* 
	
	((XML_TAG_END
		(children+=Required)*
	METHOD_END_TAG
	)
	|
	XML_TAG_SINGLEEND
	)
	;	
	

Validations :
	VALIDATIONS_START_TAG {Validations} 
	
	((XML_TAG_END
	( children+=Check)*
	VALIDATIONS_END_TAG)
	|
	XML_TAG_SINGLEEND)
	;
	
Check:
	CHECK_START_TAG {Check}  (attributes+=PossibleExpression)* 
	
	((XML_TAG_END
		expression=TopLevel
	CHECK_END_TAG
	)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
	
Comment:
	COMMENT_START_TAG {Comment}  (attributes+=PossibleExpression)* 
	
	((XML_TAG_END
//		expression=TopLevel
	COMMENT_END_TAG
	)
	|
	XML_TAG_SINGLEEND
	)
	;	
	
Break:
	BREAK_START_TAG {Break}  (attributes+=PossibleExpression)* 
	 
	((XML_TAG_END
//		expression=TopLevel
	BREAK_END_TAG
	)
	|
	XML_TAG_SINGLEEND
	)
	;	

// create Include entity in Model
Include returns Method:
	INCLUDE_START_TAG {Method}  (attributes+=PossibleExpression)* 
	XML_TAG_SINGLEEND
	;	



Message:
	MESSAGE_START_TAG {Message}  (attributes+=PossibleExpression)* 
	
	((XML_TAG_END
		((children+=Message) | (children+=Property) | (children+=Param)  | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=Comment) | (children+=Break))*
	MESSAGE_END_TAG
	)
	|
	XML_TAG_SINGLEEND
	)
	;




Map returns Map:
	MAPSTARTKEYWORD {Map} (
		('.' mapName=MapId (attributes+=PossibleExpression)*)
	|	(attributes+=PossibleExpression)*
	) 
	(
			( XML_TAG_SINGLEEND
	| (XML_TAG_END
		((children+=Message) | (children+=Property) | (children+=Param) | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=Comment) | (children+=Break))*
		
		(MAPENDKEYWORD ('.' mapClosingName=MapId)? XML_TAG_END)
	))
	)
	;
	




MapId:
	ID;





// doesn't seem to work. All are optional
	
//Modifier: static?='static'? & final?='final'? & visibility=Visibility;

// ToDo Add ALL types!

// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.

//PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
//MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
//MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";

// The direction 'inout' has been deprecated, so I've left that one out.
//PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";

// '1' this makes 1 a keyword
//PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
	


Required: 
	REQUIRED_START_TAG {Required} (attributes+=PossibleExpression)*
	(
		(XML_TAG_SINGLEEND)
	|
		( XML_TAG_END 	
		REQUIRED_END_TAG
		)
	);
	

	
	
Property:
	PROPERTY_START_TAG {Property} (attributes+=PossibleExpression)* 
	(
		(XML_TAG_SINGLEEND)
	|
		( XML_TAG_END 	
			(
				children += ExpressionOrOption
				|
				children += Map
		 	)*
		PROPERTY_END_TAG
		)
	);

Param returns Param:
	PARAM_START_TAG {Param} (attributes+=PossibleExpression)* 
	(
		(XML_TAG_SINGLEEND)
	|
		( XML_TAG_END 	
			((children += ExpressionOrOption) | (children+=Map))*
		PARAM_END_TAG
		)
	);

MapMethod returns MapMethod:
	MAP_METHOD_STARTTAG_START  mapName = ID '.' methodName= AttributeName (attributes+=PossibleExpression)* 
	(
		(XML_TAG_SINGLEEND)
	|
		( XML_TAG_END 
			((children += ExpressionOrOption) | (children+=Message) | (children+=Property) | (children+=Param) | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=Comment) | (children+=Break))*
		MAP_METHOD_ENDTAG_START methodClosingName = ID '.' methodClosingMethod = ID XML_TAG_END
		)
	);
	
Field returns Param:
	FIELD_START_TAG {Param} (attributes+=PossibleExpression)*  XML_TAG_END
	(
	 XML_TAG_SINGLEEND
	 |
	 (
		((children += ExpressionOrOption) | (children+=Message) | (children+=Property) | (children+=Param) | (children+=Map) | (children+=MapMethod) | (children+=DebugTag) | (children+=Field) | (children+=Comment) | (children+=Break))*
	 )
	 FIELD_END_TAG
	)
;

DebugTag returns DebugTag:
	DEBUG_START_TAG {DebugTag} (attributes+=PossibleExpression)* 
	(
		(XML_TAG_SINGLEEND)
	|
		( XML_TAG_END 	
			expression=TopLevel
		DEBUG_END_TAG
		)
	)	
	;	

ExpressionOrOption returns Element:
		EXPRESSION_START_TAG ExpressionTag
		|
		OPTION_START_TAG Option
		
		
;


ExpressionTag returns ExpressionTag:
	
	{ExpressionTag} (attributes+=PossibleExpression)* 
	(
		XML_TAG_SINGLEEND
	|
		( XML_TAG_END 	
			expression=TopLevel
			
		    EXPRESSION_END_TAG
		)
	)	
	;	
	
Option: 
	 {Option} (attributes+=PossibleExpression)*
	(
		XML_TAG_SINGLEEND
	|
		( XML_TAG_END 	
		OPTION_END_TAG
		)
	);
	

	