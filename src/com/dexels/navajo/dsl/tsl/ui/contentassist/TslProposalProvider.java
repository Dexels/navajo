/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.tsl.ui.contentassist;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.dexels.navajo.document.Navajo;
import com.dexels.navajo.dsl.expression.ui.contentassist.AdapterProposal;
import com.dexels.navajo.dsl.expression.ui.contentassist.FunctionProposal;
import com.dexels.navajo.dsl.expression.ui.contentassist.InputTmlProposal;
import com.dexels.navajo.dsl.expression.ui.contentassist.NavajoExpressionProposalProvider;
import com.dexels.navajo.dsl.expression.ui.contentassist.impl.TestNavajoResourceFinder;
import com.dexels.navajo.dsl.model.tsl.Map;
import com.dexels.navajo.dsl.tsl.ui.contentassist.AbstractTslProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class TslProposalProvider extends AbstractTslProposalProvider {

	@Override
	public void complete_Message(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Message(model, ruleCall, context, acceptor);
		ICompletionProposal completionProposal = createCompletionProposal("<message name=\"<aap>\"/>", "Message simple", null, context);
		acceptor.accept(completionProposal);
	}

	@Override
	public void completeMap_MapName(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		List<AdapterProposal> list = getAdapterProposals();
		for (AdapterProposal adapterProposal : list) {
			ICompletionProposal completionProposal = createCompletionProposal(adapterProposal.getFullProposal(), adapterProposal.getTagName(), null, context);
			acceptor.accept(completionProposal);
		}
		super.completeMap_MapName(model, assignment, context, acceptor);
	}

	@Override
	public void completeMap_MapClosingName(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		System.err.println("MODEL: "+model.getClass());
		Map m = (Map)model;
		
		ICompletionProposal completionProposal = createCompletionProposal(m.getMapName()+">", m.getMapName(), null, context);
		acceptor.accept(completionProposal);
//		super.completeMap_MapClosingName(model, assignment, context, acceptor);
	}	
	
	public static void main(String[] args) throws Exception {

		NavajoExpressionProposalProvider npp = new NavajoExpressionProposalProvider(new TestNavajoResourceFinder());
		System.err.println("Parse test of: string,integer,string|empty,boolean|empty");
		System.err.println("Function count: " + npp.getFunctions().size());
		for (FunctionProposal f : npp.getFunctions()) {
			System.err.println("Function: " + f.getProposalDescription());
		}

		Navajo input = npp.getNavajoResourceFinder().getInputNavajo();
		List<InputTmlProposal> l =  npp.listPropertyPaths(npp.getNavajoResourceFinder().getInputNavajo());
		for (InputTmlProposal tmlProposal : l) {
			System.err.println("Proposal: "+tmlProposal.getProposal()+" ---- "+tmlProposal.getProposalDescription());
		}
		for (AdapterProposal f : npp.getAdapters()) {
			System.err.println("Adapter: " + f.getFullProposal());
		}
		
	}
	
	
}
