/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.tsl.ui.outline;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;

import com.dexels.navajo.dsl.model.tsl.Element;
import com.dexels.navajo.dsl.model.tsl.Message;
import com.dexels.navajo.dsl.model.tsl.Tml;

/**
 * customization of the default outline structure
 * 
 */
public class TslTransformer extends AbstractDeclarativeSemanticModelTransformer {

	@Override
	protected List<EObject> getChildNodes(EObject semanticNode) {
		if(semanticNode instanceof Tml) {
			
			Tml t = (Tml)semanticNode;
			List<EObject> result = new ArrayList<EObject>();
			EList<Element> child = t.getChildren();
			for (Element element : child) {
				if(element instanceof Message) {
					result.add(element);
				}
			}
			return result;
		}
		if(semanticNode instanceof Message) {
			Message t = (Message)semanticNode;
			List<EObject> result = new ArrayList<EObject>();
			EList<Element> child = t.getChildren();
			for (Element element : child) {
				if(element instanceof Message) {
					result.add(element);
				}
			}
			return result;
		}		
		return super.getChildNodes(semanticNode);

	}

	private String stripQuotes(String label) {
		if(label.startsWith("\"") && label.endsWith("\"")) {
			return label.substring(1, label.length()-1);
		}
		return label;
	}

	public ContentOutlineNode createNode(Tml semanticNode, ContentOutlineNode parentNode) {
		    ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
		    node.setLabel(stripQuotes(node.getLabel()));
		    return node;
		  }

	
	public ContentOutlineNode createNode(Message semanticNode, ContentOutlineNode parentNode) {
		    ContentOutlineNode node = super.newOutlineNode(semanticNode, parentNode);
		    node.setLabel(stripQuotes(node.getLabel()));
		    return node;
		  }
}
