/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.expression.ui.contentassist;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.PlatformUI;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.dexels.navajo.document.*;
import com.dexels.navajo.document.nanoimpl.XMLElement;
import com.dexels.navajo.document.nanoimpl.XMLParseException;
import com.dexels.navajo.dsl.expression.navajoExpression.Expression;
import com.dexels.navajo.dsl.expression.ui.contentassist.AbstractNavajoExpressionProposalProvider;
import com.dexels.navajo.dsl.expression.ui.contentassist.impl.NavajoResourceFinder;
import com.dexels.navajo.dsl.expression.ui.contentassist.impl.TestNavajoResourceFinder;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class NavajoExpressionProposalProvider extends AbstractNavajoExpressionProposalProvider {


	protected List<FunctionProposal> functions = new ArrayList<FunctionProposal>();
	protected List<AdapterProposal> adapters = new ArrayList<AdapterProposal>();
	protected List<InputTmlProposal> tmlProposal = new ArrayList<InputTmlProposal>();
	private INavajoResourceFinder navajoResourceFinder= null;
	
	
	public NavajoExpressionProposalProvider() {
		this(new NavajoResourceFinder());
	}	


	public NavajoExpressionProposalProvider(INavajoResourceFinder navajoResourceFinder) {
		setNavajoResourceFinder(navajoResourceFinder);
		try {
			initialize(navajoResourceFinder);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XMLParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public List<FunctionProposal> getFunctions() {
		return functions;
	}


	public List<AdapterProposal> getAdapters() {
		return adapters;
	}


	public List<InputTmlProposal> getTmlProposal() {
		return tmlProposal;
	}


	private void initialize(INavajoResourceFinder navajoResourceFinder)
			throws CoreException, IOException {
		//InputStream is = this.getClass().getClassLoader().getResource("com/dexels/navajo/dsl/ui/functions.xml").openStream();
		initializeFunctions(navajoResourceFinder);
		initializeAdapters(navajoResourceFinder);
		initializeInput(navajoResourceFinder);
	}


	private void initializeInput(INavajoResourceFinder navajoResourceFinder) {
		try {
			Navajo inputNavajo = navajoResourceFinder.getInputNavajo();
			if(inputNavajo==null) {
				return;
			}
			tmlProposal =  listPropertyPaths(inputNavajo);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void initializeAdapters(INavajoResourceFinder navajoResourceFinder)
			throws CoreException, IOException {
		XMLElement adaptersList = getNavajoResourceFinder().getAdapters();
		if(adaptersList==null) {
			return;
		}

		for (XMLElement x : adaptersList.getChildren()) {
			AdapterProposal fr = new AdapterProposal();
			fr.setTagName(x.getElementByTagName("tagname").getContent());
			XMLElement valueList = x.getElementByTagName("values");
			if(valueList!=null) {
				List<XMLElement> valueElements = valueList.getChildren();
				for (XMLElement value : valueElements) {
					AdapterValueEntry ave = new AdapterValueEntry();
					ave.load(value);
					fr.addValueEntry(ave);
				}
			}
			adapters.add(fr);
		}
		Collections.sort(adapters);
	}
	
	protected List<AdapterProposal> getAdapterProposals() {
		return adapters;
	}

	private void initializeFunctions(INavajoResourceFinder navajoResourceFinder)
			throws CoreException, IOException {
		XMLElement functionList = getNavajoResourceFinder().getFunctions();
		if(functionList==null) {
			return;
		}
		for (XMLElement x : functionList.getChildren()) {
			String input = x.getElementByTagName("input").getContent();
			List<List<String>> alternatives = parseAlternatives(input);
			for (List<String> inputList : alternatives) {
				FunctionProposal fr = new FunctionProposal();
				fr.setName(x.getStringAttribute("name"));
				fr.setDescription(x.getElementByTagName("description")
						.getContent());
				fr.setInput(inputList);
				fr.setResult(x.getElementByTagName("result").getContent());
				functions.add(fr);
			}
		}
		Collections.sort(functions);
	}

	
	public INavajoResourceFinder getNavajoResourceFinder() {
		return navajoResourceFinder;
	}

	public void setNavajoResourceFinder(INavajoResourceFinder navajoResourceFinder) {
		this.navajoResourceFinder = navajoResourceFinder;
	}
	
	public List<InputTmlProposal> listPropertyPaths(Navajo in) {
		List<InputTmlProposal> result = new ArrayList<InputTmlProposal>();
		List<Message> m;
		try {
			m = in.getAllMessages();
			for (Message message : m) {
				listPropertyPaths(message,result);
			}
		} catch (NavajoException e) {
			e.printStackTrace();
		}
		return result;
	}

	
	private void listPropertyPaths(Message m, List<InputTmlProposal> result) throws NavajoException {
		List<Property> pl = m.getAllProperties();
		for (Property property : pl) {
			InputTmlProposal fp = new InputTmlProposal();
			fp.setProperty(property);
			fp.setAbsolute(false);
			result.add(fp);
			InputTmlProposal fpabs = new InputTmlProposal();
			fpabs.setProperty(property);
			fpabs.setAbsolute(true);
			result.add(fpabs);
		}
		List<Message> ml = m.getAllMessages();
		for (Message message : ml) {
			if (message.getType().equals(Message.MSG_TYPE_ARRAY)) {
				if(message.getArraySize()>0) {
					listPropertyPaths(message.getMessage(0),result);
				}
			} else {
				listPropertyPaths(message,result);
			}
		}

		
	}

	private List<List<String>> parseAlternatives(String input) {
		List<String> base = new ArrayList<String>();
		List<List<String>> result = new ArrayList<List<String>>();
		String[] params = input.split(",");
		for (String string : params) {
			base.add(string);
		}
		result.add(base);
		while (true) {
			boolean found = false;
			for (List<String> alternative : result) {
				int index = 0;
				for (String element : alternative) {
					if (element.indexOf("|") != -1) {
						found = true;
						break;
					}
					index++;
				}
				if (found) {

					String currentExample = alternative.get(index);
					String[] alts = currentExample.split("\\|");
					for (String currentAlt : alts) {
						List<String> newAlt = new ArrayList<String>(alternative);
						newAlt.set(index , currentAlt);
						result.add(newAlt);
					}
					result.remove(alternative);
					break;
				}

			}
			if (!found) {
				break;
			}
		}
		for (List<String> propose : result) {
			stripTrailingEmpties(propose);
		}
		List<List<String>> invalid = new ArrayList<List<String>>();
		for (List<String> propose : result) {
			if (!isLegal(propose)) {
				invalid.add(propose);
			}
		}
		result.removeAll(invalid);
		return result;
	}

	private void stripTrailingEmpties(List<String> propose) {
		for (int i = propose.size()-1; i>=0; i--) {
			if(propose.get(i).equals("empty")) {
				propose.remove(i);
			}
		}
		
	}

	private List<FunctionProposal> findFunctionByName(String name) {
		List<FunctionProposal> result = new ArrayList<FunctionProposal>();
		for (FunctionProposal f :functions) {
			if(f.getName().equals(name)) {
				result.add(f);
			}
		}
		return result;
	}
	private boolean isLegal(List<String> propose) {
		int index=0;
		for (String r : propose) {
			if(r.equals("empty") && index!=propose.size()-1) {
				return false;
			}
			index++;
		}
		return true;
	}

	public static void main(String[] args) throws Exception {

		NavajoExpressionProposalProvider npp = new NavajoExpressionProposalProvider(new TestNavajoResourceFinder());
		System.err.println("Parse test of: string,integer,string|empty,boolean|empty");
		System.err.println("result: " + npp.parseAlternatives("string,integer,string|empty,boolean|empty"));
		System.err.println("Function count: " + npp.functions.size());
		for (FunctionProposal f : npp.functions) {
			System.err.println("Function: " + f.getProposalDescription());
		}

		Navajo input = npp.getNavajoResourceFinder().getInputNavajo();
		List<InputTmlProposal> l =  npp.listPropertyPaths(npp.getNavajoResourceFinder().getInputNavajo());
		for (InputTmlProposal tmlProposal : l) {
			System.err.println("Proposal: "+tmlProposal.getProposal()+" ---- "+tmlProposal.getProposalDescription());
		}
		for (AdapterProposal f : npp.adapters) {
			System.err.println("Adapter: " + f.getTagName());
		}
		
	}
	
	
	

	public void complete_FunctionCall(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
		super.complete_FunctionCall(model, ruleCall, context, acceptor);
		// compute the plain proposal
		for (FunctionProposal f : functions) {
			ICompletionProposal completionProposal = createCompletionProposal(f.getProposal(true), f.getProposalDescription(), null, context);
			acceptor.accept(completionProposal);
		}
		// convert it to a valid STRING-terminal
		// proposal = getValueConverter().toString(proposal, "ID");
		// create the completion proposal // the result may be null as the
		// createCompletionProposal(..) methods // check for valid prefixes //
		// and terminal token conflicts
	}

	@Override
	public void completeFunctionOperands_Operands(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeFunctionOperands_Operands(model, assignment, context, acceptor);
		System.err.println("CLASSSS: "+model.getClass());
		Expression e = (Expression) model;
		String functionName = e.getOp();
		List<FunctionProposal> fd = findFunctionByName(functionName);
		System.err.println("FD count: "+fd.size());
		for (FunctionProposal f : fd) {
			System.err.println("name: "+f.getName()+" op: "+f.getOperandProposal(true));
			ICompletionProposal completionProposal = createCompletionProposal(f.getOperandProposal(true), f.getProposalDescription(), null, context);
			acceptor.accept(completionProposal);
		}

	}
	
//	public void complete_PathSequence(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.complete_PathSequence(model, ruleCall, context, acceptor);
//		System.err.println("Paaaaaaa");
//		ICompletionProposal completionProposal = createCompletionProposal("/Club/ClubIdentifier", "[ClubCode] /Club/ClubIdentifier: BBFW63X", null, context);
//		acceptor.accept(completionProposal);
//		completionProposal = createCompletionProposal("/Club/ClubName", "[Club name] /Club/ClubName: De Schoof", null, context);
//		acceptor.accept(completionProposal);
//	}
//	
	public void complete_TmlExpression(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_TmlExpression(model, ruleCall, context, acceptor);
//		ICompletionProposal completionProposal = createCompletionProposal("[/Club/ClubIdentifier]", "[ClubCode] /Club/ClubIdentifier: BBFW63X", null, context);
//		acceptor.accept(completionProposal);
//		completionProposal = createCompletionProposal("[/Club/ClubName]", "[Club name] /Club/ClubName: De Schoof", null, context);
//		acceptor.accept(completionProposal);
		for (InputTmlProposal tt : tmlProposal) {
			ICompletionProposal completionProposal = createCompletionProposal(tt.getProposal(), tt.getProposalDescription(), null, context);
			acceptor.accept(completionProposal);
		}
//		System.err.println("Pooooooooo!");
	}

	public void complete_PathElement(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_PathElement(model, ruleCall, context, acceptor);
	}
	public void complete_ExistsTmlExpression(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
		super.complete_ExistsTmlExpression(model, ruleCall, context, acceptor);
		if(tmlProposal==null) {
			
		}
		//		ICompletionProposal completionProposal = createCompletionProposal("?[/Club/ClubIdentifier]", "[ClubCode] /Club/ClubIdentifier: BBFW63X", null, context);
//		acceptor.accept(completionProposal);
//		completionProposal = createCompletionProposal("?[/Club/ClubName]", "[Club name] /Club/ClubName: De Schoof", null, context);
//		acceptor.accept(completionProposal);
		for (InputTmlProposal tt : tmlProposal) {
			ICompletionProposal completionProposal = createCompletionProposal("?"+tt.getProposal(), "?"+tt.getProposalDescription(), null, context);
			acceptor.accept(completionProposal);
		}

//		System.err.println("Ezis");
//		ResourcesPlugin.get
	}
	
	
	 public  IProject getCurrentProject(){
		  IEditorPart editor = 
		  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
		  IEditorInput input =  editor.getEditorInput();
		  IFile file = null;
		  if(input instanceof IFileEditorInput){
		   file = ((IFileEditorInput)input).getFile();
		  }
		  if(file==null)
		   return null;

		    IProject project = file.getProject();
		  return project;

		 }

	
//	@Override
//	public void complete_FunctionName(EObject model, RuleCall ruleCall,
//			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		String proposal = "BROAOAOAOPO";
//
//		proposal = getValueConverter().toString(proposal, "ID");
//		System.err.println("Propposing");
//		ICompletionProposal completionProposal = createCompletionProposal(
//				proposal, context);
//		// register the proposal, the acceptor handles null-values gracefully
//		acceptor.accept(completionProposal);
//	}

}
