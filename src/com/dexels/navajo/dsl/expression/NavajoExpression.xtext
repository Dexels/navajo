grammar com.dexels.navajo.dsl.expression.NavajoExpression   hidden(WS, ML_COMMENT, SL_COMMENT)

//import "platform:/resource/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
import "platform:/resource/com.dexels.navajo.dsl.expression.model/model/Expression.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


//import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
//import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore

//import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
 

//generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
//terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

TopLevel returns TopLevel: 
//	 toplevelExpression =OrExpression
		toplevelExpression=OrExpression
 	;


 
//terminal INT returns ecore::EString: ('0'..'9')+;

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;
terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	



terminal LITERALSTRING returns ecore::EString: 
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	;
	

// skipped url, image, points, datepattern, password

	

//terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
 	
PathElement returns ecore::EString:
	(ID|"."|"..")
	;
	
	
TmlExpression returns TmlReference:
	'[' (absolute?='/')? elements+=PathElement ('/' elements+=PathElement)* ']'
;

ExistsTmlExpression returns ExistsTmlReference: 
	'?' '[' (absolute?='/')? elements+=PathElement ('/' elements+=PathElement)* ']'
;

MapGetReference returns MapGetReference: 
	operations+='$' elements+=PathElement ('/' elements+=PathElement)* 
;
   
OrExpression returns Expression:
    parameters+=AndExpression (operations+="OR" parameters+=AndExpression )*;
    
AndExpression returns Expression:
     parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression )*
     ;  

EqualityExpression returns Expression: 
     parameters+=AdditiveExpression ((operations+='==' parameters+=AdditiveExpression) | (operations+='!=' parameters+=AdditiveExpression))?
;     
  
// Skipped for now. Trouble with overloaded '<' stuff  
//RelationalExpression returns Expression: 
//   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
//    ;
AdditiveExpression returns Expression:
      parameters+=MultiplicativeExpression (('+' parameters+=MultiplicativeExpression ) | ('-' parameters+=MultiplicativeExpression))*
	;
	
MultiplicativeExpression returns Expression: 
      parameters+=UnaryExpression ((operations+='*' parameters+=UnaryExpression ) |  (operations+='/' parameters+=UnaryExpression ))*
	;
	
UnaryExpression returns Expression:
	operations+="!" parameters+=PrimaryExpression
	| PrimaryExpression;	

PrimaryExpression returns Expression:
   	parameters+=Literal
	| '(' parameters+=OrExpression ')'
;	


// Keep this one in place so it will create a node for the code completion
FunctionName:
	ID;


FunctionCall returns FunctionCall:
	name=FunctionName '('(parameters+=OrExpression)? (',' parameters+=OrExpression)*  ')'
;


//Expression returns Expression:
//	Literal | FunctionCall | FunctionOperands ;


Literal returns Expression:
  {Expression}INT
  | valueString= LITERALSTRING
  | operations+='FORALL' '(' valueString=LITERALSTRING ',' parameters+=OrExpression ')'
  // TODO Add float
  | FunctionCall
//  | {Expression} elements+=ExistsTmlExpression 
//  | {Expression} elements+=TmlExpression 
  | expressionType='{' (parameters+=OrExpression)?  (',' parameters+=OrExpression)* '}'
  | elements+="NULL" 
  | elements+="TODAY" 
  | elements+="TRUE" 
  | elements+="FALSE"
  | parameters+=TmlExpression
  | parameters+=ExistsTmlExpression
  | parameters+=MapGetReference
  ;

