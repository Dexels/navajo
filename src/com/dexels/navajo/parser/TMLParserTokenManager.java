/* Generated By:JJTree&JavaCC: Do not edit this line. TMLParserTokenManager.java */
package com.dexels.navajo.parser;
import com.dexels.navajo.document.*;
import com.dexels.navajo.mapping.*;
import com.dexels.navajo.tipi.*;

public class TMLParserTokenManager implements TMLParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
            return 112;
         if ((active0 & 0x4000000000000L) != 0L)
            return 113;
         if ((active0 & 0x200000L) != 0L)
            return 114;
         if ((active0 & 0x807c60L) != 0L)
         {
            jjmatchedKind = 36;
            return 114;
         }
         return -1;
      case 1:
         if ((active0 & 0x40L) != 0L)
            return 115;
         if ((active0 & 0x807c20L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 115;
         }
         return -1;
      case 2:
         if ((active0 & 0x20L) != 0L)
            return 116;
         if ((active0 & 0x807c00L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 116;
         }
         return -1;
      case 3:
         if ((active0 & 0x802400L) != 0L)
            return 116;
         if ((active0 & 0x5800L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 116;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 35:
         return jjStopAtPos(0, 44);
      case 36:
         return jjStopAtPos(0, 47);
      case 37:
         return jjStopAtPos(0, 22);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStopAtPos(0, 19);
      case 43:
         return jjStopAtPos(0, 18);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         return jjStopAtPos(0, 20);
      case 46:
         return jjStartNfaWithStates_0(0, 50, 113);
      case 47:
         return jjStartNfaWithStates_0(0, 21, 114);
      case 58:
         return jjStopAtPos(0, 48);
      case 60:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 62:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 93:
         return jjStopAtPos(0, 49);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x802000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 123:
         return jjStartNfaWithStates_0(0, 15, 112);
      case 125:
         return jjStopAtPos(0, 16);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 82:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 115);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x6800L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 116);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x804800L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 116);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 116);
         break;
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 116);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 89:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 116);
         break;
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 116);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 116);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 112;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(68, 63);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 46)
                     jjCheckNAddTwoStates(63, 65);
                  if (curChar == 46)
                     jjCheckNAddTwoStates(63, 65);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  break;
               case 112:
                  if ((0xffffff7f00000400L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  if (curChar == 46)
                     jjCheckNAdd(105);
                  else if (curChar == 47)
                     jjCheckNAddStates(19, 23);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(24, 26);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(27, 31);
                  else if (curChar == 46)
                     jjCheckNAdd(72);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(32, 34);
                  }
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAdd(13);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(68, 63);
                  else if (curChar == 47)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 46)
                     jjCheckNAddTwoStates(63, 65);
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar != 47)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(35, 39);
                  break;
               case 16:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x83ff230000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(35, 39);
                  break;
               case 19:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar != 42)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(35, 39);
                  break;
               case 22:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 24:
                  if (curChar == 47)
                     jjCheckNAddStates(42, 45);
                  break;
               case 25:
                  if (curChar != 47)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(46, 50);
                  break;
               case 26:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x83ff230000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(46, 50);
                  break;
               case 29:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 42)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(46, 50);
                  break;
               case 32:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 34:
                  if (curChar != 47)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(53, 61);
                  break;
               case 36:
                  if (curChar == 47)
                     jjCheckNAddStates(62, 65);
                  break;
               case 37:
                  if (curChar != 47)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(66, 70);
                  break;
               case 38:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x83ff230000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(66, 70);
                  break;
               case 41:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 42)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(66, 70);
                  break;
               case 44:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 46:
                  if (curChar == 47)
                     jjCheckNAddStates(73, 76);
                  break;
               case 47:
                  if (curChar != 47)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(77, 81);
                  break;
               case 48:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x83ff230000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(77, 81);
                  break;
               case 51:
                  if ((0x3ff400000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar != 42)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(77, 81);
                  break;
               case 54:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjAddStates(82, 83);
                  break;
               case 56:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 57:
               case 71:
                  if (curChar != 47)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(32, 34);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(12, 14);
                  break;
               case 59:
               case 62:
               case 64:
                  if (curChar != 47)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(63, 65);
                  break;
               case 63:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(68, 63);
                  break;
               case 67:
                  if (curChar != 47)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(12, 14);
                  break;
               case 68:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar != 47)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(6, 11);
                  break;
               case 70:
                  if (curChar == 46)
                     jjCheckNAddStates(3, 5);
                  break;
               case 72:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 74:
               case 79:
                  if (curChar == 39)
                     jjCheckNAddStates(27, 31);
                  break;
               case 75:
               case 78:
               case 85:
                  if (curChar == 47)
                     jjCheckNAddStates(84, 89);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(84, 89);
                  break;
               case 77:
                  if ((0xffffff7f00000600L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 80:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 46)
                     jjCheckNAdd(80);
                  break;
               case 83:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 84:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(80, 86);
                  break;
               case 86:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
               case 91:
               case 95:
                  if (curChar == 47)
                     jjCheckNAddStates(90, 94);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(90, 94);
                  break;
               case 90:
                  if ((0xffffff9b00000000L & l) != 0L)
                     jjCheckNAddStates(95, 98);
                  break;
               case 93:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(94, 96);
                  break;
               case 94:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 96:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 46)
                     jjCheckNAdd(94);
                  break;
               case 99:
               case 102:
               case 106:
                  if (curChar == 47)
                     jjCheckNAddStates(19, 23);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 101:
                  if ((0xffffff7f00000400L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 104:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(105, 107);
                  break;
               case 105:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 107:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 46)
                     jjCheckNAdd(105);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(24, 26);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(110);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 116:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  if ((0xf8000001L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(32, 34);
                  }
                  else if (curChar == 123)
                     jjCheckNAddStates(99, 101);
                  else if (curChar == 96)
                     jjCheckNAddStates(95, 98);
                  else if (curChar == 91)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(102, 106);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 115:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(6, 11);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 0:
                  if (curChar == 76 && kind > 24)
                     kind = 24;
                  break;
               case 1:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 83 && kind > 24)
                     kind = 24;
                  break;
               case 7:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if (curChar != 91)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(102, 106);
                  break;
               case 18:
                  if ((0x7fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(35, 39);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 91)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar != 93)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(35, 39);
                  break;
               case 28:
                  if ((0x7fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(46, 50);
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if (curChar == 91)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar != 93)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(46, 50);
                  break;
               case 35:
                  if (curChar == 91)
                     jjCheckNAddStates(107, 111);
                  break;
               case 40:
                  if ((0x7fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(66, 70);
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if (curChar == 91)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 93)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(66, 70);
                  break;
               case 50:
                  if ((0x7fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(77, 81);
                  break;
               case 51:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if (curChar == 91)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar != 93)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(77, 81);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(32, 34);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(12, 14);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(6, 11);
                  break;
               case 75:
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(84, 89);
                  break;
               case 77:
                  if ((0x38000000f8000001L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 82:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 87:
                  if (curChar == 96)
                     jjCheckNAddStates(95, 98);
                  break;
               case 88:
               case 89:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(90, 94);
                  break;
               case 90:
                  if ((0xa8000001L & l) != 0L)
                     jjCheckNAddStates(95, 98);
                  break;
               case 92:
                  if (curChar == 96 && kind > 38)
                     kind = 38;
                  break;
               case 98:
                  if (curChar == 123)
                     jjCheckNAddStates(99, 101);
                  break;
               case 99:
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 101:
                  if ((0xf8000001L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 103:
                  if (curChar == 125 && kind > 39)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 112 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   59, 60, 61, 72, 68, 63, 58, 59, 60, 61, 69, 70, 58, 59, 66, 99, 
   108, 101, 103, 99, 100, 101, 103, 104, 110, 111, 12, 75, 81, 77, 82, 83, 
   58, 69, 70, 17, 18, 19, 21, 24, 22, 23, 27, 28, 29, 31, 24, 27, 
   28, 29, 31, 32, 33, 17, 18, 19, 21, 24, 27, 28, 29, 31, 39, 40, 
   41, 43, 39, 40, 41, 43, 46, 44, 45, 49, 50, 51, 53, 46, 49, 50, 
   51, 53, 54, 55, 75, 76, 77, 82, 83, 84, 88, 89, 90, 92, 93, 88, 
   97, 90, 92, 99, 108, 101, 17, 18, 19, 21, 34, 36, 39, 40, 41, 43, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\101\116\104", "\117\122", "\41", "\75\75", 
"\41\75", "\164\162\165\145", "\146\141\154\163\145", "\124\117\104\101\131", 
"\156\141\155\145", "\166\141\154\165\145", "\173", "\175", "\54", "\53", "\52", "\55", "\57", 
"\45", "\156\165\154\154", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\74", "\76", "\74\75", "\76\75", "\43", "\50", 
"\51", "\44", "\72", "\135", "\56", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fff01fffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[112];
private final int[] jjstateSet = new int[224];
protected char curChar;
public TMLParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TMLParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 112; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
