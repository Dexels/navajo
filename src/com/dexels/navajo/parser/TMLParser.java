/* Generated By:JJTree&JavaCC: Do not edit this line. TMLParser.java */
package com.dexels.navajo.parser;
import com.dexels.navajo.document.*;
import com.dexels.navajo.mapping.*;

public class TMLParser/*@bgen(jjtree)*/implements TMLParserTreeConstants, TMLParserConstants {/*@bgen(jjtree)*/
  protected JJTTMLParserState jjtree = new JJTTMLParserState();
  protected Navajo inputDoc;
  protected Object mapObject;
  protected Message parentMsg;
  protected Selection parentSel;

  public void setNavajoDocument(Navajo doc) {
    this.inputDoc = doc;
  }

  public void setMappableObject(Object o) {
    this.mapObject = o;
  }

  public void setParentMsg(Message m) {
    this.parentMsg = m;
  }

  public void setParentSel(Selection s) {
    this.parentSel = s;
  }

  final public void ListExpression() throws ParseException {
     ASTListNode jjtn001 = new ASTListNode(JJTLISTNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(BEGIN_LIST);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case TODAY:
      case BEGIN_LIST:
      case MIN:
      case NULL:
      case SARTRE:
      case INTEGER_LITERAL:
      case DATE_PATTERN:
      case FLOAT_LITERAL:
      case TML_IDENTIFIER:
      case EXISTS_TML_IDENTIFIER:
      case NORMAL_IDENTIFIER:
      case STRING_LITERAL:
      case 45:
      case 47:
        Expression();
                                  jjtn001.args++;
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST_SEPARATOR:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(LIST_SEPARATOR);
          Expression();
                                                                                   jjtn001.args++;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(END_LIST);
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void Expression() throws ParseException {
    OrExpression();
  }

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
           ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        AndExpression();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
            ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        EqualityExpression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOT_EQUALS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
               ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
        try {
          RelationalExpression();
        } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
        }
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
                  ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          RelationalExpression();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
      case 42:
      case 43:
      case 44:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
          ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          AdditiveExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case 42:
        jj_consume_token(42);
          ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          AdditiveExpression();
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case 43:
        jj_consume_token(43);
           ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
        try {
          AdditiveExpression();
        } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte003;}
           }
           if (jjte003 instanceof ParseException) {
             {if (true) throw (ParseException)jjte003;}
           }
           {if (true) throw (Error)jjte003;}
        } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
        }
        break;
      case 44:
        jj_consume_token(44);
           ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
        try {
          AdditiveExpression();
        } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte004;}
           }
           if (jjte004 instanceof ParseException) {
             {if (true) throw (ParseException)jjte004;}
           }
           {if (true) throw (Error)jjte004;}
        } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
  String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case TODAY:
    case BEGIN_LIST:
    case NULL:
    case SARTRE:
    case INTEGER_LITERAL:
    case DATE_PATTERN:
    case FLOAT_LITERAL:
    case TML_IDENTIFIER:
    case EXISTS_TML_IDENTIFIER:
    case NORMAL_IDENTIFIER:
    case STRING_LITERAL:
    case 47:
      Literal();
      break;
    case 45:
      jj_consume_token(45);
      Expression();
      jj_consume_token(46);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case MIN:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
            ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
        } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
        }
        break;
      case MIN:
        jj_consume_token(MIN);
            ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
        try {
          MultiplicativeExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
             ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
          UnaryExpression();
        } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
        }
        break;
      case DIV:
        jj_consume_token(DIV);
             ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
        try {
          UnaryExpression();
        } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
        } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
        }
        break;
      case MOD:
        jj_consume_token(MOD);
             ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
        try {
          UnaryExpression();
        } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte003;}
             }
             if (jjte003 instanceof ParseException) {
               {if (true) throw (ParseException)jjte003;}
             }
             {if (true) throw (Error)jjte003;}
        } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
             }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      jj_consume_token(MIN);
          ASTNegativeNode jjtn001 = new ASTNegativeNode(JJTNEGATIVENODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpression();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
      }
      break;
    case NOT:
      jj_consume_token(NOT);
          ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        UnaryExpression();
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  1);
          }
      }
      break;
    case TRUE:
    case FALSE:
    case TODAY:
    case BEGIN_LIST:
    case NULL:
    case SARTRE:
    case INTEGER_LITERAL:
    case DATE_PATTERN:
    case FLOAT_LITERAL:
    case TML_IDENTIFIER:
    case EXISTS_TML_IDENTIFIER:
    case NORMAL_IDENTIFIER:
    case STRING_LITERAL:
    case 45:
    case 47:
      PrimaryExpression();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SARTRE:
      ForAllLiteral();
      break;
    case BEGIN_LIST:
      ListExpression();
      break;
    case FLOAT_LITERAL:
      FloatLiteral();
      break;
    case INTEGER_LITERAL:
      IntegerLiteral();
      break;
    case NULL:
                                                                             ASTNullNode jjtn001 = new ASTNullNode(JJTNULLNODE);
                                                                             boolean jjtc001 = true;
                                                                             jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NULL);
      } finally {
                                                                             if (jjtc001) {
                                                                               jjtree.closeNodeScope(jjtn001, true);
                                                                             }
      }
      break;
    case TODAY:
                                                                                                ASTTodayNode jjtn002 = new ASTTodayNode(JJTTODAYNODE);
                                                                                                boolean jjtc002 = true;
                                                                                                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(TODAY);
      } finally {
                                                                                                if (jjtc002) {
                                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                                }
      }
      break;
    case TRUE:
                                                                                                                     ASTTrueNode jjtn003 = new ASTTrueNode(JJTTRUENODE);
                                                                                                                     boolean jjtc003 = true;
                                                                                                                     jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(TRUE);
      } finally {
                                                                                                                     if (jjtc003) {
                                                                                                                       jjtree.closeNodeScope(jjtn003, true);
                                                                                                                     }
      }
      break;
    case FALSE:
                                                                                                                                        ASTFalseNode jjtn004 = new ASTFalseNode(JJTFALSENODE);
                                                                                                                                        boolean jjtc004 = true;
                                                                                                                                        jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(FALSE);
      } finally {
                                                                                                                                        if (jjtc004) {
                                                                                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                                                                                        }
      }
      break;
    case NORMAL_IDENTIFIER:
      FunctionLiteral();
      break;
    case STRING_LITERAL:
      StringLiteral();
      break;
    case EXISTS_TML_IDENTIFIER:
      ExistsTmlLiteral();
      break;
    case TML_IDENTIFIER:
      TmlLiteral();
      break;
    case 47:
      jj_consume_token(47);
      MappableLiteral();
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_1(2147483647)) {
        DatePatternLiteral();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void DatePatternLiteral() throws ParseException {
 Token t;
    ASTDatePatternNode jjtn001 = new ASTDatePatternNode(JJTDATEPATTERNNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(DATE_PATTERN);
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                       jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void ForAllLiteral() throws ParseException {
 Token t;
    ASTForAllNode jjtn001 = new ASTForAllNode(JJTFORALLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(SARTRE);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case TODAY:
      case BEGIN_LIST:
      case MIN:
      case NULL:
      case SARTRE:
      case INTEGER_LITERAL:
      case DATE_PATTERN:
      case FLOAT_LITERAL:
      case TML_IDENTIFIER:
      case EXISTS_TML_IDENTIFIER:
      case NORMAL_IDENTIFIER:
      case STRING_LITERAL:
      case 45:
      case 47:
        Expression();
        jj_consume_token(LIST_SEPARATOR);
        ExpressionLiteral();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(46);
                                                                   jjtree.closeNodeScope(jjtn001, true);
                                                                   jjtc001 = false;
                                                                  jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg;jjtn001.mapObject = mapObject;jjtn001.functionName = t.image;
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionLiteral() throws ParseException {
 Token t;
    ASTFunctionNode jjtn001 = new ASTFunctionNode(JJTFUNCTIONNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(NORMAL_IDENTIFIER);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case TRUE:
      case FALSE:
      case TODAY:
      case BEGIN_LIST:
      case MIN:
      case NULL:
      case SARTRE:
      case INTEGER_LITERAL:
      case DATE_PATTERN:
      case FLOAT_LITERAL:
      case TML_IDENTIFIER:
      case EXISTS_TML_IDENTIFIER:
      case NORMAL_IDENTIFIER:
      case STRING_LITERAL:
      case 45:
      case 47:
        Expression();
                         jjtn001.args++;
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST_SEPARATOR:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_8;
          }
          jj_consume_token(LIST_SEPARATOR);
          Expression();
                                                             jjtn001.args++;
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(46);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
     jjtn001.functionName = t.image;
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FloatLiteral() throws ParseException {
 Token t;
   ASTFloatConstantNode jjtn001 = new ASTFloatConstantNode(JJTFLOATCONSTANTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(FLOAT_LITERAL);
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
     jjtn001.val = Double.parseDouble(t.image);
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void IntegerLiteral() throws ParseException {
 Token t;
   ASTIntegerConstantNode jjtn001 = new ASTIntegerConstantNode(JJTINTEGERCONSTANTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(INTEGER_LITERAL);
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
     jjtn001.val = Integer.parseInt(t.image);
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
    }
  }

  final public void StringLiteral() throws ParseException {
 Token t;
    ASTStringConstantNode jjtn001 = new ASTStringConstantNode(JJTSTRINGCONSTANTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void ExpressionLiteral() throws ParseException {
 Token t;
    ASTExpresionLiteralNode jjtn001 = new ASTExpresionLiteralNode(JJTEXPRESIONLITERALNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(EXPRESSION_LITERAL);
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.val = t.image;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void ExistsTmlLiteral() throws ParseException {
 Token t;
    ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(EXISTS_TML_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME_OPTION:
          jj_consume_token(NAME_OPTION);
                                                    jjtn001.selectionOption = "name";
          break;
        case VALUE_OPTION:
          jj_consume_token(VALUE_OPTION);
                                                                                                         jjtn001.selectionOption = "value";
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        jj_consume_token(NORMAL_IDENTIFIER);
                                                                                                                                                                               jjtn001.option = token.image;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.exists = true; jjtn001.val = t.image; jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg; jjtn001.parentSel = parentSel;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void TmlLiteral() throws ParseException {
 Token t;
    ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(TML_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME_OPTION:
          jj_consume_token(NAME_OPTION);
                                              jjtn001.selectionOption = "name";
          break;
        case VALUE_OPTION:
          jj_consume_token(VALUE_OPTION);
                                                                                                     jjtn001.selectionOption = "value";
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(49);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        jj_consume_token(NORMAL_IDENTIFIER);
                                                                                                                                                                            jjtn001.option = token.image;
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.exists = false; jjtn001.val = t.image; jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg; jjtn001.parentSel = parentSel;
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void MappableLiteral() throws ParseException {
 Token t;
    ASTMappableNode jjtn001 = new ASTMappableNode(JJTMAPPABLENODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      t = jj_consume_token(NORMAL_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case TRUE:
        case FALSE:
        case TODAY:
        case BEGIN_LIST:
        case MIN:
        case NULL:
        case SARTRE:
        case INTEGER_LITERAL:
        case DATE_PATTERN:
        case FLOAT_LITERAL:
        case TML_IDENTIFIER:
        case EXISTS_TML_IDENTIFIER:
        case NORMAL_IDENTIFIER:
        case STRING_LITERAL:
        case 45:
        case 47:
          Expression();
                     jjtn001.args++;
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIST_SEPARATOR:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_9;
            }
            jj_consume_token(LIST_SEPARATOR);
            Expression();
                                                         jjtn001.args++;
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(46);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
  jjtree.closeNodeScope(jjtn001, true);
  jjtc001 = false;
 jjtn001.val = t.image; jjtn001.mapObject = mapObject;
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DATE_PATTERN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public TMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  final private int[] jj_la1_0 = {0x40000,0x7f213900,0x80,0x40,0x600,0x600,0x0,0x0,0x7f013800,0x280000,0x280000,0xd00000,0xd00000,0x7f213900,0x77013800,0x7f213900,0x40000,0x7f213900,0xc000,0x0,0x0,0xc000,0x0,0x0,0x40000,0x7f213900,0x0,};
  final private int[] jj_la1_1 = {0x0,0xa0c0,0x0,0x0,0x0,0x0,0x1e00,0x1e00,0xa0c0,0x0,0x0,0x0,0x0,0xa0c0,0x80c0,0xa0c0,0x0,0xa0c0,0x0,0x10000,0x40000,0x0,0x10000,0x40000,0x0,0xa0c0,0x2000,};
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public TMLParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TMLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TMLParser(TMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[51];
    for (int i = 0; i < 51; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
