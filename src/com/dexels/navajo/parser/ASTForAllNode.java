/* Generated By:JJTree: Do not edit this line. ASTForAllNode.java */

package com.dexels.navajo.parser;


import java.util.*;
import com.dexels.navajo.document.*;
import com.dexels.navajo.parser.*;
import com.dexels.navajo.mapping.MappableTreeNode;
import com.dexels.navajo.util.*;


public class ASTForAllNode extends SimpleNode {

    String functionName;
    Navajo doc;
    Message parentMsg;
    MappableTreeNode mapObject;

    public ASTForAllNode(int id) {
        super(id);
    }

    private static final String searchAndReplace(String text, String tag, String replace) {

        StringBuffer result;
        String before = "", last = "";
        int start, end;

        result = new StringBuffer();

        start = 0;
        end = -1;

        start = text.indexOf(tag, end);

        if (start == -1)
            return text;

        while (start != -1) {

            before = text.substring(end + 1, start);
            end = text.indexOf("]", start);

            result.append(before);
            result.append(replace);

            start = text.indexOf(tag, end);
            if (start == -1)
                last = text.substring(end + 1, text.length());
            result.append(last);
        }

        return result.toString();

    }

    /**
     * FORALL(<EXPRESSION>, `[$x] <EXPRESSION>`)
     * E.G. FORALL([/ClubMembership/ClubMemberships/ClubIdentifier], `CheckRelatieCode([$x])`)
     * @return
     * @throws TMLExpressionException
     */
    public final Object interpret() throws TMLExpressionException {

        boolean matchAll = true;

        if (functionName.equals("FORALL"))
            matchAll = true;
        else
            matchAll = false;


        Object a = (Object) jjtGetChild(0).interpret();

        String msgList = (String) a;

        Object b = (Object) jjtGetChild(1).interpret();

        try {
                ArrayList list = null;

                if (parentMsg == null)
                  list = doc.getMessages(msgList);
                else
                  list = parentMsg.getMessages(msgList);

                for (int i = 0; i < list.size(); i++) {
                    Object o = list.get(i);

                    String value = "";

                    parentMsg = (Message) o;

                    String expr = (String) b;

                    boolean result = Condition.evaluate(expr, doc, mapObject, parentMsg);

                    if ((result == false) && matchAll)
                        return new Boolean(false);
                    if ((result == true) && !matchAll)
                        return new Boolean(true);
                }

        } catch (com.dexels.navajo.server.SystemException se) {
            se.printStackTrace();
            throw new TMLExpressionException("Invalid expression in FORALL construct: \n" + se.getMessage());
        } catch (NavajoException ne) {
            ne.printStackTrace();
            throw new TMLExpressionException("Invalid expression in FORALL construct: \n" + ne.getMessage());
        }

        if (matchAll)
            return new Boolean(true);
        else
            return new Boolean(false);
    }
}
