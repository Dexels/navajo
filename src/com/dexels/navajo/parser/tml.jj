/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. tml.jj */
/*@egen*//*
 * Navajo Expression Language
 * Copyright(c) 2001 Dexels BV
 * $Id$
 *
 */

options {               
   LOOKAHEAD=1;
   STATIC=false;                                            
}

PARSER_BEGIN(TMLParser)
package com.dexels.navajo.parser;
import com.dexels.navajo.document.*;
import com.dexels.navajo.mapping.*;
import com.dexels.navajo.tipi.*;

public class TMLParser/*@bgen(jjtree)*/implements TMLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTMLParserState jjtree = new JJTTMLParserState();

/*@egen*/

  protected Navajo inputDoc;
  protected MappableTreeNode mapObject;
  protected Message parentMsg;
  protected Selection parentSel;
  protected TipiLink tipiLink;

  public void setNavajoDocument(Navajo doc) {
    this.inputDoc = doc;
  }

  public void setMappableObject(MappableTreeNode o) {
    this.mapObject = o;
  }

  public void setParentMsg(Message m) {
    this.parentMsg = m;
  }

  public void setParentSel(Selection s) {
    this.parentSel = s;
  }

  public void setTipiLink(TipiLink tl) {
    this.tipiLink = tl;
  }

}

PARSER_END(TMLParser)

SKIP:
{
 " " | "\t" | "\r" | "\f"
}

TOKEN:
{
  <AND: "AND"> |
  <OR: "OR"> |
  <NOT: "!"> |
  <EQUALS: "=="> |
  <NOT_EQUALS: "!="> |
  <TRUE: "true"> |
  <FALSE: "false"> |
  <TODAY: "TODAY"> |
  <NAME_OPTION: "name"> |
  <VALUE_OPTION: "value"> |
  <BEGIN_LIST: "{"> |
  <END_LIST: "}"> |
  <LIST_SEPARATOR: ","> |
  <ADD: "+"> |
  <MUL: "*"> |
  <MIN: "-"> |
  <DIV: "/"> |
  <MOD: "%"> |
  <NULL: "null">
}

TOKEN:
{
  <SARTRE: ("FORALL" | "EXISTS")>
}

TOKEN:
{
  <INTEGER_LITERAL: (<DIGIT>)+ >
}

TOKEN:
{
  <FLOAT_LITERAL: (<DIGIT>)*"."(<DIGIT>)+ >
}

TOKEN:
{
  <TML_IDENTIFIER: "["("/")?(<REGULAREXPRESSION>)?("/"<REGULAREXPRESSION>)* > |
  <EXISTS_TML_IDENTIFIER: "?["("/")?<REGULAREXPRESSION>("/"<REGULAREXPRESSION>)* > |
  <#REGULAREXPRESSION: (<PARENT_MSG>|<LETTER>|<DIGIT>|"@"|"_"|"("|")"|<REGULAR2>|"\\"|"?"|"-"|<REGULAR1>)+ > |
  <#PARENT_MSG: "../"> |
  <#REGULAR1: "["(<LETTER>|<DIGIT>|"-")+"]"> |
  <#REGULAR2: ("."|<LETTER>|<DIGIT>)+"*"> |
  <#IDENTIFIER: (<LETTER>|"_"|"../"|"/")+(<LETTER>|<DIGIT>|"_"|"../")* > |
  <#LETTER: [ "a" - "z", "A" - "Z" ] > |
  <#DIGIT: ["0"-"9"] >
}

TOKEN:
{
  <NORMAL_IDENTIFIER: <IDENTIFIER>(<IDENTIFIER>)* > |
  <STRING_LITERAL: "'"(<IDENTIFIER>|" "|"\n"|":"|";"|"-"|"_"|"?"|"*"|"("|")"|"="|"+"|"/"|"!"|"<"|">"|","|"."|"["|"]"|"@"|"#"|"$"|"%"|"^"|"&"|"{"|"}"|"\""|"\""|"/"|"\\"|<DIGIT>)*"'" > |
  <EXPRESSION_LITERAL: "`"(<IDENTIFIER>|"("|")"|"$"|"'"|"'"|"+"|"!"|"?"|"*"|"<"|">"|","|"="|"/"|"["|"]"|" "|":"|";"|"-"|"@"|"#"|"_"|<DIGIT>)*"`" > |
  <TIPI_IDENTIFIER: "{"(<IDENTIFIER>|" "|"\n"|":"|";"|"-"|"_"|"?"|"*"|"("|")"|"="|"+"|"/"|"!"|"<"|">"|","|"."|"["|"]"|"@"|"#"|"$"|"%"|"^"|"&"|"\""|"\""|"/"|"\\"|<DIGIT>)+"}" >
}


void ListExpression()      :
{}
{/*@bgen(jjtree) ListNode */
   {
     ASTListNode jjtn001 = new ASTListNode(JJTLISTNODE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   (
     <BEGIN_LIST> [ Expression() {jjtn001.args++;} (<LIST_SEPARATOR> Expression() {jjtn001.args++;}) * ] <END_LIST>
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void Expression()      :
{
}
{
  /*AdditiveExpression()*/
  OrExpression()
}

void OrExpression()      :
{}
{
  AndExpression()
  ( <OR>/*@bgen(jjtree) #OrNode( 2) */
         {
           ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ AndExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/ )*
}

void AndExpression()      :
{}
{
  EqualityExpression()
  ( <AND>/*@bgen(jjtree) #AndNode( 2) */
          {
            ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/ )*
}

void EqualityExpression()      :
{}
{
  RelationalExpression()
  ( <EQUALS>/*@bgen(jjtree) #EQNode( 2) */
             {
               ASTEQNode jjtn001 = new ASTEQNode(JJTEQNODE);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/ |
   <NOT_EQUALS>/*@bgen(jjtree) #NENode( 2) */
                {
                  ASTNENode jjtn002 = new ASTNENode(JJTNENODE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/
  )*
}

void RelationalExpression()      :
{}
{
  AdditiveExpression()
  (
    "<"/*@bgen(jjtree) #LTNode( 2) */
        {
          ASTLTNode jjtn001 = new ASTLTNode(JJTLTNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
/*@egen*/ |
    ">"/*@bgen(jjtree) #GTNode( 2) */
        {
          ASTGTNode jjtn002 = new ASTGTNode(JJTGTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
/*@egen*/ |
    "<="/*@bgen(jjtree) #LENode( 2) */
         {
           ASTLENode jjtn003 = new ASTLENode(JJTLENODE);
           boolean jjtc003 = true;
           jjtree.openNodeScope(jjtn003);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte003) {
           if (jjtc003) {
             jjtree.clearNodeScope(jjtn003);
             jjtc003 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte003 instanceof RuntimeException) {
             throw (RuntimeException)jjte003;
           }
           if (jjte003 instanceof ParseException) {
             throw (ParseException)jjte003;
           }
           throw (Error)jjte003;
         } finally {
           if (jjtc003) {
             jjtree.closeNodeScope(jjtn003,  2);
           }
         }
/*@egen*/ |
    ">="/*@bgen(jjtree) #GENode( 2) */
         {
           ASTGENode jjtn004 = new ASTGENode(JJTGENODE);
           boolean jjtc004 = true;
           jjtree.openNodeScope(jjtn004);
         }
         try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte004) {
           if (jjtc004) {
             jjtree.clearNodeScope(jjtn004);
             jjtc004 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte004 instanceof RuntimeException) {
             throw (RuntimeException)jjte004;
           }
           if (jjte004 instanceof ParseException) {
             throw (ParseException)jjte004;
           }
           throw (Error)jjte004;
         } finally {
           if (jjtc004) {
             jjtree.closeNodeScope(jjtn004,  2);
           }
         }
/*@egen*/
  )*
}

void PrimaryExpression()      :
{
  String name;
}
{
  LOOKAHEAD(Literal()"#") DatePatternLiteral() | Literal() | "(" Expression() ")"
}

void AdditiveExpression()      :
{}
{
  MultiplicativeExpression()
  (
    <ADD>/*@bgen(jjtree) #AddNode( 2) */
          {
            ASTAddNode jjtn001 = new ASTAddNode(JJTADDNODE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
            }
          }
/*@egen*/ |
    <MIN>/*@bgen(jjtree) #SubtractNode( 2) */
          {
            ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/
  )*
}

void MultiplicativeExpression()      :
{}
{
   UnaryExpression()
   (
     <MUL>/*@bgen(jjtree) #MulNode( 2) */
           {
             ASTMulNode jjtn001 = new ASTMulNode(JJTMULNODE);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
             }
           }
/*@egen*/ |
     <DIV>/*@bgen(jjtree) #DivNode( 2) */
           {
             ASTDivNode jjtn002 = new ASTDivNode(JJTDIVNODE);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
           }
/*@egen*/ |
     <MOD>/*@bgen(jjtree) #ModNode( 2) */
           {
             ASTModNode jjtn003 = new ASTModNode(JJTMODNODE);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
           } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               throw (RuntimeException)jjte003;
             }
             if (jjte003 instanceof ParseException) {
               throw (ParseException)jjte003;
             }
             throw (Error)jjte003;
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  2);
             }
           }
/*@egen*/
   )*
}

void UnaryExpression()      :
{}
{
  <MIN>/*@bgen(jjtree) #NegativeNode( 1) */
        {
          ASTNegativeNode jjtn001 = new ASTNegativeNode(JJTNEGATIVENODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
          }
        }
/*@egen*/ |
  <NOT>/*@bgen(jjtree) #NotNode( 1) */
        {
          ASTNotNode jjtn002 = new ASTNotNode(JJTNOTNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  1);
          }
        }
/*@egen*/ |
  PrimaryExpression()
}

void Literal()      :
{}
{
  ForAllLiteral() | ListExpression() | FloatLiteral() | IntegerLiteral() |/*@bgen(jjtree) NullNode */
                                                                           {
                                                                             ASTNullNode jjtn001 = new ASTNullNode(JJTNULLNODE);
                                                                             boolean jjtc001 = true;
                                                                             jjtree.openNodeScope(jjtn001);
                                                                           }
                                                                           try {
/*@egen*/ <NULL>/*@bgen(jjtree)*/
                                                                           } finally {
                                                                             if (jjtc001) {
                                                                               jjtree.closeNodeScope(jjtn001, true);
                                                                             }
                                                                           }
/*@egen*/ |/*@bgen(jjtree) TodayNode */
                                                                                              {
                                                                                                ASTTodayNode jjtn002 = new ASTTodayNode(JJTTODAYNODE);
                                                                                                boolean jjtc002 = true;
                                                                                                jjtree.openNodeScope(jjtn002);
                                                                                              }
                                                                                              try {
/*@egen*/ <TODAY>/*@bgen(jjtree)*/
                                                                                              } finally {
                                                                                                if (jjtc002) {
                                                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                                                }
                                                                                              }
/*@egen*/ |/*@bgen(jjtree) TrueNode */
                                                                                                                   {
                                                                                                                     ASTTrueNode jjtn003 = new ASTTrueNode(JJTTRUENODE);
                                                                                                                     boolean jjtc003 = true;
                                                                                                                     jjtree.openNodeScope(jjtn003);
                                                                                                                   }
                                                                                                                   try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
                                                                                                                   } finally {
                                                                                                                     if (jjtc003) {
                                                                                                                       jjtree.closeNodeScope(jjtn003, true);
                                                                                                                     }
                                                                                                                   }
/*@egen*/ |/*@bgen(jjtree) FalseNode */
                                                                                                                                      {
                                                                                                                                        ASTFalseNode jjtn004 = new ASTFalseNode(JJTFALSENODE);
                                                                                                                                        boolean jjtc004 = true;
                                                                                                                                        jjtree.openNodeScope(jjtn004);
                                                                                                                                      }
                                                                                                                                      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
                                                                                                                                      } finally {
                                                                                                                                        if (jjtc004) {
                                                                                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                                                                                        }
                                                                                                                                      }
/*@egen*/ |
  FunctionLiteral() | StringLiteral() |
  ExistsTmlLiteral() | TmlLiteral() | TipiLiteral() | "$" MappableLiteral()
}

void DatePatternLiteral()      :
{}
{/*@bgen(jjtree) DatePatternNode */
  {
    ASTDatePatternNode jjtn001 = new ASTDatePatternNode(JJTDATEPATTERNNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void ForAllLiteral()      :
{Token t;}
{/*@bgen(jjtree) ForAllNode */
  {
    ASTForAllNode jjtn001 = new ASTForAllNode(JJTFORALLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <SARTRE> "(" [ StringLiteral() "," ExpressionLiteral() ] ")"/*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                      jjtc001 = false;
                                                                    }
/*@egen*/ {jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg;jjtn001.mapObject = mapObject;jjtn001.functionName = t.image;} )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionLiteral()      :
{Token t;
}
{/*@bgen(jjtree) FunctionNode */
  {
    ASTFunctionNode jjtn001 = new ASTFunctionNode(JJTFUNCTIONNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <NORMAL_IDENTIFIER>
     "(" [ Expression() {jjtn001.args++;} ("," Expression() {jjtn001.args++;}) * ] ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    {jjtn001.functionName = t.image;jjtn001.doc = inputDoc;jjtn001.parentMsg = parentMsg;}
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FloatLiteral()      :
{Token t;}
{/*@bgen(jjtree) FloatConstantNode */
 {
   ASTFloatConstantNode jjtn001 = new ASTFloatConstantNode(JJTFLOATCONSTANTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (t = <FLOAT_LITERAL>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
   }
/*@egen*/
   { jjtn001.val = Double.parseDouble(t.image); }
 )/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/
}

void IntegerLiteral()      :
{Token t;}
{/*@bgen(jjtree) IntegerConstantNode */
 {
   ASTIntegerConstantNode jjtn001 = new ASTIntegerConstantNode(JJTINTEGERCONSTANTNODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn001, true);
     jjtc001 = false;
   }
/*@egen*/
   { jjtn001.val = Integer.parseInt(t.image); }
  )/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/
}

void StringLiteral()      :
{Token t;}
{/*@bgen(jjtree) StringConstantNode */
  {
    ASTStringConstantNode jjtn001 = new ASTStringConstantNode(JJTSTRINGCONSTANTNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    { jjtn001.val = t.image; }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/

}

void ExpressionLiteral()      :
{Token t;}
{/*@bgen(jjtree) ExpresionLiteralNode */
  {
    ASTExpresionLiteralNode jjtn001 = new ASTExpresionLiteralNode(JJTEXPRESIONLITERALNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <EXPRESSION_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    { jjtn001.val = t.image; }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/

}

void ExistsTmlLiteral()      :
{Token t;
}
{/*@bgen(jjtree) TmlNode */
  {
    ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <EXISTS_TML_IDENTIFIER> (":" (<NAME_OPTION> {jjtn001.selectionOption = "name";} | <VALUE_OPTION> {jjtn001.selectionOption = "value";}))? "]" ("." <NORMAL_IDENTIFIER> { jjtn001.option = token.image;})?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    { jjtn001.exists = true; jjtn001.val = t.image; jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg; jjtn001.parentSel = parentSel;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void TmlLiteral()      :
{Token t;
}
{/*@bgen(jjtree) TmlNode */
  {
    ASTTmlNode jjtn001 = new ASTTmlNode(JJTTMLNODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <TML_IDENTIFIER> (":" (<NAME_OPTION>  {jjtn001.selectionOption = "name";}   | <VALUE_OPTION> {jjtn001.selectionOption = "value";}))?  "]" ("." <NORMAL_IDENTIFIER> { jjtn001.option = token.image;})?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
    }
/*@egen*/
    { jjtn001.exists = false; jjtn001.val = t.image; jjtn001.doc = inputDoc; jjtn001.parentMsg = parentMsg; jjtn001.parentSel = parentSel;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void TipiLiteral()      :
{Token t;
}
{/*@bgen(jjtree) TipiNode */
 {
   ASTTipiNode jjtn001 = new ASTTipiNode(JJTTIPINODE);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (t = <TIPI_IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                        }
/*@egen*/ { jjtn001.val = t.image; jjtn001.tipiLink = tipiLink; } )/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/
}

void MappableLiteral()      :
{Token t;}
{/*@bgen(jjtree) MappableNode */
  {
    ASTMappableNode jjtn001 = new ASTMappableNode(JJTMAPPABLENODE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (t = <NORMAL_IDENTIFIER>
("(" [ Expression() {jjtn001.args++;} ("," Expression() {jjtn001.args++;}) * ] ")")?/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn001, true);
  jjtc001 = false;
}
/*@egen*/
{jjtn001.val = t.image; jjtn001.mapObject = mapObject; } )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}
