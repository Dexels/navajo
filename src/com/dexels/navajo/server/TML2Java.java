

/**
 * Title:        Navajo<p>
 * Description:  <p>
 * Copyright:    Copyright (c) Arjen Schoneveld<p>
 * Company:      Dexels<p>
 * @author Arjen Schoneveld
 * @version $Id$
 */
package com.dexels.navajo.server;


import java.io.*;
import java.util.*;

import com.dexels.navajo.document.*;
import com.dexels.navajo.xml.*;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.w3c.dom.*;

import utils.FileUtils;


class GenClass {

    public String messageName;
    public String name;
    public Vector vars;
    public Vector types;
    public Vector tmlProperties;
}


public class TML2Java {

    private String comment = "/**\n"
            + " * Generated by TML2Java (Copyright (c) 2000 by Dexels BV)\n"
            + " */\n";

    private String insertSpace(int level) {

        String result = "";
        int n = (level + 1) * 2;

        for (int i = 0; i < n; i++)
            result += " ";

        return result;
    }

    private String toClassName(String service) {

        String result = "";
        String s = (service.charAt(0) + "").toUpperCase();

        result = s;

        for (int i = 1; i < service.length(); i++) {
            char c = service.charAt(i);

            if ((c == '_') || (c == ' ')) { // Next character in uppercase.
                i++;
                s = (service.charAt(i) + "").toUpperCase();
            } else
                s = c + "";
            result = result + s;
        }

        return result;
    }

    private String toMethodName(String method) {

        String result = "";
        String s = (method.charAt(0) + "").toLowerCase();

        result = "do" + s;

        for (int i = 1; i < method.length(); i++) {
            char c = method.charAt(i);

            if ((c == '_') || (c == ' ')) { // Next character in uppercase.
                i++;
                s = (method.charAt(i) + "").toUpperCase();
            } else
                s = c + "";
            result = result + s;
        }

        return result;
    }

    private String toVariableName(String property) {

        String result = "";
        String s = (property.charAt(0) + "").toLowerCase();

        result = s;

        for (int i = 1; i < property.length(); i++) {
            char c = property.charAt(i);

            if ((c == '_') || (c == ' ')) { // Next character in uppercase.
                i++;
                s = (property.charAt(i) + "").toUpperCase();
            } else
                s = c + "";
            result = result + s;
        }

        return result;
    }

    private GenClass makeClass(Message message) {

        ArrayList properties = message.getAllProperties();
        String className = toClassName(message.getName());

        Vector names = new Vector();
        Vector types = new Vector();
        Vector tmlTypes = new Vector();

        for (int i = 0; i < properties.size(); i++) {
            Property prop = (Property) properties.get(i);
            String name = prop.getName();
            String type = prop.getType();

            String datatype = "";

            if (type.equals(Property.BOOLEAN_PROPERTY))
                datatype = "boolean";
            else
            if (type.equals(Property.FLOAT_PROPERTY))
                datatype = "double";
            else
            if (type.equals(Property.STRING_PROPERTY))
                datatype = "String";
            else
            if (type.equals(Property.DATE_PROPERTY))
                datatype = "Date";
            else
            if (type.equals(Property.INTEGER_PROPERTY))
                datatype = "int";
            else
            if (type.equals(Property.SELECTION_PROPERTY)
                    && prop.getCardinality().equals("1"))
                datatype = "String";
            else
            if (type.equals(Property.SELECTION_PROPERTY)
                    && prop.getCardinality().equals("+"))
                datatype = "Vector";
            else
                datatype = "unknown";

            names.add(toVariableName(name));
            types.add(datatype);
            tmlTypes.add(prop);
        }

        GenClass gClass = new GenClass();

        gClass.messageName = message.getName();
        gClass.name = className;
        gClass.vars = names;
        gClass.types = types;
        gClass.tmlProperties = tmlTypes;

        return gClass;
    }

    private String formatClass(int level, GenClass gClass) {

        StringBuffer buffer = new StringBuffer();

        buffer.append(insertSpace(level) + "class " + gClass.name + " {\n\n");

        // Generate type definitions.
        for (int i = 0; i < gClass.vars.size(); i++) {
            String datatype = (String) gClass.types.get(i);
            String varName = (String) gClass.vars.get(i);

            buffer.append(insertSpace(level + 2) + datatype + " " + varName + " = ");
            if (datatype.equals("String"))
                buffer.append("\"\"");
            else
            if (datatype.equals("Vector"))
                buffer.append("new Vector()");
            else
            if (datatype.equals("Date"))
                buffer.append("new Date()");
            else
            if (datatype.equals("boolean"))
                buffer.append("false");
            else
                buffer.append("0");
            buffer.append(";\n");
        }

        buffer.append("\n");
        buffer.append(insertSpace(level + 2) + "public " + gClass.name + "(Message message) throws navajo.server.SystemException, navajo.server.UserException  {\n\n");

        for (int i = 0; i < gClass.vars.size(); i++) {
            String varName = (String) gClass.vars.get(i);
            String type = (String) gClass.types.get(i);
            Property prop = (Property) gClass.tmlProperties.get(i);
            String rawType = prop.getType();

            if (rawType.equals(Property.BOOLEAN_PROPERTY))
                buffer.append(codeForBoolean(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.STRING_PROPERTY))
                buffer.append(codeForString(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.INTEGER_PROPERTY))
                buffer.append(codeForInt(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.DATE_PROPERTY))
                buffer.append(codeForDate(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.FLOAT_PROPERTY))
                buffer.append(codeForFloat(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.SELECTION_PROPERTY)
                    && prop.getCardinality().equals("1"))
                buffer.append(codeForSingleSelection(level + 3, gClass.messageName, varName) + "\n");
            else
            if (rawType.equals(Property.SELECTION_PROPERTY)
                    && prop.getCardinality().equals("+"))
                buffer.append(codeForMultipleSelection(level + 3, gClass.messageName, varName) + "\n");
        }
        buffer.append("\n" + insertSpace(level + 2) + "}\n");

        buffer.append(insertSpace(level) + "}\n\n");

        return buffer.toString();
    }

    private Navajo readFile(String name) throws IOException {

        FileInputStream input;
        Document d;
        Navajo outMessage = null;

        input = new FileInputStream(new File(name));
        try {
            d = XMLDocumentUtils.createDocument(input, false);
            d.getDocumentElement().normalize();
            outMessage = new Navajo(d);
        } catch (com.dexels.navajo.document.NavajoException ex) {
            ex.printStackTrace();
        }

        return outMessage;
    }

    private String codeForString(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        result.append(insertSpace(level) + "this." + propertyVar + " = " + property + ".getValue();\n");

        return result.toString();
    }

    private String codeForDate(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        // result.append(insertSpace(level) + "try {\n");
        result.append(insertSpace(level) + "this." + propertyVar + " = " + "Util.getDate(" + property + ".getValue());\n");
        // result.append(insertSpace(level) + "} catch ( pe) {\n");
        // result.append(insertSpace(level+1) + "throw new navajo.server.UserException(0, \"Onjuiste datum: " + propertyVar + "\");\n");
        // result.append(insertSpace(level) + "}");

        return result.toString();
    }

    private String codeForBoolean(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        result.append(insertSpace(level) + "this." + propertyVar + " = " + "(" + property + ".getValue().equals(\"1\")) ? true : false;");

        return result.toString();
    }

    private String codeForInt(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        // result.append(insertSpace(level) + "try {\n");
        result.append(insertSpace(level) + "this." + propertyVar + " = " + "Util.getInt(" + property + ".getValue());\n");
        // result.append(insertSpace(level) + "} catch (ParseException pe) {\n");
        // result.append(insertSpace(level+1) + "throw new navajo.server.UserException(0, \"Ongeldig (geheel) getal: " + propertyVar +"\");\n");
        // result.append(insertSpace(level) + "}");

        return result.toString();
    }

    private String codeForSingleSelection(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";
        String selList = propertyVar + "List";
        String selName = propertyVar + "Selected";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        result.append(insertSpace(level) + "try {\n");
        result.append(insertSpace(level + 1) + "ArrayList " + selList + " = " + property + ".getAllSelectedSelections();\n");

        result.append(insertSpace(level + 1) + "if (" + selList + ".size() == 0)\n" + insertSpace(level + 2) + "throw new navajo.server.SystemException(navajo.server.SystemException.MISSING_ATTRIBUTE, " + "\"Wrong selection given: \" + " + property + ".getName());\n");

        result.append(insertSpace(level + 1) + "Selection " + selName + " = (Selection) " + selList + ".get(0);\n");
        result.append(insertSpace(level + 1) + "this." + propertyVar + " = " + selName + ".getName();\n");
        result.append(insertSpace(level) + "} catch (NavajoException te) {\n");
        result.append(insertSpace(level + 1) + "throw new navajo.server.SystemException(0, \"Invalid selection property\");\n");
        result.append(insertSpace(level) + "}");

        return result.toString();
    }

    private String codeForMultipleSelection(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";
        String selList = propertyVar + "List";
        String selName = propertyVar + "Selected";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        result.append(insertSpace(level) + "try {\n");
        result.append(insertSpace(level + 1) + "ArrayList " + selList + " = " + property + ".getAllSelectedSelections();\n");
        result.append(insertSpace(level + 1) + "for (int i = 0; i < " + selList + ".size(); i++) {\n");
        result.append(insertSpace(level + 2) + "Selection " + selName + " = (Selection) " + selList + ".get(i);\n");
        result.append(insertSpace(level + 2) + "this." + propertyVar + ".add(" + selName + ".getName());\n");
        result.append(insertSpace(level + 1) + "}\n");
        result.append(insertSpace(level) + "} catch (NavajoException te) {\n");
        result.append(insertSpace(level + 1) + "throw new navajo.server.SystemException(0, \"\");\n");
        result.append(insertSpace(level) + "}");

        return result.toString();
    }

    private String codeForFloat(int level, String messageVar, String propertyVar) {
        StringBuffer result = new StringBuffer();
        String property = propertyVar + "Prop";
        String msg = messageVar + "Msg";

        result.append(insertSpace(level) + "Property " + property + " = " + "message" + ".getProperty(\"" + propertyVar + "\");\n");
        // result.append(insertSpace(level) + "try {\n");
        result.append(insertSpace(level) + "this." + propertyVar + " = " + "Util.getDouble(" + property + ".getValue());\n");
        // result.append(insertSpace(level) + "} catch (ParseException pe) {\n");
        // result.append(insertSpace(level+1) + "throw new navajo.server.UserException(0, \"Onjuist (gebroken) getal: " + propertyVar +"\");\n");
        // result.append(insertSpace(level) + "}");

        return result.toString();
    }

    /**
     * Return methodList.
     */
    private ArrayList generate(String className, String service, Navajo inMessage) throws IOException {

        Vector allClasses = new Vector();
        StringBuffer buffer = new StringBuffer();

        ArrayList messageList = inMessage.getAllMessages();
        ArrayList methodList = inMessage.getAllMethods(inMessage.getMessageBuffer());

        buffer.append(comment + "\n");
        buffer.append("import navajo.*;\n");
        buffer.append("import navajo.util.*;\n");
        buffer.append("import java.util.*;\n");
        buffer.append("\n");
        String s = service.charAt(0) + "";

        buffer.append("public class " + className + " extends navajo.server.Request {\n\n");

        for (int i = 0; i < messageList.size(); i++) {

            Message msg = (Message) messageList.get(i);
            GenClass gClass = makeClass(msg);

            allClasses.add(gClass);

            // buffer.append(formatClass(0, gClass));

        }

        // Add global class variables.
        for (int i = 0; i < allClasses.size(); i++) {
            GenClass gClass = (GenClass) allClasses.get(i);
            String name = gClass.name;

            buffer.append(insertSpace(0) + name + " " + toVariableName(name) + " = null;\n");
        }
        buffer.append("\n");

        // Insert class definitions.
        for (int i = 0; i < allClasses.size(); i++) {
            GenClass gClass = (GenClass) allClasses.get(i);

            buffer.append(formatClass(0, gClass));
        }

        buffer.append(insertSpace(0) + "public " + className + "(Navajo inMessage, ResourceBundle rb) throws navajo.server.SystemException, navajo.server.UserException  {\n\n");
        // Get all messages from inMessage.
        buffer.append("\n" + insertSpace(1) + "super(rb);\n\n");
        for (int i = 0; i < messageList.size(); i++) {
            Message msg = (Message) messageList.get(i);

            buffer.append(insertSpace(1) + "Message " + toVariableName(msg.getName()) + "Msg = inMessage.getMessage(\"" + toVariableName(msg.getName()) + "\");\n");
            GenClass gClass = (GenClass) allClasses.get(i);

            // Read properties for each message.
            buffer.append(insertSpace(1) + "if (" + toVariableName(msg.getName()) + "Msg != null) {\n");
            buffer.append(insertSpace(2) + toVariableName(msg.getName()) + " = new " + gClass.name + "(" + toVariableName(msg.getName()) + "Msg);\n");
            buffer.append(insertSpace(1) + "}\n");
        }
        buffer.append("\n");

        buffer.append("\n" + insertSpace(0) + "}\n\n");

        // Add methods.
        // First add initial static method.
        buffer.append(insertSpace(0) + "public Navajo init() throws NavajoException {\n");
        buffer.append(insertSpace(1) + "// Get initial navajo message\n");
        buffer.append(insertSpace(1) + "Navajo outMessage = null;\n");
        buffer.append(insertSpace(1) + "try {\n");
        buffer.append(insertSpace(2) + "outMessage = getInitialNavajoMesssage(\"" + service + "\");\n");
        buffer.append(insertSpace(1) + "} catch (Exception e) {\n");
        buffer.append(insertSpace(2) + "throw new NavajoException(e.toString());\n");
        buffer.append(insertSpace(1) + "}\n");
        buffer.append(insertSpace(1) + "return outMessage;\n");
        buffer.append("\n" + insertSpace(0) + "}\n\n");

        for (int i = 0; i < methodList.size(); i++) {
            Method method = (Method) methodList.get(i);
            String name = method.getName();
            ArrayList required = method.getRequiredMessages();

            buffer.append(insertSpace(0) + "public Navajo do" + toClassName(method.getName()) + "() throws NavajoException {\n");
            // Check requires messages.
            buffer.append(insertSpace(1) + "Navajo outMessage = null;\n");
            buffer.append(insertSpace(1) + "outMessage = new Navajo();\n");
            buffer.append(insertSpace(1) + "if (");
            for (int j = 0; j < required.size(); j++) {
                String req = toVariableName((String) required.get(j));

                buffer.append("(" + req + " == null)");
                if (j < (required.size() - 1))
                    buffer.append(" || ");
            }
            buffer.append(") {\n");
            buffer.append(insertSpace(2) + "throw new NavajoException(\"Not all required messages present\");\n");
            buffer.append(insertSpace(1) + "}");
            buffer.append("\n" + insertSpace(1) + "return outMessage;\n");
            buffer.append("\n" + insertSpace(0) + "}\n\n");
        }

        buffer.append("\n}");

        // return buffer.toString();
        FileUtils.writeFile(className + ".java", buffer.toString());

        return methodList;
    }

    private void generateServlet(String servletName, String className, Vector serviceList, Vector methodList)
            throws java.io.IOException {
        // Generate the servlet code template which extends NavajoServerServlet.
        // The servlet code implements doAction() which calls the correct code in the
        // generated class file (see generate()).


        StringBuffer result = new StringBuffer();

        result.append(comment + "\n");
        String header = "import javax.servlet.*;\n"
                + "import javax.servlet.http.*;\n" + "import navajo.*;\n"
                + "import navajo.server.*;\n" + "import java.util.*;\n"
                + "\npublic class " + servletName
                + " extends navajo.server.NavajoServerServlet {\n";

        result.append(header);

        result.append("\npublic void init(ServletConfig config) throws ServletException\n{\n" + insertSpace(1) + "//implement this function for i.e. global variables, setting EJB references\n" + insertSpace(1) + "super.init(config);\n}\n");
        result.append("\npublic void destroy()\n{ //implement this function\n}\n");
        result.append("\npublic Navajo doAction(Access access, Parameters parms, Navajo inMessage)\n");
        result.append(insertSpace(2) + "throws java.sql.SQLException, javax.naming.NamingException, javax.ejb.CreateException,\n");
        result.append(insertSpace(2) + "navajo.NavajoException, java.rmi.RemoteException, org.xml.sax.SAXException,\n");
        result.append(insertSpace(2) + "javax.ejb.FinderException, java.io.IOException, SystemException, UserException,\n");
        result.append(insertSpace(2) + "NullPointerException\n");
        result.append("{\n");
        result.append(insertSpace(1) + "Navajo outMessage;\n\n");
        for (int sIndex = 0; sIndex < serviceList.size(); sIndex++) {
            String service = (String) serviceList.get(sIndex);
            ArrayList methods = (ArrayList) methodList.get(sIndex);

            for (int i = 0; i < methods.size(); i++) {
                String method = ((Method) methods.get(i)).getName();

                result.append(insertSpace(1) + "if (access.rpcName.equals(\"" + method + "\")) {\n");
                result.append(insertSpace(2) + className + " " + toVariableName(service) + " = new " + className + "(inMessage, properties);\n");
                result.append(insertSpace(2) + "outMessage = " + toVariableName(service) + ".do" + toClassName(method) + "();\n");
                result.append(insertSpace(1) + "} else \n");
            }
            result.append(insertSpace(1) + "if (access.rpcName.equals(\"" + service + "\")) {\n");
            result.append(insertSpace(2) + className + " " + toVariableName(service) + " = new " + className + "(inMessage, properties);\n");
            result.append(insertSpace(2) + "outMessage = " + toVariableName(service) + ".init();\n");
            result.append(insertSpace(1) + "} else \n");
        }
        result.append(insertSpace(1) + " {\n");
        result.append(insertSpace(2) + "throw new SystemException(SystemException.UNKNOWN_RPC_NAME, access.rpcName);\n");
        result.append(insertSpace(1) + "}");

        result.append("\n\nreturn outMessage;\n}\n");

        result.append("\n}");

        String total = result.toString();

        FileUtils.writeFile(servletName + ".java", total);

    }

    public TML2Java() {}

    public static void main(String args[]) {

        TML2Java t2j = new TML2Java();

        try {
            System.err.println("In TML2Java.");

            Vector serviceList = new Vector();
            Vector methodList = new Vector();

            if (args.length < 3) {
                System.out.println("Usage: <servlet name> <class name> <tml file 1> ... <tml file n>\n");
                System.exit(1);
            }

            String servletName = args[0];
            String className = args[1];

            File file = new File(args[2]);

            System.err.println("Converting " + file.getName() + " to Java");
            Navajo doc = t2j.readFile(file.getPath());
            // Get initial service, i.e. first TML document.
            int index = file.getName().indexOf(".xml");
            String service = file.getName().substring(0, index);

            for (int i = 3; i < args.length; i++) {

                file = new File(args[i]);
                System.err.println("Converting " + file.getName() + " to Java");

                Navajo docExtra = t2j.readFile(file.getPath());

                doc.appendDocBuffer(docExtra.getMessageBuffer());

            }

            ArrayList methods = t2j.generate(className, service, doc);

            serviceList.add(service);
            methodList.add(methods);
            // }

            t2j.generateServlet(servletName, className, serviceList, methodList);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
