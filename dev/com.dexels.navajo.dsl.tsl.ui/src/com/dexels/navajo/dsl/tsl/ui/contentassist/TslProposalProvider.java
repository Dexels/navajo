/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.tsl.ui.contentassist;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.dexels.navajo.dsl.expression.proposals.AdapterProposal;
import com.dexels.navajo.dsl.model.tsl.Element;
import com.dexels.navajo.dsl.model.tsl.Map;
import com.dexels.navajo.dsl.model.tsl.Message;
import com.dexels.navajo.dsl.model.tsl.PossibleExpression;
import com.dexels.navajo.dsl.model.tsl.Property;
import com.dexels.navajo.dsl.model.tsl.Tml;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class TslProposalProvider extends AbstractTslProposalProvider {

//	private static final String[] MESSAGE_ATTRIBUTES = new String[]{"name","type","filter"};
//	private static final String[] PROPERTY_ATTRIBUTES = new String[]{"name","type","length","cardinality","value","description","subtype"};

	private final java.util.Map<String,java.util.Map<String,List<String>>> proposalRepository = new HashMap<String, java.util.Map<String,List<String>>>();
	private final java.util.Map<String,List<String>> typeProposalRegistry = new HashMap<String, List<String>>();

//	private final NavajoContextProvider contextProvider = new NavajoContextProvider();
	
	public TslProposalProvider() {
		initializeProposalBundle();
		initializeTypeBundle();
	}

	private void initializeProposalBundle() {
		ResourceBundle rb = ResourceBundle.getBundle("com/dexels/navajo/dsl/tsl/ui/contentassist/proposals");
		Set<String> keys = rb.keySet();
		for (String key : keys) {
			String[] vla = key.split("/");
			String classification = vla[0];
			String[] entry = vla[1].split("\\.");
			String vl = entry[0];

			java.util.Map<String,List<String>> classEntry = proposalRepository.get(classification);
			if(classEntry==null) {
				classEntry = new HashMap<String, List<String>>();
				proposalRepository.put(classification, classEntry);
			}
			List<String> proposals = classEntry.get(vl);
			if(proposals==null) {
				proposals = new ArrayList<String>();
				classEntry.put(vl, proposals);
			}
			String value = rb.getString(key);
			proposals.add(value);
		}
	}
	
	private void initializeTypeBundle() {
		ResourceBundle rb = ResourceBundle.getBundle("com/dexels/navajo/dsl/tsl/ui/contentassist/typeproposals");
		Set<String> keys = rb.keySet();
		for (String key : keys) {
			String[] vla = key.split("\\.");
			String type = vla[0];
			List<String> proposals = typeProposalRegistry.get(type);
			if(proposals==null) {
				proposals = new ArrayList<String>();
				typeProposalRegistry.put(type, proposals);
			}			
			proposals.add(rb.getString(key));
		}
		
	}
	
	
	
//	public TslProposalProvider(INavajoResourceFinder navajoFinder) throws IOException {
//		navajoContext.initialize(navajoFinder);
//	
//		initializeProposalBundle();
//
//	}
//	
	@Override
	public void complete_MapGetReference(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		Map m = getMapParent(model);
		if(m==null) {
			return;
		}
		if(m.getMapName()==null) {
			System.err.println("No map name, attempting to resolve...");
			resolveMapName(m);
		}
		List<String> getters = navajoContext.getAdapter(getCurrentProject(),m.getMapName()).getGetters();
		for (String string : getters) {
			ICompletionProposal completionProposal = createCompletionProposal("$"+string, "$"+string, null, context);
			acceptor.accept(completionProposal);

		}
	}
	
	
	//TODO Extend to also include parent maps
	private Map getMapParent(EObject model) {
		if(model instanceof Map) {
			return (Map) model;
		}
		if(model==null) {
			return null;
		}
		return getMapParent(model.eContainer());
	}

	// Figure out the type / name of a reffed map based on its parent type and field
	private void resolveMapName(Map m) {
		if(m.getMapName()==null && m.getRef()!=null) {
			Map parent = getMapParent (m.eContainer());
			String mapName = resolveChildMapType(parent,m.getRef());
			
			// Do something more intelligent
			if(mapName.endsWith("[]")) {
				mapName = mapName.substring(0, mapName.length()-2);
			}
			m.setMapName(mapName);
		}
		
	}
	
	private String stripQuotes(String label) {
		if(label.startsWith("\"") && label.endsWith("\"")) {
			return label.substring(1, label.length()-1);
		}
		return label;
	}
	
	private String resolveChildMapType(Map parent, String ref) {
		ref = stripQuotes(ref);
		String set = navajoContext.getAdapter(getCurrentProject(),parent.getMapName()).getGetterMapType(ref);
		return set;
	}

	@Override
	public void complete_Property(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Property(model, ruleCall, context, acceptor);
		Element ee = (Element)model;
		String selected = context.getSelectedText();
		if(selected==null || "".equals(selected)) {
			selected="propertyName";
		}

		ICompletionProposal completionProposal = createCompletionProposal("<property name=\""+selected+"\">\n</property>", "Property with name: "+selected, null, context);
		acceptor.accept(completionProposal);

		if(ee instanceof Property) {
			if(ee.isSplitTag() && !ee.isClosedTag()) {
				completionProposal = createCompletionProposal("</property>","</property>", null, context);
				acceptor.accept(completionProposal);
				
			}
		}
	}

	
	
	
	@Override
	public void complete_ExpressionTag(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_ExpressionTag(model, ruleCall, context, acceptor);
		ICompletionProposal completionProposal = createCompletionProposal("<![CDATA[\n]]>","<![CDATA tag", null, context);
		acceptor.accept(completionProposal);
		
	}

	
	
	@Override
	public void completeExpressionTag_Expression(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeExpressionTag_Expression(model, assignment, context, acceptor);
		ICompletionProposal completionProposal = createCompletionProposal("<![CDATA[\n]]>","<![CDATA tag", null, context);
		acceptor.accept(completionProposal);
	}

	@Override
	public void complete_Message(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_Message(model, ruleCall, context, acceptor);
		String selected = context.getSelectedText();
		if(selected==null || "".equals(selected)) {
			selected="messagename";
		}
		ICompletionProposal completionProposal = createCompletionProposal("<message name=\""+selected+"\">\n</message>", "Message with name: "+selected, null, context);
		acceptor.accept(completionProposal);
		completionProposal = createCompletionProposal("<message name=\""+selected+"\" type=\"array\">\n</message>", "Array message with name: "+selected, null, context);
		acceptor.accept(completionProposal);
		
		if(model instanceof Message) {
			Message t = (Message)model;
			if(t.isArray()) {
				completionProposal = createCompletionProposal("<message name=\""+t.getName()+"\" type=\"array_element\">\n</message>", "Add element with name: "+t.getName(), null, context);
				acceptor.accept(completionProposal);
			}
			if(t.isSplitTag() && !t.isClosedTag()) {
				completionProposal = createCompletionProposal("</message>","</message>", null, context);
				acceptor.accept(completionProposal);
				
			}
//			if(t.getMethods()==null || t.getMethods().isEmpty()) {
//				t.getMethods().add(TslFactory.eINSTANCE.createMethods());
//			}
		}
		
	}

	
	@Override
	public void complete_MapId(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_MapId(model, ruleCall, context, acceptor);
		List<AdapterProposal> list = navajoContext.getAdapterProposals(getCurrentProject());
		Map m = (Map)model;
		for (AdapterProposal adapterProposal : list) {
			if(m.getMapName()==null || adapterProposal.getTagName().startsWith(m.getMapName())) {
//				String mapIdProposal = adapterProposal.getMapIdProposal(m.getMapName());
				ICompletionProposal completionProposal = createCompletionProposal(adapterProposal.getTagName(), context);
				acceptor.accept(completionProposal);
			}
		}
		
	}

	
	
	
	@Override
	public void complete_DebugTag(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		super.complete_DebugTag(model, ruleCall, context, acceptor);
		String selected = context.getSelectedText();
		if(selected==null || "".equals(selected)) {
			selected="statement";
		}
		ICompletionProposal completionProposal = createCompletionProposal("<debug value=\""+selected+"\">\n</debug>", "Debug statement with value: "+selected, null, context);
		acceptor.accept(completionProposal);
	}

//	public void completeMap_Children(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		super.completeMap_Children(model, assignment, context, acceptor);
//	}
	
	@Override
	public void completePossibleExpression_Key(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completePossibleExpression_Key(model, assignment, context, acceptor);

			Set<String> possibilities = null;
			if(model instanceof Property) {
				possibilities = getPropertyKeys("property");
			}

			if(model instanceof Message) {
				possibilities = getPropertyKeys("message");
			}

			if(model instanceof Tml) {
				possibilities = getPropertyKeys("navascript");
			}
			if(possibilities!=null) {
				for (String adapterProposal : possibilities) {
					ICompletionProposal completionProposal = createCompletionProposal(adapterProposal+"=\"\"", adapterProposal, null, context);
					acceptor.accept(completionProposal);
				}
			}

	}

	@Override
	public void complete_ATTRIBUTESTRING(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		super.complete_ATTRIBUTESTRING(model, ruleCall, context, acceptor);
		if(model instanceof PossibleExpression ) {
			PossibleExpression expr = (PossibleExpression)model;
			String myKey = expr.getKey();			
			List<String> possibilities = null;
			if(model.eContainer() instanceof Property) {
//				Property p = (Property)model.eContainer();
				possibilities = getPropertyAttributes(myKey, expr.getValue(),"property");
			}

			if(model.eContainer() instanceof Message) {
//				Message p = (Message)model.eContainer();
				possibilities = getPropertyAttributes(myKey, expr.getValue(),"message");
			}

			if(model.eContainer() instanceof Tml) {
//				Tml p = (Tml)model.eContainer();
				possibilities = getPropertyAttributes(myKey, expr.getValue(),"navascript");
			}

			
//			System.err.println("possi: "+possibilities);
			if(possibilities!=null) {
				for (String adapterProposal : possibilities) {
					ICompletionProposal completionProposal = createCompletionProposal("\""+adapterProposal+"\"", adapterProposal, null, context);
					acceptor.accept(completionProposal);
				}
			}
		}
	}

	private List<String> getPropertyAttributes(String myKey, String value, String category) {
		java.util.Map<String, List<String>> propertyProposals = proposalRepository.get(category);
		if(propertyProposals==null) {
			return null;
		}
		return  propertyProposals.get(myKey);
//		return null;
	}

	private Set<String> getPropertyKeys(String category) {
		java.util.Map<String, List<String>> propertyProposals = proposalRepository.get(category);
		if(propertyProposals==null) {
			return null;
		}
		return  propertyProposals.keySet();
//		return null;
	}

	
	@Override
	public void complete_PossibleExpression(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		EObject ee = model;
		if(ee instanceof Element) {
			List<String> allowedAttributes = getAllowedAttributesForElement((Element)ee);
			for (String proposal : allowedAttributes) {
				List<String> proposedValuesForAttribute = getProposedValuesForAttribute((Element)ee, proposal);
				
				for (String proposedValue : proposedValuesForAttribute) {
					ICompletionProposal completionProposal = createCompletionProposal(proposal+"=\""+proposedValue+"\"", "set: "+proposal+"("+proposedValue+")", null, context);
					acceptor.accept(completionProposal);
				}
			}
		} else {
			System.err.println("Weird possibleexpression parent: "+ee.getClass());
		}
	}


	private List<String> getProposedValuesForAttribute(Element ee, String proposal) {
		List<String> rawValues = getProposedRawValuesForAttribute(ee, proposal);
		List<String> result = new ArrayList<String>();
		for (String elt : rawValues) {
			String[] split = elt.split("/");
			if (split.length>1) {
				assert(split[0].equals("expression"));
//				System.err.println("Type::"+split[1]);
				List<String> proposedValuesForType = typeProposalRegistry.get(split[1]);
				if ("any".equals(split[1])) {
					result.add("=;");
				} else {
					if(proposedValuesForType==null) {
//						System.err.println("Error proposing types for: "+elt);
						continue;
					}
					for (String p : proposedValuesForType) {
						result.add("="+p+";");
					}

				}
			} else {
				result.add(elt);
			}
		}

		return result;
	}
	
	
	
	
//	private Map findMapInModel(Element model) {
//		List<Element> children = model.getChildren();
//		for (Element element : children) {
//			if(element instanceof Map) {
//				return (Map) element;
//			}
//		}
//		return null;
//	}

	/**
	 * Get all valid values for a proposed attribute. May need post-processing
	 * @param ee
	 * @param proposal
	 * @return
	 */
	private List<String> getProposedRawValuesForAttribute(Element ee,
			String proposal) {
		if(ee instanceof Message) {
			java.util.Map<String, List<String>> msgPro = proposalRepository.get("message");
			return msgPro.get(proposal);
		}

		if(ee instanceof Property) {
			java.util.Map<String, List<String>> msgPro = proposalRepository.get("property");
			return msgPro.get(proposal);
		}
		List<String> result = new ArrayList<String>();
		if(ee instanceof Map) {
			Map m = (Map)ee;
			AdapterProposal aa = navajoContext.getAdapter(getCurrentProject(),m.getMapName());
			String type = aa.getTypeOfValue(proposal);
//			System.err.println("Looking for proposal: "+proposal+" map: "+m.getMapName()+" type: "+type);
			List<String> proposals = typeProposalRegistry.get(type);
			if(proposals!=null) {
				for (String current : proposals) {
					result.add("="+current+";");
				}
			}
		}
		return result;
	}


	private List<String> getAllowedAttributesForElement(Element ee) {
		List<String> result = new ArrayList<String>();
		if(ee instanceof Message) {
			java.util.Map<String, List<String>> msgPro = proposalRepository.get("message");
			for (String p : msgPro.keySet()) {
				result.add(p);
			}
//			for (String attr : MESSAGE_ATTRIBUTES) {
//				result.add(attr);
//			}
		}
		if(ee instanceof Property) {
			java.util.Map<String, List<String>> proPro = proposalRepository.get("property");
			for (String p : proPro.keySet()) {
				result.add(p);
			}
		}
		if(ee instanceof Map) {
			Map m = (Map)ee;
			AdapterProposal aa = navajoContext.getAdapter(getCurrentProject(),m.getMapName());
//			System.err.println("Looking for map: "+m.getMapName());
			if(aa!=null) {
				List<String> setters =  aa.getSetters();
				result.addAll(setters);
			} else {
				System.err.println("No such map!");
			}
		}
		
		for (PossibleExpression pe : ee.getAttributes()) {
			result.remove(pe.getKey());
		}
		return result;
	}


	@Override
	public void completeMap_MapClosingName(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if(model instanceof Map) {
			Map m = (Map)model;
			
			ICompletionProposal completionProposal = createCompletionProposal(m.getMapName()+">", m.getMapName(), null, context);
			acceptor.accept(completionProposal);
		}
		super.completeMap_MapClosingName(model, assignment, context, acceptor);
	}	
	

	
	public void complete_Map(EObject m, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		List<AdapterProposal> props = navajoContext.getAdapterProposals(getCurrentProject());
		for (AdapterProposal adapterProposal : props) {
			ICompletionProposal completionProposal = createCompletionProposal(adapterProposal.getFullProposal() , "map: "+adapterProposal.getTagName(), null, context);
			acceptor.accept(completionProposal);			
		}

		// Look for parent maps
		Map mm = getMapParent(m);
		if(mm!=null) {
			String mapName = mm.getMapName();
			AdapterProposal ap = navajoContext.getAdapter(getCurrentProject(),mapName);
			List<String> refs = ap.getMapRefProposals();
			for (String ref: refs) {
				ICompletionProposal completionProposal = createCompletionProposal(ref , "mapref: "+ref, null, context);
				acceptor.accept(completionProposal);			
			}
		}
		
		if(m instanceof Map) {
			Map currentMap = (Map) m;
			if(currentMap.getMapClosingName()==null) {
				ICompletionProposal completionProposal = createCompletionProposal("</map."+currentMap.getMapName()+">" , "</map."+currentMap.getMapName()+">", null, context);
				acceptor.accept(completionProposal);			
			}

			List<AdapterProposal> propos = navajoContext.getAdapterProposals(getCurrentProject());
			for (AdapterProposal adapterProposal : propos) {
				ICompletionProposal completionProposal = createCompletionProposal(adapterProposal.getFullProposal() , "map: "+adapterProposal.getTagName(), null, context);
				acceptor.accept(completionProposal);			
			}
		}
	}
	

//	public void complete_Map(Map model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
//		System.err.println("Completing submap(?) ");
//		debugElement(model);
//		if(model instanceof Map) {
//			Map m = (Map)model;
//			ICompletionProposal completionProposal = createCompletionProposal("</"+m.getMapClosingName()+">" , "</"+m.getMapClosingName()+">", null, context);
//			acceptor.accept(completionProposal);
//		} else {
//			
//			System.err.println("No, not a map but: "+model.getClass());
//		}
//	}
//
//	private void debugElement(Element model) {
//		if(model.getParent()!=null) {
//			System.err.println("Element: "+model.getClass()+ " parent = "+model.getParent().getClass());
//		} else {
//			System.err.println("Element: "+model.getClass()+ " parent = none");
//		}
//		for (Element e : model.getChildren()) {
//			System.err.println("CHILDreN------");
//			debugElement(e);
//		}
//		for (PossibleExpression e : model.getAttributes()) {
//			System.err.println("Attribute: "+e.getKey()+" value: "+e.getValue());
//			
//			
//		}
//		System.err.println("End of debug");
//	}

	public static void main(String[] args) throws Exception {
		System.setProperty("testmode", "true");
		 new TslProposalProvider();
		
	}
	
	
}
