/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.expression.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class NavajoExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevel");
		private final Assignment cToplevelExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cToplevelExpressionOrExpressionParserRuleCall_0 = (RuleCall)cToplevelExpressionAssignment.eContents().get(0);
		
		////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
		////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
		////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
		////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
		////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//TopLevel: //	 toplevelExpression =OrExpression
		//	toplevelExpression=OrExpression;
		public ParserRule getRule() { return rule; }

		////	 toplevelExpression =OrExpression
		//toplevelExpression=OrExpression
		public Assignment getToplevelExpressionAssignment() { return cToplevelExpressionAssignment; }

		//OrExpression
		public RuleCall getToplevelExpressionOrExpressionParserRuleCall_0() { return cToplevelExpressionOrExpressionParserRuleCall_0; }
	}

	public class PathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cPARENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// skipped url, image, points, datepattern, password
		////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
		//PathElement returns ecore::EString:
		//	ID | "." | PARENT;
		public ParserRule getRule() { return rule; }

		//ID | "." | PARENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//PARENT
		public RuleCall getPARENTTerminalRuleCall_2() { return cPARENTTerminalRuleCall_2; }
	}

	public class TmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSQBRACKET_OPENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cAbsoluteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbsoluteTML_SEPARATORTerminalRuleCall_1_0 = (RuleCall)cAbsoluteAssignment_1.eContents().get(0);
		private final Assignment cParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamATTerminalRuleCall_2_0 = (RuleCall)cParamAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPathElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cTML_SEPARATORTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final RuleCall cSQBRACKET_CLOSETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//TmlExpression returns TmlReference:
		//	SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
		//	SQBRACKET_CLOSE;
		public ParserRule getRule() { return rule; }

		//SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
		//SQBRACKET_CLOSE
		public Group getGroup() { return cGroup; }

		//SQBRACKET_OPEN
		public RuleCall getSQBRACKET_OPENTerminalRuleCall_0() { return cSQBRACKET_OPENTerminalRuleCall_0; }

		//absolute?=TML_SEPARATOR?
		public Assignment getAbsoluteAssignment_1() { return cAbsoluteAssignment_1; }

		//TML_SEPARATOR
		public RuleCall getAbsoluteTML_SEPARATORTerminalRuleCall_1_0() { return cAbsoluteTML_SEPARATORTerminalRuleCall_1_0; }

		//param?=AT?
		public Assignment getParamAssignment_2() { return cParamAssignment_2; }

		//AT
		public RuleCall getParamATTerminalRuleCall_2_0() { return cParamATTerminalRuleCall_2_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_3_0() { return cElementsPathElementParserRuleCall_3_0; }

		//(TML_SEPARATOR elements+=PathElement)*
		public Group getGroup_4() { return cGroup_4; }

		//TML_SEPARATOR
		public RuleCall getTML_SEPARATORTerminalRuleCall_4_0() { return cTML_SEPARATORTerminalRuleCall_4_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_4_1_0() { return cElementsPathElementParserRuleCall_4_1_0; }

		//SQBRACKET_CLOSE
		public RuleCall getSQBRACKET_CLOSETerminalRuleCall_5() { return cSQBRACKET_CLOSETerminalRuleCall_5; }
	}

	public class ExistsTmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsTmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTML_EXISTSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSQBRACKET_OPENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAbsoluteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAbsoluteTML_SEPARATORTerminalRuleCall_2_0 = (RuleCall)cAbsoluteAssignment_2.eContents().get(0);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamATTerminalRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPathElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cTML_SEPARATORTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final RuleCall cSQBRACKET_CLOSETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//ExistsTmlExpression returns ExistsTmlReference:
		//	TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
		//	elements+=PathElement)* SQBRACKET_CLOSE;
		public ParserRule getRule() { return rule; }

		//TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
		//elements+=PathElement)* SQBRACKET_CLOSE
		public Group getGroup() { return cGroup; }

		//TML_EXISTS
		public RuleCall getTML_EXISTSTerminalRuleCall_0() { return cTML_EXISTSTerminalRuleCall_0; }

		//SQBRACKET_OPEN
		public RuleCall getSQBRACKET_OPENTerminalRuleCall_1() { return cSQBRACKET_OPENTerminalRuleCall_1; }

		//absolute?=TML_SEPARATOR?
		public Assignment getAbsoluteAssignment_2() { return cAbsoluteAssignment_2; }

		//TML_SEPARATOR
		public RuleCall getAbsoluteTML_SEPARATORTerminalRuleCall_2_0() { return cAbsoluteTML_SEPARATORTerminalRuleCall_2_0; }

		//param?=AT?
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }

		//AT
		public RuleCall getParamATTerminalRuleCall_3_0() { return cParamATTerminalRuleCall_3_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_4_0() { return cElementsPathElementParserRuleCall_4_0; }

		//(TML_SEPARATOR elements+=PathElement)*
		public Group getGroup_5() { return cGroup_5; }

		//TML_SEPARATOR
		public RuleCall getTML_SEPARATORTerminalRuleCall_5_0() { return cTML_SEPARATORTerminalRuleCall_5_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_5_1_0() { return cElementsPathElementParserRuleCall_5_1_0; }

		//SQBRACKET_CLOSE
		public RuleCall getSQBRACKET_CLOSETerminalRuleCall_6() { return cSQBRACKET_CLOSETerminalRuleCall_6; }
	}

	public class MapReferenceParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapReferenceParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGetterParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGetterParamsLiteralParserRuleCall_1_0 = (RuleCall)cGetterParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGetterParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGetterParamsLiteralParserRuleCall_2_1_0 = (RuleCall)cGetterParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapReferenceParams returns ReferenceParams:
		//	"(" getterParams+=Literal ("," getterParams+=Literal)* ")";
		public ParserRule getRule() { return rule; }

		//"(" getterParams+=Literal ("," getterParams+=Literal)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//getterParams+=Literal
		public Assignment getGetterParamsAssignment_1() { return cGetterParamsAssignment_1; }

		//Literal
		public RuleCall getGetterParamsLiteralParserRuleCall_1_0() { return cGetterParamsLiteralParserRuleCall_1_0; }

		//("," getterParams+=Literal)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//getterParams+=Literal
		public Assignment getGetterParamsAssignment_2_1() { return cGetterParamsAssignment_2_1; }

		//Literal
		public RuleCall getGetterParamsLiteralParserRuleCall_2_1_0() { return cGetterParamsLiteralParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MapGetReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapGetReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationsDOLLARTerminalRuleCall_0_0 = (RuleCall)cOperationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsPARENTTerminalRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final RuleCall cTML_SEPARATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsIDTerminalRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Assignment cReferenceParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReferenceParamsMapReferenceParamsParserRuleCall_3_0 = (RuleCall)cReferenceParamsAssignment_3.eContents().get(0);
		
		//MapGetReference:
		//	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?;
		public ParserRule getRule() { return rule; }

		//operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?
		public Group getGroup() { return cGroup; }

		//operations+=DOLLAR
		public Assignment getOperationsAssignment_0() { return cOperationsAssignment_0; }

		//DOLLAR
		public RuleCall getOperationsDOLLARTerminalRuleCall_0_0() { return cOperationsDOLLARTerminalRuleCall_0_0; }

		//(elements+=PARENT TML_SEPARATOR)*
		public Group getGroup_1() { return cGroup_1; }

		//elements+=PARENT
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//PARENT
		public RuleCall getElementsPARENTTerminalRuleCall_1_0_0() { return cElementsPARENTTerminalRuleCall_1_0_0; }

		//TML_SEPARATOR
		public RuleCall getTML_SEPARATORTerminalRuleCall_1_1() { return cTML_SEPARATORTerminalRuleCall_1_1; }

		//elements+=ID
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//ID
		public RuleCall getElementsIDTerminalRuleCall_2_0() { return cElementsIDTerminalRuleCall_2_0; }

		//referenceParams=MapReferenceParams?
		public Assignment getReferenceParamsAssignment_3() { return cReferenceParamsAssignment_3; }

		//MapReferenceParams
		public RuleCall getReferenceParamsMapReferenceParamsParserRuleCall_3_0() { return cReferenceParamsMapReferenceParamsParserRuleCall_3_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersAndExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperationsORKeyword_1_0_0 = (Keyword)cOperationsAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersAndExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_0_0() { return cParametersAndExpressionParserRuleCall_0_0; }

		//(operations+="OR" parameters+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operations+="OR"
		public Assignment getOperationsAssignment_1_0() { return cOperationsAssignment_1_0; }

		//"OR"
		public Keyword getOperationsORKeyword_1_0_0() { return cOperationsORKeyword_1_0_0; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_1_1_0() { return cParametersAndExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperationsANDKeyword_1_0_0 = (Keyword)cOperationsAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_0_0() { return cParametersEqualityExpressionParserRuleCall_0_0; }

		//(operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operations+="AND"
		public Assignment getOperationsAssignment_1_0() { return cOperationsAssignment_1_0; }

		//"AND"
		public Keyword getOperationsANDKeyword_1_0_0() { return cOperationsANDKeyword_1_0_0; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_1_1_0() { return cParametersEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersRelationalExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cOperationsEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOperationsAssignment_1_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersRelationalExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cOperationsExclamationMarkEqualsSignKeyword_1_1_0_0 = (Keyword)cOperationsAssignment_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersRelationalExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	parameters+=RelationalExpression (operations+="==" parameters+=RelationalExpression | operations+="!="
		//	parameters+=RelationalExpression)?;
		public ParserRule getRule() { return rule; }

		//parameters+=RelationalExpression (operations+="==" parameters+=RelationalExpression | operations+="!="
		//parameters+=RelationalExpression)?
		public Group getGroup() { return cGroup; }

		//parameters+=RelationalExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//RelationalExpression
		public RuleCall getParametersRelationalExpressionParserRuleCall_0_0() { return cParametersRelationalExpressionParserRuleCall_0_0; }

		//(operations+="==" parameters+=RelationalExpression | operations+="!=" parameters+=RelationalExpression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//operations+="==" parameters+=RelationalExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//operations+="=="
		public Assignment getOperationsAssignment_1_0_0() { return cOperationsAssignment_1_0_0; }

		//"=="
		public Keyword getOperationsEqualsSignEqualsSignKeyword_1_0_0_0() { return cOperationsEqualsSignEqualsSignKeyword_1_0_0_0; }

		//parameters+=RelationalExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//RelationalExpression
		public RuleCall getParametersRelationalExpressionParserRuleCall_1_0_1_0() { return cParametersRelationalExpressionParserRuleCall_1_0_1_0; }

		//operations+="!=" parameters+=RelationalExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operations+="!="
		public Assignment getOperationsAssignment_1_1_0() { return cOperationsAssignment_1_1_0; }

		//"!="
		public Keyword getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0() { return cOperationsExclamationMarkEqualsSignKeyword_1_1_0_0; }

		//parameters+=RelationalExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//RelationalExpression
		public RuleCall getParametersRelationalExpressionParserRuleCall_1_1_1_0() { return cParametersRelationalExpressionParserRuleCall_1_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOperationsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cOperationsXML_LTTerminalRuleCall_2_0_0_0 = (RuleCall)cOperationsAssignment_2_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOperationsXML_GTTerminalRuleCall_2_1_0_0 = (RuleCall)cOperationsAssignment_2_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cOperationsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cOperationsXML_LTEQTerminalRuleCall_2_2_0_0 = (RuleCall)cOperationsAssignment_2_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Assignment cOperationsAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cOperationsXML_GTEQTerminalRuleCall_2_3_0_0 = (RuleCall)cOperationsAssignment_2_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_3_1_0 = (RuleCall)cParametersAssignment_2_3_1.eContents().get(0);
		
		//// Skipped for now. Trouble with overloaded '<' stuff  
		//RelationalExpression returns Expression:
		//	{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
		//	parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
		//	parameters+=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
		//parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
		//parameters+=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_1_0() { return cParametersAdditiveExpressionParserRuleCall_1_0; }

		//(operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT parameters+=AdditiveExpression |
		//operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ parameters+=AdditiveExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//operations+=XML_LT parameters+=AdditiveExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//operations+=XML_LT
		public Assignment getOperationsAssignment_2_0_0() { return cOperationsAssignment_2_0_0; }

		//XML_LT
		public RuleCall getOperationsXML_LTTerminalRuleCall_2_0_0_0() { return cOperationsXML_LTTerminalRuleCall_2_0_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_0_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_0_1_0; }

		//operations+=XML_GT parameters+=AdditiveExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//operations+=XML_GT
		public Assignment getOperationsAssignment_2_1_0() { return cOperationsAssignment_2_1_0; }

		//XML_GT
		public RuleCall getOperationsXML_GTTerminalRuleCall_2_1_0_0() { return cOperationsXML_GTTerminalRuleCall_2_1_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_1_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_1_1_0; }

		//operations+=XML_LTEQ parameters+=AdditiveExpression
		public Group getGroup_2_2() { return cGroup_2_2; }

		//operations+=XML_LTEQ
		public Assignment getOperationsAssignment_2_2_0() { return cOperationsAssignment_2_2_0; }

		//XML_LTEQ
		public RuleCall getOperationsXML_LTEQTerminalRuleCall_2_2_0_0() { return cOperationsXML_LTEQTerminalRuleCall_2_2_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_2_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_2_1_0; }

		//operations+=XML_GTEQ parameters+=AdditiveExpression
		public Group getGroup_2_3() { return cGroup_2_3; }

		//operations+=XML_GTEQ
		public Assignment getOperationsAssignment_2_3_0() { return cOperationsAssignment_2_3_0; }

		//XML_GTEQ
		public RuleCall getOperationsXML_GTEQTerminalRuleCall_2_3_0_0() { return cOperationsXML_GTEQTerminalRuleCall_2_3_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_3_1() { return cParametersAssignment_2_3_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_3_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_3_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//	parameters+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//parameters+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_0_0() { return cParametersMultiplicativeExpressionParserRuleCall_0_0; }

		//("+" parameters+=MultiplicativeExpression | "-" parameters+=MultiplicativeExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+" parameters+=MultiplicativeExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_1_0_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_1_0_1_0; }

		//"-" parameters+=MultiplicativeExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_1_1_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_1_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cOperationsAsteriskKeyword_1_0_0_0 = (Keyword)cOperationsAssignment_1_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0 = (RuleCall)cOperationsAssignment_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR
		//	parameters+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR
		//parameters+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_0_0() { return cParametersUnaryExpressionParserRuleCall_0_0; }

		//(operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR parameters+=UnaryExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//operations+="*" parameters+=UnaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//operations+="*"
		public Assignment getOperationsAssignment_1_0_0() { return cOperationsAssignment_1_0_0; }

		//"*"
		public Keyword getOperationsAsteriskKeyword_1_0_0_0() { return cOperationsAsteriskKeyword_1_0_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_1_0_1_0() { return cParametersUnaryExpressionParserRuleCall_1_0_1_0; }

		//operations+=TML_SEPARATOR parameters+=UnaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operations+=TML_SEPARATOR
		public Assignment getOperationsAssignment_1_1_0() { return cOperationsAssignment_1_1_0; }

		//TML_SEPARATOR
		public RuleCall getOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0() { return cOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_1_1_1_0() { return cParametersUnaryExpressionParserRuleCall_1_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOperationsExclamationMarkKeyword_0_0_0 = (Keyword)cOperationsAssignment_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParametersPrimaryExpressionParserRuleCall_0_1_0 = (RuleCall)cParametersAssignment_0_1.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//operations+="!" parameters+=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//operations+="!" parameters+=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//operations+="!"
		public Assignment getOperationsAssignment_0_0() { return cOperationsAssignment_0_0; }

		//"!"
		public Keyword getOperationsExclamationMarkKeyword_0_0_0() { return cOperationsExclamationMarkKeyword_0_0_0; }

		//parameters+=PrimaryExpression
		public Assignment getParametersAssignment_0_1() { return cParametersAssignment_0_1; }

		//PrimaryExpression
		public RuleCall getParametersPrimaryExpressionParserRuleCall_0_1_0() { return cParametersPrimaryExpressionParserRuleCall_0_1_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParametersLiteralParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	parameters+=Literal | "(" parameters+=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//parameters+=Literal | "(" parameters+=OrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//parameters+=Literal
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//Literal
		public RuleCall getParametersLiteralParserRuleCall_0_0() { return cParametersLiteralParserRuleCall_0_0; }

		//"(" parameters+=OrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_1_0() { return cParametersOrExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Keep this one in place so it will create a node for the code completion
		//FunctionName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")"
		public Group getGroup() { return cGroup; }

		//name=FunctionName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_0() { return cNameFunctionNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_0() { return cParametersOrExpressionParserRuleCall_2_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_3_1_0() { return cParametersOrExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNUMBERTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cNumberSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNUMBERTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cNumberSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cNUMBERTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cNumberSignKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cNUMBERTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		////void DatePatternLiteral() #void:
		////{}
		////{
		////  (Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()) #DatePatternNode
		////}
		////Expression returns Expression:
		////	Literal | FunctionCall | FunctionOperands ;
		//DateLiteral returns Expression:
		//	{Expression} NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER;
		public ParserRule getRule() { return rule; }

		//{Expression} NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }

		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_3() { return cNUMBERTerminalRuleCall_3; }

		//"#"
		public Keyword getNumberSignKeyword_4() { return cNumberSignKeyword_4; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_5() { return cNUMBERTerminalRuleCall_5; }

		//"#"
		public Keyword getNumberSignKeyword_6() { return cNumberSignKeyword_6; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_7() { return cNUMBERTerminalRuleCall_7; }

		//"#"
		public Keyword getNumberSignKeyword_8() { return cNumberSignKeyword_8; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_9() { return cNUMBERTerminalRuleCall_9; }

		//"#"
		public Keyword getNumberSignKeyword_10() { return cNumberSignKeyword_10; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_11() { return cNUMBERTerminalRuleCall_11; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cValueStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueStringAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperationsFORALLTerminalRuleCall_2_0_0 = (RuleCall)cOperationsAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueStringAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cValueStringAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cParametersAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_4_0 = (RuleCall)cParametersAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cParametersAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cParametersFunctionCallParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cExpressionTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExpressionTypeLeftCurlyBracketKeyword_4_0_0 = (Keyword)cExpressionTypeAssignment_4_0.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_4_2_1_0 = (RuleCall)cParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cElementsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cElementsNULLTerminalRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cElementsTODAYTerminalRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cElementsTRUETerminalRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Assignment cElementsAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cElementsFALSETerminalRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Assignment cParametersAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cParametersTmlExpressionParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Assignment cParametersAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cParametersExistsTmlExpressionParserRuleCall_10_0 = (RuleCall)cParametersAssignment_10.eContents().get(0);
		private final Assignment cParametersAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cParametersMapGetReferenceParserRuleCall_11_0 = (RuleCall)cParametersAssignment_11.eContents().get(0);
		private final Assignment cParametersAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cParametersDateLiteralParserRuleCall_12_0 = (RuleCall)cParametersAssignment_12.eContents().get(0);
		
		//Literal returns Expression:
		//	{Expression} NUMBER | valueString=LITERALSTRING | operations+=FORALL "(" valueString=LITERALSTRING ","
		//	parameters+=OrExpression ")" | parameters+=FunctionCall | expressionType="{" parameters+=OrExpression? (","
		//	parameters+=OrExpression)* "}" | elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE |
		//	parameters+=TmlExpression | parameters+=ExistsTmlExpression | parameters+=MapGetReference | parameters+=DateLiteral;
		public ParserRule getRule() { return rule; }

		//{Expression} NUMBER | valueString=LITERALSTRING | operations+=FORALL "(" valueString=LITERALSTRING ","
		//parameters+=OrExpression ")" | parameters+=FunctionCall | expressionType="{" parameters+=OrExpression? (","
		//parameters+=OrExpression)* "}" | elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE |
		//parameters+=TmlExpression | parameters+=ExistsTmlExpression | parameters+=MapGetReference | parameters+=DateLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} NUMBER
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0_1() { return cNUMBERTerminalRuleCall_0_1; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_1() { return cValueStringAssignment_1; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_1_0() { return cValueStringLITERALSTRINGTerminalRuleCall_1_0; }

		//operations+=FORALL "(" valueString=LITERALSTRING "," parameters+=OrExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//operations+=FORALL
		public Assignment getOperationsAssignment_2_0() { return cOperationsAssignment_2_0; }

		//FORALL
		public RuleCall getOperationsFORALLTerminalRuleCall_2_0_0() { return cOperationsFORALLTerminalRuleCall_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_2_2() { return cValueStringAssignment_2_2; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_2_2_0() { return cValueStringLITERALSTRINGTerminalRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_2_4() { return cParametersAssignment_2_4; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_4_0() { return cParametersOrExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//parameters+=FunctionCall
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//FunctionCall
		public RuleCall getParametersFunctionCallParserRuleCall_3_0() { return cParametersFunctionCallParserRuleCall_3_0; }

		//expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//expressionType="{"
		public Assignment getExpressionTypeAssignment_4_0() { return cExpressionTypeAssignment_4_0; }

		//"{"
		public Keyword getExpressionTypeLeftCurlyBracketKeyword_4_0_0() { return cExpressionTypeLeftCurlyBracketKeyword_4_0_0; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_4_1_0() { return cParametersOrExpressionParserRuleCall_4_1_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_4_2_1() { return cParametersAssignment_4_2_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_4_2_1_0() { return cParametersOrExpressionParserRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//elements+=NULL
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//NULL
		public RuleCall getElementsNULLTerminalRuleCall_5_0() { return cElementsNULLTerminalRuleCall_5_0; }

		//elements+=TODAY
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//TODAY
		public RuleCall getElementsTODAYTerminalRuleCall_6_0() { return cElementsTODAYTerminalRuleCall_6_0; }

		//elements+=TRUE
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//TRUE
		public RuleCall getElementsTRUETerminalRuleCall_7_0() { return cElementsTRUETerminalRuleCall_7_0; }

		//elements+=FALSE
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//FALSE
		public RuleCall getElementsFALSETerminalRuleCall_8_0() { return cElementsFALSETerminalRuleCall_8_0; }

		//parameters+=TmlExpression
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }

		//TmlExpression
		public RuleCall getParametersTmlExpressionParserRuleCall_9_0() { return cParametersTmlExpressionParserRuleCall_9_0; }

		//parameters+=ExistsTmlExpression
		public Assignment getParametersAssignment_10() { return cParametersAssignment_10; }

		//ExistsTmlExpression
		public RuleCall getParametersExistsTmlExpressionParserRuleCall_10_0() { return cParametersExistsTmlExpressionParserRuleCall_10_0; }

		//parameters+=MapGetReference
		public Assignment getParametersAssignment_11() { return cParametersAssignment_11; }

		//MapGetReference
		public RuleCall getParametersMapGetReferenceParserRuleCall_11_0() { return cParametersMapGetReferenceParserRuleCall_11_0; }

		//parameters+=DateLiteral
		public Assignment getParametersAssignment_12() { return cParametersAssignment_12; }

		//DateLiteral
		public RuleCall getParametersDateLiteralParserRuleCall_12_0() { return cParametersDateLiteralParserRuleCall_12_0; }
	}
	
	
	private TopLevelElements pTopLevel;
	private TerminalRule tXML_GT;
	private TerminalRule tXML_LT;
	private TerminalRule tXML_GTEQ;
	private TerminalRule tXML_LTEQ;
	private TerminalRule tNUMBER;
	private TerminalRule tWS;
	private TerminalRule tTRUE;
	private TerminalRule tFALSE;
	private TerminalRule tNULL;
	private TerminalRule tTODAY;
	private TerminalRule tFORALL;
	private TerminalRule tPARENT;
	private TerminalRule tID;
	private TerminalRule tAT;
	private TerminalRule tLITERALSTRING;
	private TerminalRule tSQBRACKET_OPEN;
	private TerminalRule tSQBRACKET_CLOSE;
	private TerminalRule tTML_SEPARATOR;
	private TerminalRule tTML_EXISTS;
	private TerminalRule tDOLLAR;
	private PathElementElements pPathElement;
	private TmlExpressionElements pTmlExpression;
	private ExistsTmlExpressionElements pExistsTmlExpression;
	private MapReferenceParamsElements pMapReferenceParams;
	private MapGetReferenceElements pMapGetReference;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private RelationalExpressionElements pRelationalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private FunctionNameElements pFunctionName;
	private FunctionCallElements pFunctionCall;
	private DateLiteralElements pDateLiteral;
	private LiteralElements pLiteral;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public NavajoExpressionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
	////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
	////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
	////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//TopLevel: //	 toplevelExpression =OrExpression
	//	toplevelExpression=OrExpression;
	public TopLevelElements getTopLevelAccess() {
		return (pTopLevel != null) ? pTopLevel : (pTopLevel = new TopLevelElements());
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	////terminal INT returns ecore::EString: ('0'..'9')+;
	//terminal XML_GT:
	//	"&gt;";
	public TerminalRule getXML_GTRule() {
		return (tXML_GT != null) ? tXML_GT : (tXML_GT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_GT"));
	} 

	//terminal XML_LT:
	//	"&lt;";
	public TerminalRule getXML_LTRule() {
		return (tXML_LT != null) ? tXML_LT : (tXML_LT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_LT"));
	} 

	//terminal XML_GTEQ:
	//	"&gt;=";
	public TerminalRule getXML_GTEQRule() {
		return (tXML_GTEQ != null) ? tXML_GTEQ : (tXML_GTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_GTEQ"));
	} 

	//terminal XML_LTEQ:
	//	"&lt;=";
	public TerminalRule getXML_LTEQRule() {
		return (tXML_LTEQ != null) ? tXML_LTEQ : (tXML_LTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_LTEQ"));
	} 

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal TRUE:
	//	"true" | "TRUE";
	public TerminalRule getTRUERule() {
		return (tTRUE != null) ? tTRUE : (tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE"));
	} 

	//terminal FALSE:
	//	"false" | "FALSE";
	public TerminalRule getFALSERule() {
		return (tFALSE != null) ? tFALSE : (tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE"));
	} 

	//terminal NULL:
	//	"null" | "NULL";
	public TerminalRule getNULLRule() {
		return (tNULL != null) ? tNULL : (tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NULL"));
	} 

	//terminal TODAY:
	//	"today" | "TODAY";
	public TerminalRule getTODAYRule() {
		return (tTODAY != null) ? tTODAY : (tTODAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TODAY"));
	} 

	//terminal FORALL:
	//	"FORALL";
	public TerminalRule getFORALLRule() {
		return (tFORALL != null) ? tFORALL : (tFORALL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FORALL"));
	} 

	//terminal PARENT:
	//	"..";
	public TerminalRule getPARENTRule() {
		return (tPARENT != null) ? tPARENT : (tPARENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return (tAT != null) ? tAT : (tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AT"));
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'" | "<![CDATA["->"]]>";
	public TerminalRule getLITERALSTRINGRule() {
		return (tLITERALSTRING != null) ? tLITERALSTRING : (tLITERALSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LITERALSTRING"));
	} 

	//terminal SQBRACKET_OPEN:
	//	"[";
	public TerminalRule getSQBRACKET_OPENRule() {
		return (tSQBRACKET_OPEN != null) ? tSQBRACKET_OPEN : (tSQBRACKET_OPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SQBRACKET_OPEN"));
	} 

	//terminal SQBRACKET_CLOSE:
	//	"]";
	public TerminalRule getSQBRACKET_CLOSERule() {
		return (tSQBRACKET_CLOSE != null) ? tSQBRACKET_CLOSE : (tSQBRACKET_CLOSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SQBRACKET_CLOSE"));
	} 

	//terminal TML_SEPARATOR:
	//	"/";
	public TerminalRule getTML_SEPARATORRule() {
		return (tTML_SEPARATOR != null) ? tTML_SEPARATOR : (tTML_SEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TML_SEPARATOR"));
	} 

	//terminal TML_EXISTS:
	//	"?";
	public TerminalRule getTML_EXISTSRule() {
		return (tTML_EXISTS != null) ? tTML_EXISTS : (tTML_EXISTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TML_EXISTS"));
	} 

	//terminal DOLLAR:
	//	"$";
	public TerminalRule getDOLLARRule() {
		return (tDOLLAR != null) ? tDOLLAR : (tDOLLAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOLLAR"));
	} 

	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | PARENT;
	public PathElementElements getPathElementAccess() {
		return (pPathElement != null) ? pPathElement : (pPathElement = new PathElementElements());
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//TmlExpression returns TmlReference:
	//	SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
	//	SQBRACKET_CLOSE;
	public TmlExpressionElements getTmlExpressionAccess() {
		return (pTmlExpression != null) ? pTmlExpression : (pTmlExpression = new TmlExpressionElements());
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ExistsTmlReference:
	//	TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
	//	elements+=PathElement)* SQBRACKET_CLOSE;
	public ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return (pExistsTmlExpression != null) ? pExistsTmlExpression : (pExistsTmlExpression = new ExistsTmlExpressionElements());
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//MapReferenceParams returns ReferenceParams:
	//	"(" getterParams+=Literal ("," getterParams+=Literal)* ")";
	public MapReferenceParamsElements getMapReferenceParamsAccess() {
		return (pMapReferenceParams != null) ? pMapReferenceParams : (pMapReferenceParams = new MapReferenceParamsElements());
	}
	
	public ParserRule getMapReferenceParamsRule() {
		return getMapReferenceParamsAccess().getRule();
	}

	//MapGetReference:
	//	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?;
	public MapGetReferenceElements getMapGetReferenceAccess() {
		return (pMapGetReference != null) ? pMapGetReference : (pMapGetReference = new MapGetReferenceElements());
	}
	
	public ParserRule getMapGetReferenceRule() {
		return getMapGetReferenceAccess().getRule();
	}

	//OrExpression returns Expression:
	//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	parameters+=RelationalExpression (operations+="==" parameters+=RelationalExpression | operations+="!="
	//	parameters+=RelationalExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	//RelationalExpression returns Expression:
	//	{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
	//	parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
	//	parameters+=AdditiveExpression)?;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return (pRelationalExpression != null) ? pRelationalExpression : (pRelationalExpression = new RelationalExpressionElements());
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
	//	parameters+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR
	//	parameters+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	parameters+=Literal | "(" parameters+=OrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Keep this one in place so it will create a node for the code completion
	//FunctionName:
	//	ID;
	public FunctionNameElements getFunctionNameAccess() {
		return (pFunctionName != null) ? pFunctionName : (pFunctionName = new FunctionNameElements());
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	////void DatePatternLiteral() #void:
	////{}
	////{
	////  (Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()) #DatePatternNode
	////}
	////Expression returns Expression:
	////	Literal | FunctionCall | FunctionOperands ;
	//DateLiteral returns Expression:
	//	{Expression} NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER;
	public DateLiteralElements getDateLiteralAccess() {
		return (pDateLiteral != null) ? pDateLiteral : (pDateLiteral = new DateLiteralElements());
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//Literal returns Expression:
	//	{Expression} NUMBER | valueString=LITERALSTRING | operations+=FORALL "(" valueString=LITERALSTRING ","
	//	parameters+=OrExpression ")" | parameters+=FunctionCall | expressionType="{" parameters+=OrExpression? (","
	//	parameters+=OrExpression)* "}" | elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE |
	//	parameters+=TmlExpression | parameters+=ExistsTmlExpression | parameters+=MapGetReference | parameters+=DateLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
