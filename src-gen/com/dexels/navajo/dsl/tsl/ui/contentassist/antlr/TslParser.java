/*
* generated by Xtext
*/
package com.dexels.navajo.dsl.tsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.dexels.navajo.dsl.tsl.services.TslGrammarAccess;

public class TslParser extends AbstractContentAssistParser {
	
	@Inject
	private TslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.dexels.navajo.dsl.tsl.ui.contentassist.antlr.internal.InternalTslParser createParser() {
		com.dexels.navajo.dsl.tsl.ui.contentassist.antlr.internal.InternalTslParser result = new com.dexels.navajo.dsl.tsl.ui.contentassist.antlr.internal.InternalTslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTmlAccess().getAlternatives_3(), "rule__Tml__Alternatives_3");
					put(grammarAccess.getTmlAccess().getAlternatives_3_0_1(), "rule__Tml__Alternatives_3_0_1");
					put(grammarAccess.getPossibleExpressionAccess().getAlternatives_2(), "rule__PossibleExpression__Alternatives_2");
					put(grammarAccess.getMessageAccess().getAlternatives_3(), "rule__Message__Alternatives_3");
					put(grammarAccess.getMessageAccess().getAlternatives_3_0_1(), "rule__Message__Alternatives_3_0_1");
					put(grammarAccess.getMapAccess().getAlternatives_3(), "rule__Map__Alternatives_3");
					put(grammarAccess.getMapAccess().getAlternatives_3_1_1(), "rule__Map__Alternatives_3_1_1");
					put(grammarAccess.getPropertyAccess().getAlternatives_3(), "rule__Property__Alternatives_3");
					put(grammarAccess.getPathElementAccess().getAlternatives(), "rule__PathElement__Alternatives");
					put(grammarAccess.getEqualityExpressionAccess().getAlternatives_2(), "rule__EqualityExpression__Alternatives_2");
					put(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2(), "rule__AdditiveExpression__Alternatives_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2(), "rule__MultiplicativeExpression__Alternatives_2");
					put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getTmlAccess().getGroup(), "rule__Tml__Group__0");
					put(grammarAccess.getTmlAccess().getGroup_3_0(), "rule__Tml__Group_3_0__0");
					put(grammarAccess.getPossibleExpressionAccess().getGroup(), "rule__PossibleExpression__Group__0");
					put(grammarAccess.getPossibleExpressionAccess().getGroup_2_0(), "rule__PossibleExpression__Group_2_0__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getMessageAccess().getGroup_3_0(), "rule__Message__Group_3_0__0");
					put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
					put(grammarAccess.getMapAccess().getGroup_3_1(), "rule__Map__Group_3_1__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_3_1(), "rule__Property__Group_3_1__0");
					put(grammarAccess.getExpressionTagAccess().getGroup(), "rule__ExpressionTag__Group__0");
					put(grammarAccess.getPathSequenceAccess().getGroup(), "rule__PathSequence__Group__0");
					put(grammarAccess.getPathSequenceAccess().getGroup_3(), "rule__PathSequence__Group_3__0");
					put(grammarAccess.getExistsTmlExpressionAccess().getGroup(), "rule__ExistsTmlExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_2(), "rule__OrExpression__Group_2__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_2(), "rule__AndExpression__Group_2__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_2_0(), "rule__EqualityExpression__Group_2_0__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_2_1(), "rule__EqualityExpression__Group_2_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_2_0(), "rule__AdditiveExpression__Group_2_0__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_2_1(), "rule__AdditiveExpression__Group_2_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0(), "rule__MultiplicativeExpression__Group_2_0__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_1(), "rule__MultiplicativeExpression__Group_2_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getFunctionOperandsAccess().getGroup(), "rule__FunctionOperands__Group__0");
					put(grammarAccess.getFunctionOperandsAccess().getGroup_2(), "rule__FunctionOperands__Group_2__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
					put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_3(), "rule__Literal__Group_3__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getLiteralAccess().getGroup_4_3(), "rule__Literal__Group_4_3__0");
					put(grammarAccess.getLiteralAccess().getGroup_5(), "rule__Literal__Group_5__0");
					put(grammarAccess.getLiteralAccess().getGroup_6(), "rule__Literal__Group_6__0");
					put(grammarAccess.getLiteralAccess().getGroup_7(), "rule__Literal__Group_7__0");
					put(grammarAccess.getLiteralAccess().getGroup_8(), "rule__Literal__Group_8__0");
					put(grammarAccess.getTmlAccess().getAttributesAssignment_2(), "rule__Tml__AttributesAssignment_2");
					put(grammarAccess.getTmlAccess().getMessagesAssignment_3_0_1_0(), "rule__Tml__MessagesAssignment_3_0_1_0");
					put(grammarAccess.getTmlAccess().getMapsAssignment_3_0_1_1(), "rule__Tml__MapsAssignment_3_0_1_1");
					put(grammarAccess.getPossibleExpressionAccess().getKeyAssignment_0(), "rule__PossibleExpression__KeyAssignment_0");
					put(grammarAccess.getPossibleExpressionAccess().getExpressionValueAssignment_2_0_1(), "rule__PossibleExpression__ExpressionValueAssignment_2_0_1");
					put(grammarAccess.getPossibleExpressionAccess().getValueAssignment_2_1(), "rule__PossibleExpression__ValueAssignment_2_1");
					put(grammarAccess.getMessageAccess().getAttributesAssignment_2(), "rule__Message__AttributesAssignment_2");
					put(grammarAccess.getMessageAccess().getMessagesAssignment_3_0_1_0(), "rule__Message__MessagesAssignment_3_0_1_0");
					put(grammarAccess.getMessageAccess().getPropertiesAssignment_3_0_1_1(), "rule__Message__PropertiesAssignment_3_0_1_1");
					put(grammarAccess.getMessageAccess().getMapsAssignment_3_0_1_2(), "rule__Message__MapsAssignment_3_0_1_2");
					put(grammarAccess.getMapAccess().getMapNameAssignment_1(), "rule__Map__MapNameAssignment_1");
					put(grammarAccess.getMapAccess().getAttributesAssignment_2(), "rule__Map__AttributesAssignment_2");
					put(grammarAccess.getMapAccess().getMessagesAssignment_3_1_1_0(), "rule__Map__MessagesAssignment_3_1_1_0");
					put(grammarAccess.getMapAccess().getPropertiesAssignment_3_1_1_1(), "rule__Map__PropertiesAssignment_3_1_1_1");
					put(grammarAccess.getMapAccess().getMapsAssignment_3_1_1_2(), "rule__Map__MapsAssignment_3_1_1_2");
					put(grammarAccess.getMapAccess().getMapClosingNameAssignment_3_1_3(), "rule__Map__MapClosingNameAssignment_3_1_3");
					put(grammarAccess.getPropertyAccess().getAttributesAssignment_2(), "rule__Property__AttributesAssignment_2");
					put(grammarAccess.getPropertyAccess().getExpressionValueAssignment_3_1_1(), "rule__Property__ExpressionValueAssignment_3_1_1");
					put(grammarAccess.getExpressionTagAccess().getValueAssignment_1(), "rule__ExpressionTag__ValueAssignment_1");
					put(grammarAccess.getExpressionAccess().getExpressionAssignment(), "rule__Expression__ExpressionAssignment");
					put(grammarAccess.getOrExpressionAccess().getOperandsAssignment_1(), "rule__OrExpression__OperandsAssignment_1");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_2_0(), "rule__OrExpression__OpAssignment_2_0");
					put(grammarAccess.getOrExpressionAccess().getOperandsAssignment_2_1(), "rule__OrExpression__OperandsAssignment_2_1");
					put(grammarAccess.getAndExpressionAccess().getOperandsAssignment_1(), "rule__AndExpression__OperandsAssignment_1");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_2_0(), "rule__AndExpression__OpAssignment_2_0");
					put(grammarAccess.getAndExpressionAccess().getOperandsAssignment_2_1(), "rule__AndExpression__OperandsAssignment_2_1");
					put(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_1(), "rule__EqualityExpression__OperandsAssignment_1");
					put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0(), "rule__EqualityExpression__OpAssignment_2_0_0");
					put(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_0_1(), "rule__EqualityExpression__OperandsAssignment_2_0_1");
					put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_1_0(), "rule__EqualityExpression__OpAssignment_2_1_0");
					put(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_1_1(), "rule__EqualityExpression__OperandsAssignment_2_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_1(), "rule__AdditiveExpression__OperandsAssignment_1");
					put(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_0_1(), "rule__AdditiveExpression__OperandsAssignment_2_0_1");
					put(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_1_1(), "rule__AdditiveExpression__OperandsAssignment_2_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_1(), "rule__MultiplicativeExpression__OperandsAssignment_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0(), "rule__MultiplicativeExpression__OpAssignment_2_0_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_0_1(), "rule__MultiplicativeExpression__OperandsAssignment_2_0_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_1_0(), "rule__MultiplicativeExpression__OpAssignment_2_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_1_1(), "rule__MultiplicativeExpression__OperandsAssignment_2_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1(), "rule__UnaryExpression__OpAssignment_0_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandsAssignment_0_2(), "rule__UnaryExpression__OperandsAssignment_0_2");
					put(grammarAccess.getPrimaryExpressionAccess().getOperandsAssignment_0_1(), "rule__PrimaryExpression__OperandsAssignment_0_1");
					put(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_1(), "rule__FunctionOperands__OperandsAssignment_1");
					put(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_2_1(), "rule__FunctionOperands__OperandsAssignment_2_1");
					put(grammarAccess.getFunctionCallAccess().getOpAssignment_0(), "rule__FunctionCall__OpAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getFunctionoperandsAssignment_2(), "rule__FunctionCall__FunctionoperandsAssignment_2");
					put(grammarAccess.getLiteralAccess().getLiteralAssignment_0_1(), "rule__Literal__LiteralAssignment_0_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_2_1(), "rule__Literal__NameAssignment_2_1");
					put(grammarAccess.getLiteralAccess().getNameAssignment_3_1(), "rule__Literal__NameAssignment_3_1");
					put(grammarAccess.getLiteralAccess().getOpAssignment_4_1(), "rule__Literal__OpAssignment_4_1");
					put(grammarAccess.getLiteralAccess().getOperandsAssignment_4_2(), "rule__Literal__OperandsAssignment_4_2");
					put(grammarAccess.getLiteralAccess().getOperandsAssignment_4_3_1(), "rule__Literal__OperandsAssignment_4_3_1");
					put(grammarAccess.getLiteralAccess().getOpAssignment_5_1(), "rule__Literal__OpAssignment_5_1");
					put(grammarAccess.getLiteralAccess().getOpAssignment_6_1(), "rule__Literal__OpAssignment_6_1");
					put(grammarAccess.getLiteralAccess().getOpAssignment_7_1(), "rule__Literal__OpAssignment_7_1");
					put(grammarAccess.getLiteralAccess().getOpAssignment_8_1(), "rule__Literal__OpAssignment_8_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.dexels.navajo.dsl.tsl.ui.contentassist.antlr.internal.InternalTslParser typedParser = (com.dexels.navajo.dsl.tsl.ui.contentassist.antlr.internal.InternalTslParser) parser;
			typedParser.entryRuleTml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
