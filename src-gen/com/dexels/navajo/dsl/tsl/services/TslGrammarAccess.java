/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.tsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

@Singleton
public class TslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNAVASCRIPT_STARTParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cTmlAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cChildrenAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_0_1_1_0 = (RuleCall)cChildrenAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_0_1_2_0 = (RuleCall)cChildrenAssignment_3_0_1_2.eContents().get(0);
		private final Assignment cMethodsAssignment_3_0_1_3 = (Assignment)cAlternatives_3_0_1.eContents().get(3);
		private final RuleCall cMethodsMethodsParserRuleCall_3_0_1_3_0 = (RuleCall)cMethodsAssignment_3_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_4 = (Assignment)cAlternatives_3_0_1.eContents().get(4);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_0_1_4_0 = (RuleCall)cChildrenAssignment_3_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_5 = (Assignment)cAlternatives_3_0_1.eContents().get(5);
		private final RuleCall cChildrenIncludeParserRuleCall_3_0_1_5_0 = (RuleCall)cChildrenAssignment_3_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_6 = (Assignment)cAlternatives_3_0_1.eContents().get(6);
		private final RuleCall cChildrenValidationsParserRuleCall_3_0_1_6_0 = (RuleCall)cChildrenAssignment_3_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_7 = (Assignment)cAlternatives_3_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_3_0_1_7_0 = (RuleCall)cChildrenAssignment_3_0_1_7.eContents().get(0);
		private final RuleCall cNAVASCRIPT_ENDParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		////com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
		////generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"
		//Tml:
		//	NAVASCRIPT_START {Tml} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map |
		//	children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
		//	children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//NAVASCRIPT_START {Tml} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map | children+=Param
		//| methods+=Methods | children+=DebugTag | children+=Include | children+=Validations | children+=Comment)*
		//NAVASCRIPT_END | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//NAVASCRIPT_START
		public RuleCall getNAVASCRIPT_STARTParserRuleCall_0() { return cNAVASCRIPT_STARTParserRuleCall_0; }

		//{Tml}
		public Action getTmlAction_1() { return cTmlAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag |
		//children+=Include | children+=Validations | children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag |
		//children+=Include | children+=Validations | children+=Comment)* NAVASCRIPT_END
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		//(children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include |
		//children+=Validations | children+=Comment)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_0_1_0() { return cChildrenAssignment_3_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_0_1_0_0() { return cChildrenMessageParserRuleCall_3_0_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_0_1_1() { return cChildrenAssignment_3_0_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_0_1_1_0() { return cChildrenMapParserRuleCall_3_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_0_1_2() { return cChildrenAssignment_3_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_0_1_2_0() { return cChildrenParamParserRuleCall_3_0_1_2_0; }

		//methods+=Methods
		public Assignment getMethodsAssignment_3_0_1_3() { return cMethodsAssignment_3_0_1_3; }

		//Methods
		public RuleCall getMethodsMethodsParserRuleCall_3_0_1_3_0() { return cMethodsMethodsParserRuleCall_3_0_1_3_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_0_1_4() { return cChildrenAssignment_3_0_1_4; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_0_1_4_0() { return cChildrenDebugTagParserRuleCall_3_0_1_4_0; }

		//children+=Include
		public Assignment getChildrenAssignment_3_0_1_5() { return cChildrenAssignment_3_0_1_5; }

		//Include
		public RuleCall getChildrenIncludeParserRuleCall_3_0_1_5_0() { return cChildrenIncludeParserRuleCall_3_0_1_5_0; }

		//children+=Validations
		public Assignment getChildrenAssignment_3_0_1_6() { return cChildrenAssignment_3_0_1_6; }

		//Validations
		public RuleCall getChildrenValidationsParserRuleCall_3_0_1_6_0() { return cChildrenValidationsParserRuleCall_3_0_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_0_1_7() { return cChildrenAssignment_3_0_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_0_1_7_0() { return cChildrenCommentParserRuleCall_3_0_1_7_0; }

		//NAVASCRIPT_END
		public RuleCall getNAVASCRIPT_ENDParserRuleCall_3_0_2() { return cNAVASCRIPT_ENDParserRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class DEBUG_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DEBUG_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDebugKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DEBUG_START_TAG returns ecore::EString:
		//	XML_TAG_START "debug";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "debug"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"debug"
		public Keyword getDebugKeyword_1() { return cDebugKeyword_1; }
	}

	public class DEBUG_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DEBUG_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDebugKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DEBUG_END_TAG returns ecore::EString:
		//	XML_TAG_END "debug" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_TAG_END "debug" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_0() { return cXML_TAG_ENDTerminalRuleCall_0; }

		//"debug"
		public Keyword getDebugKeyword_1() { return cDebugKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class MAPENDKEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPENDKEYWORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMAPKEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MAPENDKEYWORD returns ecore::EString:
		//	XML_START_ENDTAG MAPKEYWORD;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG MAPKEYWORD
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//MAPKEYWORD
		public RuleCall getMAPKEYWORDTerminalRuleCall_1() { return cMAPKEYWORDTerminalRuleCall_1; }
	}

	public class MAPSTARTKEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPSTARTKEYWORD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMAPKEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MAPSTARTKEYWORD returns ecore::EString:
		//	XML_TAG_START MAPKEYWORD;
		public ParserRule getRule() { return rule; }

		//XML_TAG_START MAPKEYWORD
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//MAPKEYWORD
		public RuleCall getMAPKEYWORDTerminalRuleCall_1() { return cMAPKEYWORDTerminalRuleCall_1; }
	}

	public class INCLUDE_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//INCLUDE_START_TAG returns ecore::EString:
		//	XML_TAG_START "include";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "include"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"include"
		public Keyword getIncludeKeyword_1() { return cIncludeKeyword_1; }
	}

	public class PROPERTY_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PROPERTY_START_TAG returns ecore::EString:
		//	XML_TAG_START "property";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "property"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }
	}

	public class REQUIRED_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REQUIRED_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRequiredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//REQUIRED_START_TAG returns ecore::EString:
		//	XML_TAG_START "required";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "required"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"required"
		public Keyword getRequiredKeyword_1() { return cRequiredKeyword_1; }
	}

	public class VALIDATIONS_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALIDATIONS_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cValidationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VALIDATIONS_START_TAG returns ecore::EString:
		//	XML_TAG_START "validations";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "validations"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"validations"
		public Keyword getValidationsKeyword_1() { return cValidationsKeyword_1; }
	}

	public class CHECK_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHECK_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CHECK_START_TAG returns ecore::EString:
		//	XML_TAG_START "check";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "check"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"check"
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }
	}

	public class COMMENT_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//COMMENT_START_TAG returns ecore::EString:
		//	XML_TAG_START "comment";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "comment"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"comment"
		public Keyword getCommentKeyword_1() { return cCommentKeyword_1; }
	}

	public class BREAK_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BREAK_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BREAK_START_TAG returns ecore::EString:
		//	XML_TAG_START "break";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "break"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class OPTION_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////
		//OPTION_START_TAG returns ecore::EString:
		//	XML_TAG_START "option";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "option"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"option"
		public Keyword getOptionKeyword_1() { return cOptionKeyword_1; }
	}

	public class BREAK_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BREAK_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BREAK_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "break" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "break" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class OPTION_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cOptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//OPTION_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "option" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "option" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"option"
		public Keyword getOptionKeyword_1() { return cOptionKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class REQUIRED_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REQUIRED_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRequiredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REQUIRED_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "required" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "required" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"required"
		public Keyword getRequiredKeyword_1() { return cRequiredKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class PROPERTY_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PROPERTY_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "property" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "property" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"property"
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class COMMENT_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCommentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//COMMENT_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "comment" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "comment" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"comment"
		public Keyword getCommentKeyword_1() { return cCommentKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class VALIDATIONS_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALIDATIONS_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cValidationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VALIDATIONS_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "validations" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "validations" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"validations"
		public Keyword getValidationsKeyword_1() { return cValidationsKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class CHECK_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHECK_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CHECK_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "check" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "check" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"check"
		public Keyword getCheckKeyword_1() { return cCheckKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class PARAM_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//PARAM_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "param" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "param" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"param"
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class MESSAGE_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGE_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MESSAGE_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "message" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "message" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"message"
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class METHODS_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "METHODS_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMethodsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//METHODS_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "methods" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "methods" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"methods"
		public Keyword getMethodsKeyword_1() { return cMethodsKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class METHOD_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "METHOD_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//METHOD_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "method" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "method" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"method"
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class FIELD_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FIELD_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "field" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "field" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"field"
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class EXPRESSION_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EXPRESSION_START_TAG returns ecore::EString:
		//	XML_TAG_START "expression";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "expression"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"expression"
		public Keyword getExpressionKeyword_1() { return cExpressionKeyword_1; }
	}

	public class EXPRESSION_END_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_END_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EXPRESSION_END_TAG returns ecore::EString:
		//	XML_START_ENDTAG "expression" XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG "expression" XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//"expression"
		public Keyword getExpressionKeyword_1() { return cExpressionKeyword_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class PARAM_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PARAM_START_TAG returns ecore::EString:
		//	XML_TAG_START "param";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "param"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"param"
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }
	}

	public class MESSAGE_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGE_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MESSAGE_START_TAG returns ecore::EString:
		//	XML_TAG_START "message";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "message"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"message"
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }
	}

	public class METHOD_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "METHOD_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMethodKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//METHOD_START_TAG returns ecore::EString:
		//	XML_TAG_START "method";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "method"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"method"
		public Keyword getMethodKeyword_1() { return cMethodKeyword_1; }
	}

	public class METHODS_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "METHODS_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cMethodsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//METHODS_START_TAG returns ecore::EString:
		//	XML_TAG_START "methods";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "methods"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"methods"
		public Keyword getMethodsKeyword_1() { return cMethodsKeyword_1; }
	}

	public class FIELD_START_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_START_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFieldKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FIELD_START_TAG returns ecore::EString:
		//	XML_TAG_START "field";
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "field"
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"field"
		public Keyword getFieldKeyword_1() { return cFieldKeyword_1; }
	}

	public class NAVASCRIPT_STARTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_START");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNAVASCRIPT_KEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NAVASCRIPT_START returns ecore::EString:
		//	XML_TAG_START NAVASCRIPT_KEYWORD;
		public ParserRule getRule() { return rule; }

		//XML_TAG_START NAVASCRIPT_KEYWORD
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//NAVASCRIPT_KEYWORD
		public RuleCall getNAVASCRIPT_KEYWORDTerminalRuleCall_1() { return cNAVASCRIPT_KEYWORDTerminalRuleCall_1; }
	}

	public class NAVASCRIPT_ENDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_END");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNAVASCRIPT_KEYWORDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NAVASCRIPT_END returns ecore::EString:
		//	XML_START_ENDTAG NAVASCRIPT_KEYWORD XML_TAG_END;
		public ParserRule getRule() { return rule; }

		//XML_START_ENDTAG NAVASCRIPT_KEYWORD XML_TAG_END
		public Group getGroup() { return cGroup; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_0() { return cXML_START_ENDTAGTerminalRuleCall_0; }

		//NAVASCRIPT_KEYWORD
		public RuleCall getNAVASCRIPT_KEYWORDTerminalRuleCall_1() { return cNAVASCRIPT_KEYWORDTerminalRuleCall_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2() { return cXML_TAG_ENDTerminalRuleCall_2; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cMessageKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCommentKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// might need to add a lot more kywords here
		//AttributeName returns ecore::EString:
		//	ID | "message" | "comment";
		public ParserRule getRule() { return rule; }

		//ID | "message" | "comment"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"message"
		public Keyword getMessageKeyword_1() { return cMessageKeyword_1; }

		//"comment"
		public Keyword getCommentKeyword_2() { return cCommentKeyword_2; }
	}

	public class PossibleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PossibleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_0_0_0 = (RuleCall)cNamespaceAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyAttributeNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cQUOTEQTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionValueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionValueTopLevelParserRuleCall_3_0_1_0 = (RuleCall)cExpressionValueAssignment_3_0_1.eContents().get(0);
		private final RuleCall cSEMICOLONQUOTETerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueATTRIBUTESTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cEMPTYSTRINGTerminalRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		
		//PossibleExpression:
		//	(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE | value=ATTRIBUTESTRING |
		//	EMPTYSTRING);
		public ParserRule getRule() { return rule; }

		//(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE | value=ATTRIBUTESTRING |
		//EMPTYSTRING)
		public Group getGroup() { return cGroup; }

		//(namespace=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//namespace=ID
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_0_0_0() { return cNamespaceIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//key=AttributeName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//AttributeName
		public RuleCall getKeyAttributeNameParserRuleCall_1_0() { return cKeyAttributeNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE | value=ATTRIBUTESTRING | EMPTYSTRING
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE
		public Group getGroup_3_0() { return cGroup_3_0; }

		//QUOTEQ
		public RuleCall getQUOTEQTerminalRuleCall_3_0_0() { return cQUOTEQTerminalRuleCall_3_0_0; }

		//expressionValue=TopLevel
		public Assignment getExpressionValueAssignment_3_0_1() { return cExpressionValueAssignment_3_0_1; }

		//TopLevel
		public RuleCall getExpressionValueTopLevelParserRuleCall_3_0_1_0() { return cExpressionValueTopLevelParserRuleCall_3_0_1_0; }

		//SEMICOLONQUOTE
		public RuleCall getSEMICOLONQUOTETerminalRuleCall_3_0_2() { return cSEMICOLONQUOTETerminalRuleCall_3_0_2; }

		//value=ATTRIBUTESTRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//ATTRIBUTESTRING
		public RuleCall getValueATTRIBUTESTRINGTerminalRuleCall_3_1_0() { return cValueATTRIBUTESTRINGTerminalRuleCall_3_1_0; }

		//EMPTYSTRING
		public RuleCall getEMPTYSTRINGTerminalRuleCall_3_2() { return cEMPTYSTRINGTerminalRuleCall_3_2; }
	}

	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMETHODS_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cMethodAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_2_0_1_0 = (RuleCall)cMethodAssignment_2_0_1.eContents().get(0);
		private final RuleCall cMETHODS_END_TAGParserRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Methods:
		//	METHODS_START_TAG {Methods} (XML_TAG_END method+=Method* METHODS_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//METHODS_START_TAG {Methods} (XML_TAG_END method+=Method* METHODS_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//METHODS_START_TAG
		public RuleCall getMETHODS_START_TAGParserRuleCall_0() { return cMETHODS_START_TAGParserRuleCall_0; }

		//{Methods}
		public Action getMethodsAction_1() { return cMethodsAction_1; }

		//XML_TAG_END method+=Method* METHODS_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_END method+=Method* METHODS_END_TAG
		public Group getGroup_2_0() { return cGroup_2_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2_0_0() { return cXML_TAG_ENDTerminalRuleCall_2_0_0; }

		//method+=Method*
		public Assignment getMethodAssignment_2_0_1() { return cMethodAssignment_2_0_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_2_0_1_0() { return cMethodMethodParserRuleCall_2_0_1_0; }

		//METHODS_END_TAG
		public RuleCall getMETHODS_END_TAGParserRuleCall_2_0_2() { return cMETHODS_END_TAGParserRuleCall_2_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMETHOD_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cChildrenRequiredParserRuleCall_3_0_1_0 = (RuleCall)cChildrenAssignment_3_0_1.eContents().get(0);
		private final RuleCall cMETHOD_END_TAGParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Method:
		//	METHOD_START_TAG {Method} attributes+=PossibleExpression* (XML_TAG_END children+=Required* METHOD_END_TAG |
		//	XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//METHOD_START_TAG {Method} attributes+=PossibleExpression* (XML_TAG_END children+=Required* METHOD_END_TAG |
		//XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//METHOD_START_TAG
		public RuleCall getMETHOD_START_TAGParserRuleCall_0() { return cMETHOD_START_TAGParserRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END children+=Required* METHOD_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END children+=Required* METHOD_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		//children+=Required*
		public Assignment getChildrenAssignment_3_0_1() { return cChildrenAssignment_3_0_1; }

		//Required
		public RuleCall getChildrenRequiredParserRuleCall_3_0_1_0() { return cChildrenRequiredParserRuleCall_3_0_1_0; }

		//METHOD_END_TAG
		public RuleCall getMETHOD_END_TAGParserRuleCall_3_0_2() { return cMETHOD_END_TAGParserRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class ValidationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVALIDATIONS_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cValidationsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cChildrenAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cChildrenCheckParserRuleCall_2_0_1_0 = (RuleCall)cChildrenAssignment_2_0_1.eContents().get(0);
		private final RuleCall cVALIDATIONS_END_TAGParserRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Validations:
		//	VALIDATIONS_START_TAG {Validations} (XML_TAG_END children+=Check* VALIDATIONS_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//VALIDATIONS_START_TAG {Validations} (XML_TAG_END children+=Check* VALIDATIONS_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//VALIDATIONS_START_TAG
		public RuleCall getVALIDATIONS_START_TAGParserRuleCall_0() { return cVALIDATIONS_START_TAGParserRuleCall_0; }

		//{Validations}
		public Action getValidationsAction_1() { return cValidationsAction_1; }

		//XML_TAG_END children+=Check* VALIDATIONS_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_END children+=Check* VALIDATIONS_END_TAG
		public Group getGroup_2_0() { return cGroup_2_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2_0_0() { return cXML_TAG_ENDTerminalRuleCall_2_0_0; }

		//children+=Check*
		public Assignment getChildrenAssignment_2_0_1() { return cChildrenAssignment_2_0_1; }

		//Check
		public RuleCall getChildrenCheckParserRuleCall_2_0_1_0() { return cChildrenCheckParserRuleCall_2_0_1_0; }

		//VALIDATIONS_END_TAG
		public RuleCall getVALIDATIONS_END_TAGParserRuleCall_2_0_2() { return cVALIDATIONS_END_TAGParserRuleCall_2_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHECK_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCheckAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_0_1_0 = (RuleCall)cExpressionAssignment_3_0_1.eContents().get(0);
		private final RuleCall cCHECK_END_TAGParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Check:
		//	CHECK_START_TAG {Check} attributes+=PossibleExpression* (XML_TAG_END expression=TopLevel CHECK_END_TAG |
		//	XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//CHECK_START_TAG {Check} attributes+=PossibleExpression* (XML_TAG_END expression=TopLevel CHECK_END_TAG |
		//XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//CHECK_START_TAG
		public RuleCall getCHECK_START_TAGParserRuleCall_0() { return cCHECK_START_TAGParserRuleCall_0; }

		//{Check}
		public Action getCheckAction_1() { return cCheckAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END expression=TopLevel CHECK_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END expression=TopLevel CHECK_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_3_0_1() { return cExpressionAssignment_3_0_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_0_1_0() { return cExpressionTopLevelParserRuleCall_3_0_1_0; }

		//CHECK_END_TAG
		public RuleCall getCHECK_END_TAGParserRuleCall_3_0_2() { return cCHECK_END_TAGParserRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMENT_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCommentAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cCOMMENT_END_TAGParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Comment:
		//	COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
		//	COMMENT_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
		//COMMENT_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//COMMENT_START_TAG
		public RuleCall getCOMMENT_START_TAGParserRuleCall_0() { return cCOMMENT_START_TAGParserRuleCall_0; }

		//{Comment}
		public Action getCommentAction_1() { return cCommentAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END //		expression=TopLevel
		//COMMENT_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END //		expression=TopLevel
		//COMMENT_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		////		expression=TopLevel
		//COMMENT_END_TAG
		public RuleCall getCOMMENT_END_TAGParserRuleCall_3_0_1() { return cCOMMENT_END_TAGParserRuleCall_3_0_1; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBREAK_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cBreakAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final RuleCall cBREAK_END_TAGParserRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Break:
		//	BREAK_START_TAG {Break} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
		//	BREAK_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//BREAK_START_TAG {Break} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
		//BREAK_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//BREAK_START_TAG
		public RuleCall getBREAK_START_TAGParserRuleCall_0() { return cBREAK_START_TAGParserRuleCall_0; }

		//{Break}
		public Action getBreakAction_1() { return cBreakAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END //		expression=TopLevel
		//BREAK_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END //		expression=TopLevel
		//BREAK_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		////		expression=TopLevel
		//BREAK_END_TAG
		public RuleCall getBREAK_END_TAGParserRuleCall_3_0_1() { return cBREAK_END_TAGParserRuleCall_3_0_1; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINCLUDE_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// create Include entity in Model
		//Include returns Method:
		//	INCLUDE_START_TAG {Method} attributes+=PossibleExpression* XML_TAG_SINGLEEND;
		public ParserRule getRule() { return rule; }

		//INCLUDE_START_TAG {Method} attributes+=PossibleExpression* XML_TAG_SINGLEEND
		public Group getGroup() { return cGroup; }

		//INCLUDE_START_TAG
		public RuleCall getINCLUDE_START_TAGParserRuleCall_0() { return cINCLUDE_START_TAGParserRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3() { return cXML_TAG_SINGLEENDTerminalRuleCall_3; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMESSAGE_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMessageAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cChildrenAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_3_0_1_1_0 = (RuleCall)cChildrenAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_0_1_2_0 = (RuleCall)cChildrenAssignment_3_0_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_3 = (Assignment)cAlternatives_3_0_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_3_0_1_3_0 = (RuleCall)cChildrenAssignment_3_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_4 = (Assignment)cAlternatives_3_0_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_0_1_4_0 = (RuleCall)cChildrenAssignment_3_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_5 = (Assignment)cAlternatives_3_0_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_0_1_5_0 = (RuleCall)cChildrenAssignment_3_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_6 = (Assignment)cAlternatives_3_0_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_3_0_1_6_0 = (RuleCall)cChildrenAssignment_3_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_7 = (Assignment)cAlternatives_3_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_3_0_1_7_0 = (RuleCall)cChildrenAssignment_3_0_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_8 = (Assignment)cAlternatives_3_0_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_3_0_1_8_0 = (RuleCall)cChildrenAssignment_3_0_1_8.eContents().get(0);
		private final RuleCall cMESSAGE_END_TAGParserRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Message:
		//	MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Property |
		//	children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment |
		//	children+=Break)* MESSAGE_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Property |
		//children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment |
		//children+=Break)* MESSAGE_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//MESSAGE_START_TAG
		public RuleCall getMESSAGE_START_TAGParserRuleCall_0() { return cMESSAGE_START_TAGParserRuleCall_0; }

		//{Message}
		public Action getMessageAction_1() { return cMessageAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* MESSAGE_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* MESSAGE_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_0_0() { return cXML_TAG_ENDTerminalRuleCall_3_0_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_0_1_0() { return cChildrenAssignment_3_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_0_1_0_0() { return cChildrenMessageParserRuleCall_3_0_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_3_0_1_1() { return cChildrenAssignment_3_0_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_3_0_1_1_0() { return cChildrenPropertyParserRuleCall_3_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_0_1_2() { return cChildrenAssignment_3_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_0_1_2_0() { return cChildrenParamParserRuleCall_3_0_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_0_1_3() { return cChildrenAssignment_3_0_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_0_1_3_0() { return cChildrenMapParserRuleCall_3_0_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_0_1_4() { return cChildrenAssignment_3_0_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_0_1_4_0() { return cChildrenMapMethodParserRuleCall_3_0_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_0_1_5() { return cChildrenAssignment_3_0_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_0_1_5_0() { return cChildrenDebugTagParserRuleCall_3_0_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_3_0_1_6() { return cChildrenAssignment_3_0_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_3_0_1_6_0() { return cChildrenFieldParserRuleCall_3_0_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_0_1_7() { return cChildrenAssignment_3_0_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_0_1_7_0() { return cChildrenCommentParserRuleCall_3_0_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_0_1_8() { return cChildrenAssignment_3_0_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_0_1_8_0() { return cChildrenBreakParserRuleCall_3_0_1_8_0; }

		//MESSAGE_END_TAG
		public RuleCall getMESSAGE_END_TAGParserRuleCall_3_0_2() { return cMESSAGE_END_TAGParserRuleCall_3_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAPSTARTKEYWORDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMapAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMapNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMapNameMapIdParserRuleCall_2_0_1_0 = (RuleCall)cMapNameAssignment_2_0_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0_2_0 = (RuleCall)cAttributesAssignment_2_0_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_1_1_2_0 = (RuleCall)cChildrenAssignment_3_1_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_3 = (Assignment)cAlternatives_3_1_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_3_0 = (RuleCall)cChildrenAssignment_3_1_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_4 = (Assignment)cAlternatives_3_1_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_1_4_0 = (RuleCall)cChildrenAssignment_3_1_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_5 = (Assignment)cAlternatives_3_1_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_1_1_5_0 = (RuleCall)cChildrenAssignment_3_1_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_6 = (Assignment)cAlternatives_3_1_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_3_1_1_6_0 = (RuleCall)cChildrenAssignment_3_1_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_7 = (Assignment)cAlternatives_3_1_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_3_1_1_7_0 = (RuleCall)cChildrenAssignment_3_1_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_8 = (Assignment)cAlternatives_3_1_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_3_1_1_8_0 = (RuleCall)cChildrenAssignment_3_1_1_8.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_3_1_2_0 = (RuleCall)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cMAPKEYWORDTerminalRuleCall_3_1_2_1 = (RuleCall)cGroup_3_1_2.eContents().get(1);
		private final Group cGroup_3_1_2_2 = (Group)cGroup_3_1_2.eContents().get(2);
		private final Keyword cFullStopKeyword_3_1_2_2_0 = (Keyword)cGroup_3_1_2_2.eContents().get(0);
		private final Assignment cMapClosingNameAssignment_3_1_2_2_1 = (Assignment)cGroup_3_1_2_2.eContents().get(1);
		private final RuleCall cMapClosingNameMapIdParserRuleCall_3_1_2_2_1_0 = (RuleCall)cMapClosingNameAssignment_3_1_2_2_1.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_2_3 = (RuleCall)cGroup_3_1_2.eContents().get(3);
		
		//Map:
		//	MAPSTARTKEYWORD {Map} ("." mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
		//	(XML_TAG_SINGLEEND | XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//	children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (XML_START_ENDTAG
		//	MAPKEYWORD ("." mapClosingName=MapId)? XML_TAG_END));
		public ParserRule getRule() { return rule; }

		//MAPSTARTKEYWORD {Map} ("." mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
		//(XML_TAG_SINGLEEND | XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (XML_START_ENDTAG
		//MAPKEYWORD ("." mapClosingName=MapId)? XML_TAG_END))
		public Group getGroup() { return cGroup; }

		//MAPSTARTKEYWORD
		public RuleCall getMAPSTARTKEYWORDParserRuleCall_0() { return cMAPSTARTKEYWORDParserRuleCall_0; }

		//{Map}
		public Action getMapAction_1() { return cMapAction_1; }

		//"." mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"." mapName=MapId attributes+=PossibleExpression*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//mapName=MapId
		public Assignment getMapNameAssignment_2_0_1() { return cMapNameAssignment_2_0_1; }

		//MapId
		public RuleCall getMapNameMapIdParserRuleCall_2_0_1_0() { return cMapNameMapIdParserRuleCall_2_0_1_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2_0_2() { return cAttributesAssignment_2_0_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0_2_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_1_0() { return cAttributesPossibleExpressionParserRuleCall_2_1_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (XML_START_ENDTAG
		//MAPKEYWORD ("." mapClosingName=MapId)? XML_TAG_END)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (XML_START_ENDTAG MAPKEYWORD ("."
		//mapClosingName=MapId)? XML_TAG_END)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_0() { return cXML_TAG_ENDTerminalRuleCall_3_1_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_1_1_0_0() { return cChildrenMessageParserRuleCall_3_1_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_3_1_1_1_0() { return cChildrenPropertyParserRuleCall_3_1_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_1_1_2() { return cChildrenAssignment_3_1_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_1_1_2_0() { return cChildrenParamParserRuleCall_3_1_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_3() { return cChildrenAssignment_3_1_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_3_0() { return cChildrenMapParserRuleCall_3_1_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_1_4() { return cChildrenAssignment_3_1_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_1_4_0() { return cChildrenMapMethodParserRuleCall_3_1_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_1_1_5() { return cChildrenAssignment_3_1_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_1_1_5_0() { return cChildrenDebugTagParserRuleCall_3_1_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_3_1_1_6() { return cChildrenAssignment_3_1_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_3_1_1_6_0() { return cChildrenFieldParserRuleCall_3_1_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_1_1_7() { return cChildrenAssignment_3_1_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_1_1_7_0() { return cChildrenCommentParserRuleCall_3_1_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_1_1_8() { return cChildrenAssignment_3_1_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_1_1_8_0() { return cChildrenBreakParserRuleCall_3_1_1_8_0; }

		//XML_START_ENDTAG MAPKEYWORD ("." mapClosingName=MapId)? XML_TAG_END
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_3_1_2_0() { return cXML_START_ENDTAGTerminalRuleCall_3_1_2_0; }

		//MAPKEYWORD
		public RuleCall getMAPKEYWORDTerminalRuleCall_3_1_2_1() { return cMAPKEYWORDTerminalRuleCall_3_1_2_1; }

		//("." mapClosingName=MapId)?
		public Group getGroup_3_1_2_2() { return cGroup_3_1_2_2; }

		//"."
		public Keyword getFullStopKeyword_3_1_2_2_0() { return cFullStopKeyword_3_1_2_2_0; }

		//mapClosingName=MapId
		public Assignment getMapClosingNameAssignment_3_1_2_2_1() { return cMapClosingNameAssignment_3_1_2_2_1; }

		//MapId
		public RuleCall getMapClosingNameMapIdParserRuleCall_3_1_2_2_1_0() { return cMapClosingNameMapIdParserRuleCall_3_1_2_2_1_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_2_3() { return cXML_TAG_ENDTerminalRuleCall_3_1_2_3; }
	}

	public class MapIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapId");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MapId returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class RequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Required");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cREQUIRED_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cRequiredAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cREQUIRED_END_TAGParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		
		//// doesn't seem to work. All are optional
		////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
		//// ToDo Add ALL types!
		//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
		////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
		////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
		////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
		//// The direction 'inout' has been deprecated, so I've left that one out.
		////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
		//// '1' this makes 1 a keyword
		////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
		//Required:
		//	REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END REQUIRED_END_TAG);
		public ParserRule getRule() { return rule; }

		//REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END REQUIRED_END_TAG)
		public Group getGroup() { return cGroup; }

		//REQUIRED_START_TAG
		public RuleCall getREQUIRED_START_TAGParserRuleCall_0() { return cREQUIRED_START_TAGParserRuleCall_0; }

		//{Required}
		public Action getRequiredAction_1() { return cRequiredAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END REQUIRED_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//XML_TAG_END REQUIRED_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_0() { return cXML_TAG_ENDTerminalRuleCall_3_1_0; }

		//REQUIRED_END_TAG
		public RuleCall getREQUIRED_END_TAGParserRuleCall_3_1_1() { return cREQUIRED_END_TAGParserRuleCall_3_1_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROPERTY_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cPropertyAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final RuleCall cPROPERTY_END_TAGParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//Property:
		//	PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
		//	(children+=ExpressionOrOption | children+=Map)* PROPERTY_END_TAG);
		public ParserRule getRule() { return rule; }

		//PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
		//(children+=ExpressionOrOption | children+=Map)* PROPERTY_END_TAG)
		public Group getGroup() { return cGroup; }

		//PROPERTY_START_TAG
		public RuleCall getPROPERTY_START_TAGParserRuleCall_0() { return cPROPERTY_START_TAGParserRuleCall_0; }

		//{Property}
		public Action getPropertyAction_1() { return cPropertyAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END (children+=ExpressionOrOption | children+=Map)* PROPERTY_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//XML_TAG_END (children+=ExpressionOrOption | children+=Map)* PROPERTY_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_0() { return cXML_TAG_ENDTerminalRuleCall_3_1_0; }

		//(children+=ExpressionOrOption | children+=Map)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_1_0() { return cChildrenMapParserRuleCall_3_1_1_1_0; }

		//PROPERTY_END_TAG
		public RuleCall getPROPERTY_END_TAGParserRuleCall_3_1_2() { return cPROPERTY_END_TAGParserRuleCall_3_1_2; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAM_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cParamAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1.eContents().get(0);
		private final RuleCall cPARAM_END_TAGParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//Param:
		//	PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END children+=ExpressionOrOption*
		//	PARAM_END_TAG);
		public ParserRule getRule() { return rule; }

		//PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END children+=ExpressionOrOption*
		//PARAM_END_TAG)
		public Group getGroup() { return cGroup; }

		//PARAM_START_TAG
		public RuleCall getPARAM_START_TAGParserRuleCall_0() { return cPARAM_START_TAGParserRuleCall_0; }

		//{Param}
		public Action getParamAction_1() { return cParamAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END children+=ExpressionOrOption* PARAM_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//XML_TAG_END children+=ExpressionOrOption* PARAM_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_0() { return cXML_TAG_ENDTerminalRuleCall_3_1_0; }

		//children+=ExpressionOrOption*
		public Assignment getChildrenAssignment_3_1_1() { return cChildrenAssignment_3_1_1; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0; }

		//PARAM_END_TAG
		public RuleCall getPARAM_END_TAGParserRuleCall_3_1_2() { return cPARAM_END_TAGParserRuleCall_3_1_2; }
	}

	public class MapMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cMapNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_1_0 = (RuleCall)cMapNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodNameIDTerminalRuleCall_3_0 = (RuleCall)cMethodNameAssignment_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_5_1_0 = (RuleCall)cGroup_5_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_5_1_1_0 = (RuleCall)cExpressionAssignment_5_1_1.eContents().get(0);
		private final RuleCall cXML_START_ENDTAGTerminalRuleCall_5_1_2 = (RuleCall)cGroup_5_1.eContents().get(2);
		private final Assignment cMethodClosingNameAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cMethodClosingNameIDTerminalRuleCall_5_1_3_0 = (RuleCall)cMethodClosingNameAssignment_5_1_3.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		private final Assignment cMethodClosingMethodAssignment_5_1_5 = (Assignment)cGroup_5_1.eContents().get(5);
		private final RuleCall cMethodClosingMethodIDTerminalRuleCall_5_1_5_0 = (RuleCall)cMethodClosingMethodAssignment_5_1_5.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_5_1_6 = (RuleCall)cGroup_5_1.eContents().get(6);
		
		//MapMethod:
		//	XML_TAG_START mapName=ID "." methodName=ID attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
		//	expression=TopLevel XML_START_ENDTAG methodClosingName=ID "." methodClosingMethod=ID XML_TAG_END);
		public ParserRule getRule() { return rule; }

		//XML_TAG_START mapName=ID "." methodName=ID attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
		//expression=TopLevel XML_START_ENDTAG methodClosingName=ID "." methodClosingMethod=ID XML_TAG_END)
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_1() { return cMapNameAssignment_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_1_0() { return cMapNameIDTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//methodName=ID
		public Assignment getMethodNameAssignment_3() { return cMethodNameAssignment_3; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_3_0() { return cMethodNameIDTerminalRuleCall_3_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_4_0() { return cAttributesPossibleExpressionParserRuleCall_4_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel XML_START_ENDTAG methodClosingName=ID "." methodClosingMethod=ID
		//XML_TAG_END
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_5_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_5_0; }

		//XML_TAG_END expression=TopLevel XML_START_ENDTAG methodClosingName=ID "." methodClosingMethod=ID XML_TAG_END
		public Group getGroup_5_1() { return cGroup_5_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_5_1_0() { return cXML_TAG_ENDTerminalRuleCall_5_1_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_5_1_1() { return cExpressionAssignment_5_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_5_1_1_0() { return cExpressionTopLevelParserRuleCall_5_1_1_0; }

		//XML_START_ENDTAG
		public RuleCall getXML_START_ENDTAGTerminalRuleCall_5_1_2() { return cXML_START_ENDTAGTerminalRuleCall_5_1_2; }

		//methodClosingName=ID
		public Assignment getMethodClosingNameAssignment_5_1_3() { return cMethodClosingNameAssignment_5_1_3; }

		//ID
		public RuleCall getMethodClosingNameIDTerminalRuleCall_5_1_3_0() { return cMethodClosingNameIDTerminalRuleCall_5_1_3_0; }

		//"."
		public Keyword getFullStopKeyword_5_1_4() { return cFullStopKeyword_5_1_4; }

		//methodClosingMethod=ID
		public Assignment getMethodClosingMethodAssignment_5_1_5() { return cMethodClosingMethodAssignment_5_1_5; }

		//ID
		public RuleCall getMethodClosingMethodIDTerminalRuleCall_5_1_5_0() { return cMethodClosingMethodIDTerminalRuleCall_5_1_5_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_5_1_6() { return cXML_TAG_ENDTerminalRuleCall_5_1_6; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFIELD_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cParamAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Alternatives cAlternatives_4_1_0 = (Alternatives)cGroup_4_1.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_0 = (Assignment)cAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_4_1_0_0_0 = (RuleCall)cChildrenAssignment_4_1_0_0.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_1 = (Assignment)cAlternatives_4_1_0.eContents().get(1);
		private final RuleCall cChildrenMessageParserRuleCall_4_1_0_1_0 = (RuleCall)cChildrenAssignment_4_1_0_1.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_2 = (Assignment)cAlternatives_4_1_0.eContents().get(2);
		private final RuleCall cChildrenPropertyParserRuleCall_4_1_0_2_0 = (RuleCall)cChildrenAssignment_4_1_0_2.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_3 = (Assignment)cAlternatives_4_1_0.eContents().get(3);
		private final RuleCall cChildrenParamParserRuleCall_4_1_0_3_0 = (RuleCall)cChildrenAssignment_4_1_0_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_4 = (Assignment)cAlternatives_4_1_0.eContents().get(4);
		private final RuleCall cChildrenMapParserRuleCall_4_1_0_4_0 = (RuleCall)cChildrenAssignment_4_1_0_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_5 = (Assignment)cAlternatives_4_1_0.eContents().get(5);
		private final RuleCall cChildrenMapMethodParserRuleCall_4_1_0_5_0 = (RuleCall)cChildrenAssignment_4_1_0_5.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_6 = (Assignment)cAlternatives_4_1_0.eContents().get(6);
		private final RuleCall cChildrenDebugTagParserRuleCall_4_1_0_6_0 = (RuleCall)cChildrenAssignment_4_1_0_6.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_7 = (Assignment)cAlternatives_4_1_0.eContents().get(7);
		private final RuleCall cChildrenFieldParserRuleCall_4_1_0_7_0 = (RuleCall)cChildrenAssignment_4_1_0_7.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_8 = (Assignment)cAlternatives_4_1_0.eContents().get(8);
		private final RuleCall cChildrenCommentParserRuleCall_4_1_0_8_0 = (RuleCall)cChildrenAssignment_4_1_0_8.eContents().get(0);
		private final Assignment cChildrenAssignment_4_1_0_9 = (Assignment)cAlternatives_4_1_0.eContents().get(9);
		private final RuleCall cChildrenBreakParserRuleCall_4_1_0_9_0 = (RuleCall)cChildrenAssignment_4_1_0_9.eContents().get(0);
		private final RuleCall cFIELD_END_TAGParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		
		//Field returns Param:
		//	FIELD_START_TAG {Param} attributes+=PossibleExpression* XML_TAG_END (XML_TAG_SINGLEEND | (children+=ExpressionOrOption
		//	| children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag
		//	| children+=Field | children+=Comment | children+=Break)* FIELD_END_TAG);
		public ParserRule getRule() { return rule; }

		//FIELD_START_TAG {Param} attributes+=PossibleExpression* XML_TAG_END (XML_TAG_SINGLEEND | (children+=ExpressionOrOption |
		//children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=Comment | children+=Break)* FIELD_END_TAG)
		public Group getGroup() { return cGroup; }

		//FIELD_START_TAG
		public RuleCall getFIELD_START_TAGParserRuleCall_0() { return cFIELD_START_TAGParserRuleCall_0; }

		//{Param}
		public Action getParamAction_1() { return cParamAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3() { return cXML_TAG_ENDTerminalRuleCall_3; }

		//XML_TAG_SINGLEEND | (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
		//children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		//FIELD_END_TAG
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_4_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_4_0; }

		//(children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* FIELD_END_TAG
		public Group getGroup_4_1() { return cGroup_4_1; }

		//(children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_4_1_0() { return cAlternatives_4_1_0; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_4_1_0_0() { return cChildrenAssignment_4_1_0_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_4_1_0_0_0() { return cChildrenExpressionOrOptionParserRuleCall_4_1_0_0_0; }

		//children+=Message
		public Assignment getChildrenAssignment_4_1_0_1() { return cChildrenAssignment_4_1_0_1; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_4_1_0_1_0() { return cChildrenMessageParserRuleCall_4_1_0_1_0; }

		//children+=Property
		public Assignment getChildrenAssignment_4_1_0_2() { return cChildrenAssignment_4_1_0_2; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_4_1_0_2_0() { return cChildrenPropertyParserRuleCall_4_1_0_2_0; }

		//children+=Param
		public Assignment getChildrenAssignment_4_1_0_3() { return cChildrenAssignment_4_1_0_3; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_4_1_0_3_0() { return cChildrenParamParserRuleCall_4_1_0_3_0; }

		//children+=Map
		public Assignment getChildrenAssignment_4_1_0_4() { return cChildrenAssignment_4_1_0_4; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_4_1_0_4_0() { return cChildrenMapParserRuleCall_4_1_0_4_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_4_1_0_5() { return cChildrenAssignment_4_1_0_5; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_4_1_0_5_0() { return cChildrenMapMethodParserRuleCall_4_1_0_5_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_4_1_0_6() { return cChildrenAssignment_4_1_0_6; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_4_1_0_6_0() { return cChildrenDebugTagParserRuleCall_4_1_0_6_0; }

		//children+=Field
		public Assignment getChildrenAssignment_4_1_0_7() { return cChildrenAssignment_4_1_0_7; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_4_1_0_7_0() { return cChildrenFieldParserRuleCall_4_1_0_7_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_4_1_0_8() { return cChildrenAssignment_4_1_0_8; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_4_1_0_8_0() { return cChildrenCommentParserRuleCall_4_1_0_8_0; }

		//children+=Break
		public Assignment getChildrenAssignment_4_1_0_9() { return cChildrenAssignment_4_1_0_9; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_4_1_0_9_0() { return cChildrenBreakParserRuleCall_4_1_0_9_0; }

		//FIELD_END_TAG
		public RuleCall getFIELD_END_TAGParserRuleCall_4_1_1() { return cFIELD_END_TAGParserRuleCall_4_1_1; }
	}

	public class DebugTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DebugTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEBUG_START_TAGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cDebugTagAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_1_1_0 = (RuleCall)cExpressionAssignment_3_1_1.eContents().get(0);
		private final RuleCall cDEBUG_END_TAGParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		
		//DebugTag:
		//	DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel
		//	DEBUG_END_TAG);
		public ParserRule getRule() { return rule; }

		//DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel
		//DEBUG_END_TAG)
		public Group getGroup() { return cGroup; }

		//DEBUG_START_TAG
		public RuleCall getDEBUG_START_TAGParserRuleCall_0() { return cDEBUG_START_TAGParserRuleCall_0; }

		//{DebugTag}
		public Action getDebugTagAction_1() { return cDebugTagAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel DEBUG_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//XML_TAG_END expression=TopLevel DEBUG_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_3_1_0() { return cXML_TAG_ENDTerminalRuleCall_3_1_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_3_1_1() { return cExpressionAssignment_3_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_1_1_0() { return cExpressionTopLevelParserRuleCall_3_1_1_0; }

		//DEBUG_END_TAG
		public RuleCall getDEBUG_END_TAGParserRuleCall_3_1_2() { return cDEBUG_END_TAGParserRuleCall_3_1_2; }
	}

	public class ExpressionOrOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEXPRESSION_START_TAGParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionTagParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOPTION_START_TAGParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionOrOption returns Element:
		//	EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option;
		public ParserRule getRule() { return rule; }

		//EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXPRESSION_START_TAG ExpressionTag
		public Group getGroup_0() { return cGroup_0; }

		//EXPRESSION_START_TAG
		public RuleCall getEXPRESSION_START_TAGParserRuleCall_0_0() { return cEXPRESSION_START_TAGParserRuleCall_0_0; }

		//ExpressionTag
		public RuleCall getExpressionTagParserRuleCall_0_1() { return cExpressionTagParserRuleCall_0_1; }

		//OPTION_START_TAG Option
		public Group getGroup_1() { return cGroup_1; }

		//OPTION_START_TAG
		public RuleCall getOPTION_START_TAGParserRuleCall_1_0() { return cOPTION_START_TAGParserRuleCall_1_0; }

		//Option
		public RuleCall getOptionParserRuleCall_1_1() { return cOptionParserRuleCall_1_1; }
	}

	public class ExpressionOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOnly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXML_TAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionTagParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ExpressionOnly returns Element:
		//	XML_TAG_START "expression" ExpressionTag;
		public ParserRule getRule() { return rule; }

		//XML_TAG_START "expression" ExpressionTag
		public Group getGroup() { return cGroup; }

		//XML_TAG_START
		public RuleCall getXML_TAG_STARTTerminalRuleCall_0() { return cXML_TAG_STARTTerminalRuleCall_0; }

		//"expression"
		public Keyword getExpressionKeyword_1() { return cExpressionKeyword_1; }

		//ExpressionTag
		public RuleCall getExpressionTagParserRuleCall_2() { return cExpressionTagParserRuleCall_2; }
	}

	public class ExpressionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_2_1_1_0 = (RuleCall)cExpressionAssignment_2_1_1.eContents().get(0);
		private final RuleCall cEXPRESSION_END_TAGParserRuleCall_2_1_2 = (RuleCall)cGroup_2_1.eContents().get(2);
		
		//ExpressionTag:
		//	{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel
		//	EXPRESSION_END_TAG);
		public ParserRule getRule() { return rule; }

		//{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel EXPRESSION_END_TAG)
		public Group getGroup() { return cGroup; }

		//{ExpressionTag}
		public Action getExpressionTagAction_0() { return cExpressionTagAction_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_1_0() { return cAttributesPossibleExpressionParserRuleCall_1_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel EXPRESSION_END_TAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_0; }

		//XML_TAG_END expression=TopLevel EXPRESSION_END_TAG
		public Group getGroup_2_1() { return cGroup_2_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2_1_0() { return cXML_TAG_ENDTerminalRuleCall_2_1_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_2_1_1() { return cExpressionAssignment_2_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_2_1_1_0() { return cExpressionTopLevelParserRuleCall_2_1_1_0; }

		//EXPRESSION_END_TAG
		public RuleCall getEXPRESSION_END_TAGParserRuleCall_2_1_2() { return cEXPRESSION_END_TAGParserRuleCall_2_1_2; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final RuleCall cOPTION_END_TAGParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//Option:
		//	{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END OPTION_END_TAG);
		public ParserRule getRule() { return rule; }

		//{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END OPTION_END_TAG)
		public Group getGroup() { return cGroup; }

		//{Option}
		public Action getOptionAction_0() { return cOptionAction_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_1_0() { return cAttributesPossibleExpressionParserRuleCall_1_0; }

		//XML_TAG_SINGLEEND | XML_TAG_END OPTION_END_TAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_0; }

		//XML_TAG_END OPTION_END_TAG
		public Group getGroup_2_1() { return cGroup_2_1; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_2_1_0() { return cXML_TAG_ENDTerminalRuleCall_2_1_0; }

		//OPTION_END_TAG
		public RuleCall getOPTION_END_TAGParserRuleCall_2_1_1() { return cOPTION_END_TAGParserRuleCall_2_1_1; }
	}
	
	
	private TmlElements pTml;
	private TerminalRule tXMLHead;
	private TerminalRule tXMLComment;
	private TerminalRule tQUOTEQ;
	private TerminalRule tSEMICOLONQUOTE;
	private DEBUG_START_TAGElements pDEBUG_START_TAG;
	private DEBUG_END_TAGElements pDEBUG_END_TAG;
	private TerminalRule tXML_START_ENDTAG;
	private TerminalRule tXML_TAG_END;
	private TerminalRule tXML_TAG_SINGLEEND;
	private TerminalRule tXML_TAG_START;
	private TerminalRule tEMPTYSTRING;
	private TerminalRule tATTRIBUTESTRING;
	private MAPENDKEYWORDElements pMAPENDKEYWORD;
	private MAPSTARTKEYWORDElements pMAPSTARTKEYWORD;
	private TerminalRule tMAPKEYWORD;
	private INCLUDE_START_TAGElements pINCLUDE_START_TAG;
	private PROPERTY_START_TAGElements pPROPERTY_START_TAG;
	private REQUIRED_START_TAGElements pREQUIRED_START_TAG;
	private VALIDATIONS_START_TAGElements pVALIDATIONS_START_TAG;
	private CHECK_START_TAGElements pCHECK_START_TAG;
	private COMMENT_START_TAGElements pCOMMENT_START_TAG;
	private BREAK_START_TAGElements pBREAK_START_TAG;
	private OPTION_START_TAGElements pOPTION_START_TAG;
	private BREAK_END_TAGElements pBREAK_END_TAG;
	private OPTION_END_TAGElements pOPTION_END_TAG;
	private REQUIRED_END_TAGElements pREQUIRED_END_TAG;
	private PROPERTY_END_TAGElements pPROPERTY_END_TAG;
	private COMMENT_END_TAGElements pCOMMENT_END_TAG;
	private VALIDATIONS_END_TAGElements pVALIDATIONS_END_TAG;
	private CHECK_END_TAGElements pCHECK_END_TAG;
	private PARAM_END_TAGElements pPARAM_END_TAG;
	private MESSAGE_END_TAGElements pMESSAGE_END_TAG;
	private METHODS_END_TAGElements pMETHODS_END_TAG;
	private METHOD_END_TAGElements pMETHOD_END_TAG;
	private FIELD_END_TAGElements pFIELD_END_TAG;
	private EXPRESSION_START_TAGElements pEXPRESSION_START_TAG;
	private EXPRESSION_END_TAGElements pEXPRESSION_END_TAG;
	private PARAM_START_TAGElements pPARAM_START_TAG;
	private MESSAGE_START_TAGElements pMESSAGE_START_TAG;
	private METHOD_START_TAGElements pMETHOD_START_TAG;
	private METHODS_START_TAGElements pMETHODS_START_TAG;
	private FIELD_START_TAGElements pFIELD_START_TAG;
	private NAVASCRIPT_STARTElements pNAVASCRIPT_START;
	private TerminalRule tNAVASCRIPT_KEYWORD;
	private NAVASCRIPT_ENDElements pNAVASCRIPT_END;
	private AttributeNameElements pAttributeName;
	private PossibleExpressionElements pPossibleExpression;
	private MethodsElements pMethods;
	private MethodElements pMethod;
	private ValidationsElements pValidations;
	private CheckElements pCheck;
	private CommentElements pComment;
	private BreakElements pBreak;
	private IncludeElements pInclude;
	private MessageElements pMessage;
	private MapElements pMap;
	private MapIdElements pMapId;
	private RequiredElements pRequired;
	private PropertyElements pProperty;
	private ParamElements pParam;
	private MapMethodElements pMapMethod;
	private FieldElements pField;
	private DebugTagElements pDebugTag;
	private ExpressionOrOptionElements pExpressionOrOption;
	private ExpressionOnlyElements pExpressionOnly;
	private ExpressionTagElements pExpressionTag;
	private OptionElements pOption;
	
	private final GrammarProvider grammarProvider;

	private NavajoExpressionGrammarAccess gaNavajoExpression;

	@Inject
	public TslGrammarAccess(GrammarProvider grammarProvider,
		NavajoExpressionGrammarAccess gaNavajoExpression) {
		this.grammarProvider = grammarProvider;
		this.gaNavajoExpression = gaNavajoExpression;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public NavajoExpressionGrammarAccess getNavajoExpressionGrammarAccess() {
		return gaNavajoExpression;
	}

	
	////com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
	////generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"
	//Tml:
	//	NAVASCRIPT_START {Tml} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map |
	//	children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
	//	children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
	public TmlElements getTmlAccess() {
		return (pTml != null) ? pTml : (pTml = new TmlElements());
	}
	
	public ParserRule getTmlRule() {
		return getTmlAccess().getRule();
	}

	//terminal XMLHead:
	//	"<?"->"?>";
	public TerminalRule getXMLHeadRule() {
		return (tXMLHead != null) ? tXMLHead : (tXMLHead = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLHead"));
	} 

	//terminal XMLComment:
	//	"<!--"->"-->";
	public TerminalRule getXMLCommentRule() {
		return (tXMLComment != null) ? tXMLComment : (tXMLComment = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLComment"));
	} 

	//terminal QUOTEQ:
	//	"\"=";
	public TerminalRule getQUOTEQRule() {
		return (tQUOTEQ != null) ? tQUOTEQ : (tQUOTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTEQ"));
	} 

	//terminal SEMICOLONQUOTE:
	//	";\"";
	public TerminalRule getSEMICOLONQUOTERule() {
		return (tSEMICOLONQUOTE != null) ? tSEMICOLONQUOTE : (tSEMICOLONQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLONQUOTE"));
	} 

	//DEBUG_START_TAG returns ecore::EString:
	//	XML_TAG_START "debug";
	public DEBUG_START_TAGElements getDEBUG_START_TAGAccess() {
		return (pDEBUG_START_TAG != null) ? pDEBUG_START_TAG : (pDEBUG_START_TAG = new DEBUG_START_TAGElements());
	}
	
	public ParserRule getDEBUG_START_TAGRule() {
		return getDEBUG_START_TAGAccess().getRule();
	}

	//DEBUG_END_TAG returns ecore::EString:
	//	XML_TAG_END "debug" XML_TAG_END;
	public DEBUG_END_TAGElements getDEBUG_END_TAGAccess() {
		return (pDEBUG_END_TAG != null) ? pDEBUG_END_TAG : (pDEBUG_END_TAG = new DEBUG_END_TAGElements());
	}
	
	public ParserRule getDEBUG_END_TAGRule() {
		return getDEBUG_END_TAGAccess().getRule();
	}

	////terminal NAVASCRIPT_START:
	////	'<navascript';
	//terminal XML_START_ENDTAG:
	//	"</";
	public TerminalRule getXML_START_ENDTAGRule() {
		return (tXML_START_ENDTAG != null) ? tXML_START_ENDTAG : (tXML_START_ENDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_START_ENDTAG"));
	} 

	//terminal XML_TAG_END:
	//	">";
	public TerminalRule getXML_TAG_ENDRule() {
		return (tXML_TAG_END != null) ? tXML_TAG_END : (tXML_TAG_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_END"));
	} 

	//terminal XML_TAG_SINGLEEND:
	//	"/>";
	public TerminalRule getXML_TAG_SINGLEENDRule() {
		return (tXML_TAG_SINGLEEND != null) ? tXML_TAG_SINGLEEND : (tXML_TAG_SINGLEEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_SINGLEEND"));
	} 

	//terminal XML_TAG_START:
	//	"<";
	public TerminalRule getXML_TAG_STARTRule() {
		return (tXML_TAG_START != null) ? tXML_TAG_START : (tXML_TAG_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_START"));
	} 

	//terminal EMPTYSTRING:
	//	"\"\"";
	public TerminalRule getEMPTYSTRINGRule() {
		return (tEMPTYSTRING != null) ? tEMPTYSTRING : (tEMPTYSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTYSTRING"));
	} 

	//terminal ATTRIBUTESTRING:
	//	"\"" !("=" | "\"")* "\"";
	public TerminalRule getATTRIBUTESTRINGRule() {
		return (tATTRIBUTESTRING != null) ? tATTRIBUTESTRING : (tATTRIBUTESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTRIBUTESTRING"));
	} 

	//MAPENDKEYWORD returns ecore::EString:
	//	XML_START_ENDTAG MAPKEYWORD;
	public MAPENDKEYWORDElements getMAPENDKEYWORDAccess() {
		return (pMAPENDKEYWORD != null) ? pMAPENDKEYWORD : (pMAPENDKEYWORD = new MAPENDKEYWORDElements());
	}
	
	public ParserRule getMAPENDKEYWORDRule() {
		return getMAPENDKEYWORDAccess().getRule();
	}

	//MAPSTARTKEYWORD returns ecore::EString:
	//	XML_TAG_START MAPKEYWORD;
	public MAPSTARTKEYWORDElements getMAPSTARTKEYWORDAccess() {
		return (pMAPSTARTKEYWORD != null) ? pMAPSTARTKEYWORD : (pMAPSTARTKEYWORD = new MAPSTARTKEYWORDElements());
	}
	
	public ParserRule getMAPSTARTKEYWORDRule() {
		return getMAPSTARTKEYWORDAccess().getRule();
	}

	//terminal MAPKEYWORD:
	//	"map";
	public TerminalRule getMAPKEYWORDRule() {
		return (tMAPKEYWORD != null) ? tMAPKEYWORD : (tMAPKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAPKEYWORD"));
	} 

	//INCLUDE_START_TAG returns ecore::EString:
	//	XML_TAG_START "include";
	public INCLUDE_START_TAGElements getINCLUDE_START_TAGAccess() {
		return (pINCLUDE_START_TAG != null) ? pINCLUDE_START_TAG : (pINCLUDE_START_TAG = new INCLUDE_START_TAGElements());
	}
	
	public ParserRule getINCLUDE_START_TAGRule() {
		return getINCLUDE_START_TAGAccess().getRule();
	}

	//PROPERTY_START_TAG returns ecore::EString:
	//	XML_TAG_START "property";
	public PROPERTY_START_TAGElements getPROPERTY_START_TAGAccess() {
		return (pPROPERTY_START_TAG != null) ? pPROPERTY_START_TAG : (pPROPERTY_START_TAG = new PROPERTY_START_TAGElements());
	}
	
	public ParserRule getPROPERTY_START_TAGRule() {
		return getPROPERTY_START_TAGAccess().getRule();
	}

	//REQUIRED_START_TAG returns ecore::EString:
	//	XML_TAG_START "required";
	public REQUIRED_START_TAGElements getREQUIRED_START_TAGAccess() {
		return (pREQUIRED_START_TAG != null) ? pREQUIRED_START_TAG : (pREQUIRED_START_TAG = new REQUIRED_START_TAGElements());
	}
	
	public ParserRule getREQUIRED_START_TAGRule() {
		return getREQUIRED_START_TAGAccess().getRule();
	}

	//VALIDATIONS_START_TAG returns ecore::EString:
	//	XML_TAG_START "validations";
	public VALIDATIONS_START_TAGElements getVALIDATIONS_START_TAGAccess() {
		return (pVALIDATIONS_START_TAG != null) ? pVALIDATIONS_START_TAG : (pVALIDATIONS_START_TAG = new VALIDATIONS_START_TAGElements());
	}
	
	public ParserRule getVALIDATIONS_START_TAGRule() {
		return getVALIDATIONS_START_TAGAccess().getRule();
	}

	//CHECK_START_TAG returns ecore::EString:
	//	XML_TAG_START "check";
	public CHECK_START_TAGElements getCHECK_START_TAGAccess() {
		return (pCHECK_START_TAG != null) ? pCHECK_START_TAG : (pCHECK_START_TAG = new CHECK_START_TAGElements());
	}
	
	public ParserRule getCHECK_START_TAGRule() {
		return getCHECK_START_TAGAccess().getRule();
	}

	//COMMENT_START_TAG returns ecore::EString:
	//	XML_TAG_START "comment";
	public COMMENT_START_TAGElements getCOMMENT_START_TAGAccess() {
		return (pCOMMENT_START_TAG != null) ? pCOMMENT_START_TAG : (pCOMMENT_START_TAG = new COMMENT_START_TAGElements());
	}
	
	public ParserRule getCOMMENT_START_TAGRule() {
		return getCOMMENT_START_TAGAccess().getRule();
	}

	//BREAK_START_TAG returns ecore::EString:
	//	XML_TAG_START "break";
	public BREAK_START_TAGElements getBREAK_START_TAGAccess() {
		return (pBREAK_START_TAG != null) ? pBREAK_START_TAG : (pBREAK_START_TAG = new BREAK_START_TAGElements());
	}
	
	public ParserRule getBREAK_START_TAGRule() {
		return getBREAK_START_TAGAccess().getRule();
	}

	////
	//OPTION_START_TAG returns ecore::EString:
	//	XML_TAG_START "option";
	public OPTION_START_TAGElements getOPTION_START_TAGAccess() {
		return (pOPTION_START_TAG != null) ? pOPTION_START_TAG : (pOPTION_START_TAG = new OPTION_START_TAGElements());
	}
	
	public ParserRule getOPTION_START_TAGRule() {
		return getOPTION_START_TAGAccess().getRule();
	}

	//BREAK_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "break" XML_TAG_END;
	public BREAK_END_TAGElements getBREAK_END_TAGAccess() {
		return (pBREAK_END_TAG != null) ? pBREAK_END_TAG : (pBREAK_END_TAG = new BREAK_END_TAGElements());
	}
	
	public ParserRule getBREAK_END_TAGRule() {
		return getBREAK_END_TAGAccess().getRule();
	}

	//OPTION_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "option" XML_TAG_END;
	public OPTION_END_TAGElements getOPTION_END_TAGAccess() {
		return (pOPTION_END_TAG != null) ? pOPTION_END_TAG : (pOPTION_END_TAG = new OPTION_END_TAGElements());
	}
	
	public ParserRule getOPTION_END_TAGRule() {
		return getOPTION_END_TAGAccess().getRule();
	}

	//REQUIRED_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "required" XML_TAG_END;
	public REQUIRED_END_TAGElements getREQUIRED_END_TAGAccess() {
		return (pREQUIRED_END_TAG != null) ? pREQUIRED_END_TAG : (pREQUIRED_END_TAG = new REQUIRED_END_TAGElements());
	}
	
	public ParserRule getREQUIRED_END_TAGRule() {
		return getREQUIRED_END_TAGAccess().getRule();
	}

	//PROPERTY_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "property" XML_TAG_END;
	public PROPERTY_END_TAGElements getPROPERTY_END_TAGAccess() {
		return (pPROPERTY_END_TAG != null) ? pPROPERTY_END_TAG : (pPROPERTY_END_TAG = new PROPERTY_END_TAGElements());
	}
	
	public ParserRule getPROPERTY_END_TAGRule() {
		return getPROPERTY_END_TAGAccess().getRule();
	}

	//COMMENT_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "comment" XML_TAG_END;
	public COMMENT_END_TAGElements getCOMMENT_END_TAGAccess() {
		return (pCOMMENT_END_TAG != null) ? pCOMMENT_END_TAG : (pCOMMENT_END_TAG = new COMMENT_END_TAGElements());
	}
	
	public ParserRule getCOMMENT_END_TAGRule() {
		return getCOMMENT_END_TAGAccess().getRule();
	}

	//VALIDATIONS_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "validations" XML_TAG_END;
	public VALIDATIONS_END_TAGElements getVALIDATIONS_END_TAGAccess() {
		return (pVALIDATIONS_END_TAG != null) ? pVALIDATIONS_END_TAG : (pVALIDATIONS_END_TAG = new VALIDATIONS_END_TAGElements());
	}
	
	public ParserRule getVALIDATIONS_END_TAGRule() {
		return getVALIDATIONS_END_TAGAccess().getRule();
	}

	//CHECK_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "check" XML_TAG_END;
	public CHECK_END_TAGElements getCHECK_END_TAGAccess() {
		return (pCHECK_END_TAG != null) ? pCHECK_END_TAG : (pCHECK_END_TAG = new CHECK_END_TAGElements());
	}
	
	public ParserRule getCHECK_END_TAGRule() {
		return getCHECK_END_TAGAccess().getRule();
	}

	//PARAM_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "param" XML_TAG_END;
	public PARAM_END_TAGElements getPARAM_END_TAGAccess() {
		return (pPARAM_END_TAG != null) ? pPARAM_END_TAG : (pPARAM_END_TAG = new PARAM_END_TAGElements());
	}
	
	public ParserRule getPARAM_END_TAGRule() {
		return getPARAM_END_TAGAccess().getRule();
	}

	//MESSAGE_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "message" XML_TAG_END;
	public MESSAGE_END_TAGElements getMESSAGE_END_TAGAccess() {
		return (pMESSAGE_END_TAG != null) ? pMESSAGE_END_TAG : (pMESSAGE_END_TAG = new MESSAGE_END_TAGElements());
	}
	
	public ParserRule getMESSAGE_END_TAGRule() {
		return getMESSAGE_END_TAGAccess().getRule();
	}

	//METHODS_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "methods" XML_TAG_END;
	public METHODS_END_TAGElements getMETHODS_END_TAGAccess() {
		return (pMETHODS_END_TAG != null) ? pMETHODS_END_TAG : (pMETHODS_END_TAG = new METHODS_END_TAGElements());
	}
	
	public ParserRule getMETHODS_END_TAGRule() {
		return getMETHODS_END_TAGAccess().getRule();
	}

	//METHOD_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "method" XML_TAG_END;
	public METHOD_END_TAGElements getMETHOD_END_TAGAccess() {
		return (pMETHOD_END_TAG != null) ? pMETHOD_END_TAG : (pMETHOD_END_TAG = new METHOD_END_TAGElements());
	}
	
	public ParserRule getMETHOD_END_TAGRule() {
		return getMETHOD_END_TAGAccess().getRule();
	}

	//FIELD_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "field" XML_TAG_END;
	public FIELD_END_TAGElements getFIELD_END_TAGAccess() {
		return (pFIELD_END_TAG != null) ? pFIELD_END_TAG : (pFIELD_END_TAG = new FIELD_END_TAGElements());
	}
	
	public ParserRule getFIELD_END_TAGRule() {
		return getFIELD_END_TAGAccess().getRule();
	}

	//EXPRESSION_START_TAG returns ecore::EString:
	//	XML_TAG_START "expression";
	public EXPRESSION_START_TAGElements getEXPRESSION_START_TAGAccess() {
		return (pEXPRESSION_START_TAG != null) ? pEXPRESSION_START_TAG : (pEXPRESSION_START_TAG = new EXPRESSION_START_TAGElements());
	}
	
	public ParserRule getEXPRESSION_START_TAGRule() {
		return getEXPRESSION_START_TAGAccess().getRule();
	}

	//EXPRESSION_END_TAG returns ecore::EString:
	//	XML_START_ENDTAG "expression" XML_TAG_END;
	public EXPRESSION_END_TAGElements getEXPRESSION_END_TAGAccess() {
		return (pEXPRESSION_END_TAG != null) ? pEXPRESSION_END_TAG : (pEXPRESSION_END_TAG = new EXPRESSION_END_TAGElements());
	}
	
	public ParserRule getEXPRESSION_END_TAGRule() {
		return getEXPRESSION_END_TAGAccess().getRule();
	}

	//PARAM_START_TAG returns ecore::EString:
	//	XML_TAG_START "param";
	public PARAM_START_TAGElements getPARAM_START_TAGAccess() {
		return (pPARAM_START_TAG != null) ? pPARAM_START_TAG : (pPARAM_START_TAG = new PARAM_START_TAGElements());
	}
	
	public ParserRule getPARAM_START_TAGRule() {
		return getPARAM_START_TAGAccess().getRule();
	}

	//MESSAGE_START_TAG returns ecore::EString:
	//	XML_TAG_START "message";
	public MESSAGE_START_TAGElements getMESSAGE_START_TAGAccess() {
		return (pMESSAGE_START_TAG != null) ? pMESSAGE_START_TAG : (pMESSAGE_START_TAG = new MESSAGE_START_TAGElements());
	}
	
	public ParserRule getMESSAGE_START_TAGRule() {
		return getMESSAGE_START_TAGAccess().getRule();
	}

	//METHOD_START_TAG returns ecore::EString:
	//	XML_TAG_START "method";
	public METHOD_START_TAGElements getMETHOD_START_TAGAccess() {
		return (pMETHOD_START_TAG != null) ? pMETHOD_START_TAG : (pMETHOD_START_TAG = new METHOD_START_TAGElements());
	}
	
	public ParserRule getMETHOD_START_TAGRule() {
		return getMETHOD_START_TAGAccess().getRule();
	}

	//METHODS_START_TAG returns ecore::EString:
	//	XML_TAG_START "methods";
	public METHODS_START_TAGElements getMETHODS_START_TAGAccess() {
		return (pMETHODS_START_TAG != null) ? pMETHODS_START_TAG : (pMETHODS_START_TAG = new METHODS_START_TAGElements());
	}
	
	public ParserRule getMETHODS_START_TAGRule() {
		return getMETHODS_START_TAGAccess().getRule();
	}

	//FIELD_START_TAG returns ecore::EString:
	//	XML_TAG_START "field";
	public FIELD_START_TAGElements getFIELD_START_TAGAccess() {
		return (pFIELD_START_TAG != null) ? pFIELD_START_TAG : (pFIELD_START_TAG = new FIELD_START_TAGElements());
	}
	
	public ParserRule getFIELD_START_TAGRule() {
		return getFIELD_START_TAGAccess().getRule();
	}

	//NAVASCRIPT_START returns ecore::EString:
	//	XML_TAG_START NAVASCRIPT_KEYWORD;
	public NAVASCRIPT_STARTElements getNAVASCRIPT_STARTAccess() {
		return (pNAVASCRIPT_START != null) ? pNAVASCRIPT_START : (pNAVASCRIPT_START = new NAVASCRIPT_STARTElements());
	}
	
	public ParserRule getNAVASCRIPT_STARTRule() {
		return getNAVASCRIPT_STARTAccess().getRule();
	}

	//terminal NAVASCRIPT_KEYWORD:
	//	"navascript" | "tsl";
	public TerminalRule getNAVASCRIPT_KEYWORDRule() {
		return (tNAVASCRIPT_KEYWORD != null) ? tNAVASCRIPT_KEYWORD : (tNAVASCRIPT_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_KEYWORD"));
	} 

	//NAVASCRIPT_END returns ecore::EString:
	//	XML_START_ENDTAG NAVASCRIPT_KEYWORD XML_TAG_END;
	public NAVASCRIPT_ENDElements getNAVASCRIPT_ENDAccess() {
		return (pNAVASCRIPT_END != null) ? pNAVASCRIPT_END : (pNAVASCRIPT_END = new NAVASCRIPT_ENDElements());
	}
	
	public ParserRule getNAVASCRIPT_ENDRule() {
		return getNAVASCRIPT_ENDAccess().getRule();
	}

	//// might need to add a lot more kywords here
	//AttributeName returns ecore::EString:
	//	ID | "message" | "comment";
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//PossibleExpression:
	//	(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel SEMICOLONQUOTE | value=ATTRIBUTESTRING |
	//	EMPTYSTRING);
	public PossibleExpressionElements getPossibleExpressionAccess() {
		return (pPossibleExpression != null) ? pPossibleExpression : (pPossibleExpression = new PossibleExpressionElements());
	}
	
	public ParserRule getPossibleExpressionRule() {
		return getPossibleExpressionAccess().getRule();
	}

	//Methods:
	//	METHODS_START_TAG {Methods} (XML_TAG_END method+=Method* METHODS_END_TAG | XML_TAG_SINGLEEND);
	public MethodsElements getMethodsAccess() {
		return (pMethods != null) ? pMethods : (pMethods = new MethodsElements());
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}

	//Method:
	//	METHOD_START_TAG {Method} attributes+=PossibleExpression* (XML_TAG_END children+=Required* METHOD_END_TAG |
	//	XML_TAG_SINGLEEND);
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Validations:
	//	VALIDATIONS_START_TAG {Validations} (XML_TAG_END children+=Check* VALIDATIONS_END_TAG | XML_TAG_SINGLEEND);
	public ValidationsElements getValidationsAccess() {
		return (pValidations != null) ? pValidations : (pValidations = new ValidationsElements());
	}
	
	public ParserRule getValidationsRule() {
		return getValidationsAccess().getRule();
	}

	//Check:
	//	CHECK_START_TAG {Check} attributes+=PossibleExpression* (XML_TAG_END expression=TopLevel CHECK_END_TAG |
	//	XML_TAG_SINGLEEND);
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//Comment:
	//	COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
	//	COMMENT_END_TAG | XML_TAG_SINGLEEND);
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Break:
	//	BREAK_START_TAG {Break} attributes+=PossibleExpression* (XML_TAG_END //		expression=TopLevel
	//	BREAK_END_TAG | XML_TAG_SINGLEEND);
	public BreakElements getBreakAccess() {
		return (pBreak != null) ? pBreak : (pBreak = new BreakElements());
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}

	//// create Include entity in Model
	//Include returns Method:
	//	INCLUDE_START_TAG {Method} attributes+=PossibleExpression* XML_TAG_SINGLEEND;
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Message:
	//	MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Property |
	//	children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment |
	//	children+=Break)* MESSAGE_END_TAG | XML_TAG_SINGLEEND);
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Map:
	//	MAPSTARTKEYWORD {Map} ("." mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
	//	(XML_TAG_SINGLEEND | XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
	//	children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (XML_START_ENDTAG
	//	MAPKEYWORD ("." mapClosingName=MapId)? XML_TAG_END));
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//MapId returns ecore::EString:
	//	ID;
	public MapIdElements getMapIdAccess() {
		return (pMapId != null) ? pMapId : (pMapId = new MapIdElements());
	}
	
	public ParserRule getMapIdRule() {
		return getMapIdAccess().getRule();
	}

	//// doesn't seem to work. All are optional
	////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
	//// ToDo Add ALL types!
	//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
	////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
	////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
	////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
	//// The direction 'inout' has been deprecated, so I've left that one out.
	////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
	//// '1' this makes 1 a keyword
	////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
	//Required:
	//	REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END REQUIRED_END_TAG);
	public RequiredElements getRequiredAccess() {
		return (pRequired != null) ? pRequired : (pRequired = new RequiredElements());
	}
	
	public ParserRule getRequiredRule() {
		return getRequiredAccess().getRule();
	}

	//Property:
	//	PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
	//	(children+=ExpressionOrOption | children+=Map)* PROPERTY_END_TAG);
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Param:
	//	PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END children+=ExpressionOrOption*
	//	PARAM_END_TAG);
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//MapMethod:
	//	XML_TAG_START mapName=ID "." methodName=ID attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END
	//	expression=TopLevel XML_START_ENDTAG methodClosingName=ID "." methodClosingMethod=ID XML_TAG_END);
	public MapMethodElements getMapMethodAccess() {
		return (pMapMethod != null) ? pMapMethod : (pMapMethod = new MapMethodElements());
	}
	
	public ParserRule getMapMethodRule() {
		return getMapMethodAccess().getRule();
	}

	//Field returns Param:
	//	FIELD_START_TAG {Param} attributes+=PossibleExpression* XML_TAG_END (XML_TAG_SINGLEEND | (children+=ExpressionOrOption
	//	| children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag
	//	| children+=Field | children+=Comment | children+=Break)* FIELD_END_TAG);
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//DebugTag:
	//	DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel
	//	DEBUG_END_TAG);
	public DebugTagElements getDebugTagAccess() {
		return (pDebugTag != null) ? pDebugTag : (pDebugTag = new DebugTagElements());
	}
	
	public ParserRule getDebugTagRule() {
		return getDebugTagAccess().getRule();
	}

	//ExpressionOrOption returns Element:
	//	EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option;
	public ExpressionOrOptionElements getExpressionOrOptionAccess() {
		return (pExpressionOrOption != null) ? pExpressionOrOption : (pExpressionOrOption = new ExpressionOrOptionElements());
	}
	
	public ParserRule getExpressionOrOptionRule() {
		return getExpressionOrOptionAccess().getRule();
	}

	//ExpressionOnly returns Element:
	//	XML_TAG_START "expression" ExpressionTag;
	public ExpressionOnlyElements getExpressionOnlyAccess() {
		return (pExpressionOnly != null) ? pExpressionOnly : (pExpressionOnly = new ExpressionOnlyElements());
	}
	
	public ParserRule getExpressionOnlyRule() {
		return getExpressionOnlyAccess().getRule();
	}

	//ExpressionTag:
	//	{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END expression=TopLevel
	//	EXPRESSION_END_TAG);
	public ExpressionTagElements getExpressionTagAccess() {
		return (pExpressionTag != null) ? pExpressionTag : (pExpressionTag = new ExpressionTagElements());
	}
	
	public ParserRule getExpressionTagRule() {
		return getExpressionTagAccess().getRule();
	}

	//Option:
	//	{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | XML_TAG_END OPTION_END_TAG);
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
	////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
	////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
	////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//TopLevel: //	 toplevelExpression =OrExpression
	//	toplevelExpression=OrExpression;
	public NavajoExpressionGrammarAccess.TopLevelElements getTopLevelAccess() {
		return gaNavajoExpression.getTopLevelAccess();
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	////terminal INT returns ecore::EString: ('0'..'9')+;
	//terminal XML_GT:
	//	"&gt;";
	public TerminalRule getXML_GTRule() {
		return gaNavajoExpression.getXML_GTRule();
	} 

	//terminal XML_LT:
	//	"&lt;";
	public TerminalRule getXML_LTRule() {
		return gaNavajoExpression.getXML_LTRule();
	} 

	//terminal XML_GTEQ:
	//	"&gt;=";
	public TerminalRule getXML_GTEQRule() {
		return gaNavajoExpression.getXML_GTEQRule();
	} 

	//terminal XML_LTEQ:
	//	"&lt;=";
	public TerminalRule getXML_LTEQRule() {
		return gaNavajoExpression.getXML_LTEQRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaNavajoExpression.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaNavajoExpression.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaNavajoExpression.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaNavajoExpression.getWSRule();
	} 

	//terminal TRUE:
	//	"true" | "TRUE";
	public TerminalRule getTRUERule() {
		return gaNavajoExpression.getTRUERule();
	} 

	//terminal FALSE:
	//	"false" | "FALSE";
	public TerminalRule getFALSERule() {
		return gaNavajoExpression.getFALSERule();
	} 

	//terminal NULL:
	//	"null" | "NULL";
	public TerminalRule getNULLRule() {
		return gaNavajoExpression.getNULLRule();
	} 

	//terminal TODAY:
	//	"today" | "TODAY";
	public TerminalRule getTODAYRule() {
		return gaNavajoExpression.getTODAYRule();
	} 

	//terminal FORALL:
	//	"FORALL";
	public TerminalRule getFORALLRule() {
		return gaNavajoExpression.getFORALLRule();
	} 

	//terminal PARENT:
	//	"..";
	public TerminalRule getPARENTRule() {
		return gaNavajoExpression.getPARENTRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaNavajoExpression.getIDRule();
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return gaNavajoExpression.getATRule();
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'" | "<![CDATA["->"]]>";
	public TerminalRule getLITERALSTRINGRule() {
		return gaNavajoExpression.getLITERALSTRINGRule();
	} 

	//terminal SQBRACKET_OPEN:
	//	"[";
	public TerminalRule getSQBRACKET_OPENRule() {
		return gaNavajoExpression.getSQBRACKET_OPENRule();
	} 

	//terminal SQBRACKET_CLOSE:
	//	"]";
	public TerminalRule getSQBRACKET_CLOSERule() {
		return gaNavajoExpression.getSQBRACKET_CLOSERule();
	} 

	//terminal TML_SEPARATOR:
	//	"/";
	public TerminalRule getTML_SEPARATORRule() {
		return gaNavajoExpression.getTML_SEPARATORRule();
	} 

	//terminal TML_EXISTS:
	//	"?";
	public TerminalRule getTML_EXISTSRule() {
		return gaNavajoExpression.getTML_EXISTSRule();
	} 

	//terminal DOLLAR:
	//	"$";
	public TerminalRule getDOLLARRule() {
		return gaNavajoExpression.getDOLLARRule();
	} 

	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | PARENT;
	public NavajoExpressionGrammarAccess.PathElementElements getPathElementAccess() {
		return gaNavajoExpression.getPathElementAccess();
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//TmlExpression returns TmlReference:
	//	SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
	//	SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.TmlExpressionElements getTmlExpressionAccess() {
		return gaNavajoExpression.getTmlExpressionAccess();
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ExistsTmlReference:
	//	TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
	//	elements+=PathElement)* SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return gaNavajoExpression.getExistsTmlExpressionAccess();
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//MapReferenceParams returns ReferenceParams:
	//	"(" getterParams+=Literal ("," getterParams+=Literal)* ")";
	public NavajoExpressionGrammarAccess.MapReferenceParamsElements getMapReferenceParamsAccess() {
		return gaNavajoExpression.getMapReferenceParamsAccess();
	}
	
	public ParserRule getMapReferenceParamsRule() {
		return getMapReferenceParamsAccess().getRule();
	}

	//MapGetReference:
	//	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?;
	public NavajoExpressionGrammarAccess.MapGetReferenceElements getMapGetReferenceAccess() {
		return gaNavajoExpression.getMapGetReferenceAccess();
	}
	
	public ParserRule getMapGetReferenceRule() {
		return getMapGetReferenceAccess().getRule();
	}

	//OrExpression returns Expression:
	//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
	public NavajoExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaNavajoExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
	public NavajoExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaNavajoExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	parameters+=RelationalExpression (operations+="==" parameters+=RelationalExpression | operations+="!="
	//	parameters+=RelationalExpression)?;
	public NavajoExpressionGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaNavajoExpression.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	//RelationalExpression returns Expression:
	//	{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
	//	parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
	//	parameters+=AdditiveExpression)?;
	public NavajoExpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaNavajoExpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
	//	parameters+=MultiplicativeExpression)*;
	public NavajoExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaNavajoExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR
	//	parameters+=UnaryExpression)*;
	public NavajoExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaNavajoExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
	public NavajoExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaNavajoExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	parameters+=Literal | "(" parameters+=OrExpression ")";
	public NavajoExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaNavajoExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Keep this one in place so it will create a node for the code completion
	//FunctionName returns ecore::EString:
	//	ID;
	public NavajoExpressionGrammarAccess.FunctionNameElements getFunctionNameAccess() {
		return gaNavajoExpression.getFunctionNameAccess();
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
	public NavajoExpressionGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaNavajoExpression.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	////Expression returns Expression:
	////	Literal | FunctionCall | FunctionOperands ;
	//Literal returns Expression:
	//	{Expression} INT // TODO Add float
	//	| valueString=LITERALSTRING | operations+=FORALL "(" valueString=LITERALSTRING "," parameters+=OrExpression ")" |
	//	parameters+=FunctionCall | expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}" |
	//	elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE | parameters+=TmlExpression |
	//	parameters+=ExistsTmlExpression | parameters+=MapGetReference;
	public NavajoExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaNavajoExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
