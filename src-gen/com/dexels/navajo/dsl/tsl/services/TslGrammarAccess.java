/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.tsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

@Singleton
public class TslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavascriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTmlAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cMessagesAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cMessagesMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cMessagesAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cMapsAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cMapsMapParserRuleCall_3_0_1_1_0 = (RuleCall)cMapsAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cNavascriptKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Tml:
		//	"<navascript" {Tml} attributes+=PossibleExpression* (">" (messages+=Message | maps+=Map)* "</navascript>" | "/>");
		public ParserRule getRule() { return rule; }

		//"<navascript" {Tml} attributes+=PossibleExpression* (">" (messages+=Message | maps+=Map)* "</navascript>" | "/>")
		public Group getGroup() { return cGroup; }

		//"<navascript"
		public Keyword getNavascriptKeyword_0() { return cNavascriptKeyword_0; }

		//{Tml}
		public Action getTmlAction_1() { return cTmlAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//">" (messages+=Message | maps+=Map)* "</navascript>" | "/>"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//">" (messages+=Message | maps+=Map)* "</navascript>"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0_0() { return cGreaterThanSignKeyword_3_0_0; }

		//(messages+=Message | maps+=Map)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//messages+=Message
		public Assignment getMessagesAssignment_3_0_1_0() { return cMessagesAssignment_3_0_1_0; }

		//Message
		public RuleCall getMessagesMessageParserRuleCall_3_0_1_0_0() { return cMessagesMessageParserRuleCall_3_0_1_0_0; }

		//maps+=Map
		public Assignment getMapsAssignment_3_0_1_1() { return cMapsAssignment_3_0_1_1; }

		//Map
		public RuleCall getMapsMapParserRuleCall_3_0_1_1_0() { return cMapsMapParserRuleCall_3_0_1_1_0; }

		//"</navascript>"
		public Keyword getNavascriptKeyword_3_0_2() { return cNavascriptKeyword_3_0_2; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3_1() { return cSolidusGreaterThanSignKeyword_3_1; }
	}

	public class PossibleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PossibleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cQuotationMarkEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpressionValueExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpressionValueAssignment_2_0_1.eContents().get(0);
		private final Keyword cSemicolonQuotationMarkKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueATTRIBUTESTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//PossibleExpression:
		//	key=ID "=" ("\"=" expressionValue=Expression ";\"" | value=ATTRIBUTESTRING);
		public ParserRule getRule() { return rule; }

		//key=ID "=" ("\"=" expressionValue=Expression ";\"" | value=ATTRIBUTESTRING)
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"\"=" expressionValue=Expression ";\"" | value=ATTRIBUTESTRING
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"\"=" expressionValue=Expression ";\""
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"\"="
		public Keyword getQuotationMarkEqualsSignKeyword_2_0_0() { return cQuotationMarkEqualsSignKeyword_2_0_0; }

		//expressionValue=Expression
		public Assignment getExpressionValueAssignment_2_0_1() { return cExpressionValueAssignment_2_0_1; }

		//Expression
		public RuleCall getExpressionValueExpressionParserRuleCall_2_0_1_0() { return cExpressionValueExpressionParserRuleCall_2_0_1_0; }

		//";\""
		public Keyword getSemicolonQuotationMarkKeyword_2_0_2() { return cSemicolonQuotationMarkKeyword_2_0_2; }

		//value=ATTRIBUTESTRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ATTRIBUTESTRING
		public RuleCall getValueATTRIBUTESTRINGTerminalRuleCall_2_1_0() { return cValueATTRIBUTESTRINGTerminalRuleCall_2_1_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMessageAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cMessagesAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cMessagesMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cMessagesAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0_1_1_0 = (RuleCall)cPropertiesAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cMapsAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cMapsMapParserRuleCall_3_0_1_2_0 = (RuleCall)cMapsAssignment_3_0_1_2.eContents().get(0);
		private final Keyword cMessageKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSolidusGreaterThanSignKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Message:
		//	"<message" {Message} attributes+=PossibleExpression* (">" (messages+=Message | properties+=Property | maps+=Map)*
		//	"</message>" | "/>");
		public ParserRule getRule() { return rule; }

		//"<message" {Message} attributes+=PossibleExpression* (">" (messages+=Message | properties+=Property | maps+=Map)*
		//"</message>" | "/>")
		public Group getGroup() { return cGroup; }

		//"<message"
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }

		//{Message}
		public Action getMessageAction_1() { return cMessageAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//">" (messages+=Message | properties+=Property | maps+=Map)* "</message>" | "/>"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//">" (messages+=Message | properties+=Property | maps+=Map)* "</message>"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0_0() { return cGreaterThanSignKeyword_3_0_0; }

		//(messages+=Message | properties+=Property | maps+=Map)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//messages+=Message
		public Assignment getMessagesAssignment_3_0_1_0() { return cMessagesAssignment_3_0_1_0; }

		//Message
		public RuleCall getMessagesMessageParserRuleCall_3_0_1_0_0() { return cMessagesMessageParserRuleCall_3_0_1_0_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_0_1_1() { return cPropertiesAssignment_3_0_1_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0_1_1_0() { return cPropertiesPropertyParserRuleCall_3_0_1_1_0; }

		//maps+=Map
		public Assignment getMapsAssignment_3_0_1_2() { return cMapsAssignment_3_0_1_2; }

		//Map
		public RuleCall getMapsMapParserRuleCall_3_0_1_2_0() { return cMapsMapParserRuleCall_3_0_1_2_0; }

		//"</message>"
		public Keyword getMessageKeyword_3_0_2() { return cMessageKeyword_3_0_2; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3_1() { return cSolidusGreaterThanSignKeyword_3_1; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMapNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_1_0 = (RuleCall)cMapNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSolidusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cMessagesAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cMessagesMessageParserRuleCall_3_1_1_0_0 = (RuleCall)cMessagesAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_1_1_0 = (RuleCall)cPropertiesAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cMapsAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cMapsMapParserRuleCall_3_1_1_2_0 = (RuleCall)cMapsAssignment_3_1_1_2.eContents().get(0);
		private final Keyword cMapKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cMapClosingNameAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cMapClosingNameIDTerminalRuleCall_3_1_3_0 = (RuleCall)cMapClosingNameAssignment_3_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		
		//Map:
		//	"<map." mapName=ID attributes+=PossibleExpression ("/>" | ">" (messages+=Message | properties+=Property | maps+=Map)*
		//	"</map." mapClosingName=ID ">");
		public ParserRule getRule() { return rule; }

		//"<map." mapName=ID attributes+=PossibleExpression ("/>" | ">" (messages+=Message | properties+=Property | maps+=Map)*
		//"</map." mapClosingName=ID ">")
		public Group getGroup() { return cGroup; }

		//"<map."
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_1() { return cMapNameAssignment_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_1_0() { return cMapNameIDTerminalRuleCall_1_0; }

		//attributes+=PossibleExpression
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//"/>" | ">" (messages+=Message | properties+=Property | maps+=Map)* "</map." mapClosingName=ID ">"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3_0() { return cSolidusGreaterThanSignKeyword_3_0; }

		//">" (messages+=Message | properties+=Property | maps+=Map)* "</map." mapClosingName=ID ">"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_1_0() { return cGreaterThanSignKeyword_3_1_0; }

		//(messages+=Message | properties+=Property | maps+=Map)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//messages+=Message
		public Assignment getMessagesAssignment_3_1_1_0() { return cMessagesAssignment_3_1_1_0; }

		//Message
		public RuleCall getMessagesMessageParserRuleCall_3_1_1_0_0() { return cMessagesMessageParserRuleCall_3_1_1_0_0; }

		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_1_1() { return cPropertiesAssignment_3_1_1_1; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_1_1_0() { return cPropertiesPropertyParserRuleCall_3_1_1_1_0; }

		//maps+=Map
		public Assignment getMapsAssignment_3_1_1_2() { return cMapsAssignment_3_1_1_2; }

		//Map
		public RuleCall getMapsMapParserRuleCall_3_1_1_2_0() { return cMapsMapParserRuleCall_3_1_1_2_0; }

		//"</map."
		public Keyword getMapKeyword_3_1_2() { return cMapKeyword_3_1_2; }

		//mapClosingName=ID
		public Assignment getMapClosingNameAssignment_3_1_3() { return cMapClosingNameAssignment_3_1_3; }

		//ID
		public RuleCall getMapClosingNameIDTerminalRuleCall_3_1_3_0() { return cMapClosingNameIDTerminalRuleCall_3_1_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_1_4() { return cGreaterThanSignKeyword_3_1_4; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPropertyAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSolidusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExpressionValueAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionValueExpressionTagParserRuleCall_3_1_1_0 = (RuleCall)cExpressionValueAssignment_3_1_1.eContents().get(0);
		private final Keyword cPropertyKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//// doesn't seem to work. All are optional
		////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
		//// ToDo Add ALL types!
		//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
		////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
		////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
		////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
		//// The direction 'inout' has been deprecated, so I've left that one out.
		////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
		//// '1' this makes 1 a keyword
		////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
		//Property:
		//	"<property" {Property} attributes+=PossibleExpression* ("/>" | ">" expressionValue=ExpressionTag? "</property>");
		public ParserRule getRule() { return rule; }

		//"<property" {Property} attributes+=PossibleExpression* ("/>" | ">" expressionValue=ExpressionTag? "</property>")
		public Group getGroup() { return cGroup; }

		//"<property"
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }

		//{Property}
		public Action getPropertyAction_1() { return cPropertyAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//"/>" | ">" expressionValue=ExpressionTag? "</property>"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"/>"
		public Keyword getSolidusGreaterThanSignKeyword_3_0() { return cSolidusGreaterThanSignKeyword_3_0; }

		//">" expressionValue=ExpressionTag? "</property>"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_1_0() { return cGreaterThanSignKeyword_3_1_0; }

		//expressionValue=ExpressionTag?
		public Assignment getExpressionValueAssignment_3_1_1() { return cExpressionValueAssignment_3_1_1; }

		//ExpressionTag
		public RuleCall getExpressionValueExpressionTagParserRuleCall_3_1_1_0() { return cExpressionValueExpressionTagParserRuleCall_3_1_1_0; }

		//"</property>"
		public Keyword getPropertyKeyword_3_1_2() { return cPropertyKeyword_3_1_2; }
	}

	public class ExpressionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionTag:
		//	"<expression>" value=Expression "</expression>";
		public ParserRule getRule() { return rule; }

		//"<expression>" value=Expression "</expression>"
		public Group getGroup() { return cGroup; }

		//"<expression>"
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }

		//"</expression>"
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
	}
	
	
	private TmlElements pTml;
	private TerminalRule tATTRIBUTESTRING;
	private PossibleExpressionElements pPossibleExpression;
	private MessageElements pMessage;
	private MapElements pMap;
	private PropertyElements pProperty;
	private ExpressionTagElements pExpressionTag;
	
	private final GrammarProvider grammarProvider;

	private NavajoExpressionGrammarAccess gaNavajoExpression;

	@Inject
	public TslGrammarAccess(GrammarProvider grammarProvider,
		NavajoExpressionGrammarAccess gaNavajoExpression) {
		this.grammarProvider = grammarProvider;
		this.gaNavajoExpression = gaNavajoExpression;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public NavajoExpressionGrammarAccess getNavajoExpressionGrammarAccess() {
		return gaNavajoExpression;
	}

	
	//Tml:
	//	"<navascript" {Tml} attributes+=PossibleExpression* (">" (messages+=Message | maps+=Map)* "</navascript>" | "/>");
	public TmlElements getTmlAccess() {
		return (pTml != null) ? pTml : (pTml = new TmlElements());
	}
	
	public ParserRule getTmlRule() {
		return getTmlAccess().getRule();
	}

	////terminal QUOT: '"';	
	//terminal ATTRIBUTESTRING:
	//	"\"" !"=" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* !";" "\"" | "\"\"" | "\"" !"\""
	//	"\"";
	public TerminalRule getATTRIBUTESTRINGRule() {
		return (tATTRIBUTESTRING != null) ? tATTRIBUTESTRING : (tATTRIBUTESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTRIBUTESTRING"));
	} 

	//PossibleExpression:
	//	key=ID "=" ("\"=" expressionValue=Expression ";\"" | value=ATTRIBUTESTRING);
	public PossibleExpressionElements getPossibleExpressionAccess() {
		return (pPossibleExpression != null) ? pPossibleExpression : (pPossibleExpression = new PossibleExpressionElements());
	}
	
	public ParserRule getPossibleExpressionRule() {
		return getPossibleExpressionAccess().getRule();
	}

	//Message:
	//	"<message" {Message} attributes+=PossibleExpression* (">" (messages+=Message | properties+=Property | maps+=Map)*
	//	"</message>" | "/>");
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Map:
	//	"<map." mapName=ID attributes+=PossibleExpression ("/>" | ">" (messages+=Message | properties+=Property | maps+=Map)*
	//	"</map." mapClosingName=ID ">");
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//// doesn't seem to work. All are optional
	////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
	//// ToDo Add ALL types!
	//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
	////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
	////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
	////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
	//// The direction 'inout' has been deprecated, so I've left that one out.
	////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
	//// '1' this makes 1 a keyword
	////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
	//Property:
	//	"<property" {Property} attributes+=PossibleExpression* ("/>" | ">" expressionValue=ExpressionTag? "</property>");
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//ExpressionTag:
	//	"<expression>" value=Expression "</expression>";
	public ExpressionTagElements getExpressionTagAccess() {
		return (pExpressionTag != null) ? pExpressionTag : (pExpressionTag = new ExpressionTagElements());
	}
	
	public ParserRule getExpressionTagRule() {
		return getExpressionTagAccess().getRule();
	}

	//Expression returns TopLevel:
	//	expression=OrExpression;
	public NavajoExpressionGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaNavajoExpression.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaNavajoExpression.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaNavajoExpression.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaNavajoExpression.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaNavajoExpression.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaNavajoExpression.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaNavajoExpression.getANY_OTHERRule();
	} 

	////terminal LITERALSTRING	: 
	////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	////	;
	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | "..";
	public NavajoExpressionGrammarAccess.PathElementElements getPathElementAccess() {
		return gaNavajoExpression.getPathElementAccess();
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//PathSequence returns ecore::EString:
	//	"[" "/"? PathElement ("/" PathElement)* "]";
	public NavajoExpressionGrammarAccess.PathSequenceElements getPathSequenceAccess() {
		return gaNavajoExpression.getPathSequenceAccess();
	}
	
	public ParserRule getPathSequenceRule() {
		return getPathSequenceAccess().getRule();
	}

	//TmlExpression returns ecore::EString:
	//	PathSequence;
	public NavajoExpressionGrammarAccess.TmlExpressionElements getTmlExpressionAccess() {
		return gaNavajoExpression.getTmlExpressionAccess();
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ecore::EString:
	//	"?" TmlExpression;
	public NavajoExpressionGrammarAccess.ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return gaNavajoExpression.getExistsTmlExpressionAccess();
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//	{Expression} operands+=AndExpression (op="OR" operands+=AndExpression)*;
	public NavajoExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaNavajoExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	{Expression} operands+=EqualityExpression (op="AND" operands+=EqualityExpression)*;
	public NavajoExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaNavajoExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	{Expression} operands+=AdditiveExpression (op="==" operands+=AdditiveExpression | op="!="
	//	operands+=AdditiveExpression)?;
	public NavajoExpressionGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaNavajoExpression.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	////RelationalExpression returns Expression: 
	////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
	////    ;
	//AdditiveExpression returns Expression:
	//	{Expression} operands+=MultiplicativeExpression ("+" operands+=MultiplicativeExpression | "-"
	//	operands+=MultiplicativeExpression)*;
	public NavajoExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaNavajoExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	{Expression} operands+=UnaryExpression (op="*" operands+=UnaryExpression | op="/" operands+=UnaryExpression)*;
	public NavajoExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaNavajoExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	{Expression} op="!" operands+=PrimaryExpression | PrimaryExpression;
	public NavajoExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaNavajoExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	{Expression} operands+=Literal | "(" OrExpression ")";
	public NavajoExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaNavajoExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//FunctionName returns ecore::EString:
	//	ID;
	public NavajoExpressionGrammarAccess.FunctionNameElements getFunctionNameAccess() {
		return gaNavajoExpression.getFunctionNameAccess();
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionOperands returns Expression:
	//	{Expression} operands+=OrExpression? ("," operands+=OrExpression)*;
	public NavajoExpressionGrammarAccess.FunctionOperandsElements getFunctionOperandsAccess() {
		return gaNavajoExpression.getFunctionOperandsAccess();
	}
	
	public ParserRule getFunctionOperandsRule() {
		return getFunctionOperandsAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	op=FunctionName "(" functionoperands=FunctionOperands ")";
	public NavajoExpressionGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaNavajoExpression.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Literal returns Expression:
	//	{Expression} literal=INT //  | {Expression} literalstring=LITERALSTRING
	//	//  | {Expression} op='FORALL' '(' literalstring=LITERALSTRING ',' operands+=OrExpression ')'
	//	// TODO Add float
	//	| FunctionCall | {Expression} name=ExistsTmlExpression | {Expression} name=TmlExpression | {Expression} op="{"
	//	operands+=OrExpression? ("," operands+=OrExpression)* "}" | {Expression} op="NULL" | {Expression} op="TODAY" |
	//	{Expression} op="TRUE" | {Expression} op="FALSE";
	public NavajoExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaNavajoExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
