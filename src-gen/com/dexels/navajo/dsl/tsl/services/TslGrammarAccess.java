/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.tsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

@Singleton
public class TslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TmlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tml");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTmlAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cXMLHeadTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNAVASCRIPT_STARTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_4_0_0 = (RuleCall)cGroup_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_0_1 = (Alternatives)cGroup_4_0.eContents().get(1);
		private final Assignment cChildrenAssignment_4_0_1_0 = (Assignment)cAlternatives_4_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_4_0_1_0_0 = (RuleCall)cChildrenAssignment_4_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_1 = (Assignment)cAlternatives_4_0_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_4_0_1_1_0 = (RuleCall)cChildrenAssignment_4_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_2 = (Assignment)cAlternatives_4_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_4_0_1_2_0 = (RuleCall)cChildrenAssignment_4_0_1_2.eContents().get(0);
		private final Assignment cMethodsAssignment_4_0_1_3 = (Assignment)cAlternatives_4_0_1.eContents().get(3);
		private final RuleCall cMethodsMethodsParserRuleCall_4_0_1_3_0 = (RuleCall)cMethodsAssignment_4_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_4 = (Assignment)cAlternatives_4_0_1.eContents().get(4);
		private final RuleCall cChildrenDebugTagParserRuleCall_4_0_1_4_0 = (RuleCall)cChildrenAssignment_4_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_5 = (Assignment)cAlternatives_4_0_1.eContents().get(5);
		private final RuleCall cChildrenIncludeParserRuleCall_4_0_1_5_0 = (RuleCall)cChildrenAssignment_4_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_6 = (Assignment)cAlternatives_4_0_1.eContents().get(6);
		private final RuleCall cChildrenValidationsParserRuleCall_4_0_1_6_0 = (RuleCall)cChildrenAssignment_4_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_4_0_1_7 = (Assignment)cAlternatives_4_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_4_0_1_7_0 = (RuleCall)cChildrenAssignment_4_0_1_7.eContents().get(0);
		private final RuleCall cNAVASCRIPT_ENDTerminalRuleCall_4_0_2 = (RuleCall)cGroup_4_0.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		
		////com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
		////generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"
		//Tml:
		//	{Tml} XMLHead? NAVASCRIPT_START attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map |
		//	children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
		//	children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//{Tml} XMLHead? NAVASCRIPT_START attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map |
		//children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
		//children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//{Tml}
		public Action getTmlAction_0() { return cTmlAction_0; }

		//XMLHead?
		public RuleCall getXMLHeadTerminalRuleCall_1() { return cXMLHeadTerminalRuleCall_1; }

		//NAVASCRIPT_START
		public RuleCall getNAVASCRIPT_STARTTerminalRuleCall_2() { return cNAVASCRIPT_STARTTerminalRuleCall_2; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_3_0() { return cAttributesPossibleExpressionParserRuleCall_3_0; }

		//XML_TAG_END (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag |
		//children+=Include | children+=Validations | children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//XML_TAG_END (children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag |
		//children+=Include | children+=Validations | children+=Comment)* NAVASCRIPT_END
		public Group getGroup_4_0() { return cGroup_4_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_4_0_0() { return cXML_TAG_ENDTerminalRuleCall_4_0_0; }

		//(children+=Message | children+=Map | children+=Param | methods+=Methods | children+=DebugTag | children+=Include |
		//children+=Validations | children+=Comment)*
		public Alternatives getAlternatives_4_0_1() { return cAlternatives_4_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_4_0_1_0() { return cChildrenAssignment_4_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_4_0_1_0_0() { return cChildrenMessageParserRuleCall_4_0_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_4_0_1_1() { return cChildrenAssignment_4_0_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_4_0_1_1_0() { return cChildrenMapParserRuleCall_4_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_4_0_1_2() { return cChildrenAssignment_4_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_4_0_1_2_0() { return cChildrenParamParserRuleCall_4_0_1_2_0; }

		//methods+=Methods
		public Assignment getMethodsAssignment_4_0_1_3() { return cMethodsAssignment_4_0_1_3; }

		//Methods
		public RuleCall getMethodsMethodsParserRuleCall_4_0_1_3_0() { return cMethodsMethodsParserRuleCall_4_0_1_3_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_4_0_1_4() { return cChildrenAssignment_4_0_1_4; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_4_0_1_4_0() { return cChildrenDebugTagParserRuleCall_4_0_1_4_0; }

		//children+=Include
		public Assignment getChildrenAssignment_4_0_1_5() { return cChildrenAssignment_4_0_1_5; }

		//Include
		public RuleCall getChildrenIncludeParserRuleCall_4_0_1_5_0() { return cChildrenIncludeParserRuleCall_4_0_1_5_0; }

		//children+=Validations
		public Assignment getChildrenAssignment_4_0_1_6() { return cChildrenAssignment_4_0_1_6; }

		//Validations
		public RuleCall getChildrenValidationsParserRuleCall_4_0_1_6_0() { return cChildrenValidationsParserRuleCall_4_0_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_4_0_1_7() { return cChildrenAssignment_4_0_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_4_0_1_7_0() { return cChildrenCommentParserRuleCall_4_0_1_7_0; }

		//NAVASCRIPT_END
		public RuleCall getNAVASCRIPT_ENDTerminalRuleCall_4_0_2() { return cNAVASCRIPT_ENDTerminalRuleCall_4_0_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_4_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_4_1; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// might need to add a lot more kywords here 'message' | 'comment' 
		//AttributeName:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class PossibleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PossibleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamespaceAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNamespaceIDTerminalRuleCall_0_0_0 = (RuleCall)cNamespaceAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyAttributeNameParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cQUOTEQTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionValueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionValueTopLevelParserRuleCall_3_0_1_0 = (RuleCall)cExpressionValueAssignment_3_0_1.eContents().get(0);
		private final Assignment cEndTokenAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cEndTokenSEMICOLONQUOTETerminalRuleCall_3_0_2_0 = (RuleCall)cEndTokenAssignment_3_0_2.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cValueATTRIBUTESTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cValueEMPTYSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		
		//PossibleExpression:
		//	(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel endToken=SEMICOLONQUOTE |
		//	value=ATTRIBUTESTRING | value=EMPTYSTRING);
		public ParserRule getRule() { return rule; }

		//(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel endToken=SEMICOLONQUOTE |
		//value=ATTRIBUTESTRING | value=EMPTYSTRING)
		public Group getGroup() { return cGroup; }

		//(namespace=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//namespace=ID
		public Assignment getNamespaceAssignment_0_0() { return cNamespaceAssignment_0_0; }

		//ID
		public RuleCall getNamespaceIDTerminalRuleCall_0_0_0() { return cNamespaceIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//key=AttributeName
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//AttributeName
		public RuleCall getKeyAttributeNameParserRuleCall_1_0() { return cKeyAttributeNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//QUOTEQ expressionValue=TopLevel endToken=SEMICOLONQUOTE | value=ATTRIBUTESTRING | value=EMPTYSTRING
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//QUOTEQ expressionValue=TopLevel endToken=SEMICOLONQUOTE
		public Group getGroup_3_0() { return cGroup_3_0; }

		//QUOTEQ
		public RuleCall getQUOTEQTerminalRuleCall_3_0_0() { return cQUOTEQTerminalRuleCall_3_0_0; }

		//expressionValue=TopLevel
		public Assignment getExpressionValueAssignment_3_0_1() { return cExpressionValueAssignment_3_0_1; }

		//TopLevel
		public RuleCall getExpressionValueTopLevelParserRuleCall_3_0_1_0() { return cExpressionValueTopLevelParserRuleCall_3_0_1_0; }

		//endToken=SEMICOLONQUOTE
		public Assignment getEndTokenAssignment_3_0_2() { return cEndTokenAssignment_3_0_2; }

		//SEMICOLONQUOTE
		public RuleCall getEndTokenSEMICOLONQUOTETerminalRuleCall_3_0_2_0() { return cEndTokenSEMICOLONQUOTETerminalRuleCall_3_0_2_0; }

		//value=ATTRIBUTESTRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//ATTRIBUTESTRING
		public RuleCall getValueATTRIBUTESTRINGTerminalRuleCall_3_1_0() { return cValueATTRIBUTESTRINGTerminalRuleCall_3_1_0; }

		//value=EMPTYSTRING
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//EMPTYSTRING
		public RuleCall getValueEMPTYSTRINGTerminalRuleCall_3_2_0() { return cValueEMPTYSTRINGTerminalRuleCall_3_2_0; }
	}

	public class MethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Methods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMETHODS_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cSplitTagAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0 = (RuleCall)cSplitTagAssignment_2_0_0.eContents().get(0);
		private final Assignment cMethodAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_2_0_1_0 = (RuleCall)cMethodAssignment_2_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cClosedTagMETHODS_END_TAGTerminalRuleCall_2_0_2_0 = (RuleCall)cClosedTagAssignment_2_0_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Methods:
		//	METHODS_START_TAG {Methods} (splitTag?=XML_TAG_END method+=Method* closedTag?=METHODS_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//METHODS_START_TAG {Methods} (splitTag?=XML_TAG_END method+=Method* closedTag?=METHODS_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//METHODS_START_TAG
		public RuleCall getMETHODS_START_TAGTerminalRuleCall_0() { return cMETHODS_START_TAGTerminalRuleCall_0; }

		//{Methods}
		public Action getMethodsAction_1() { return cMethodsAction_1; }

		//splitTag?=XML_TAG_END method+=Method* closedTag?=METHODS_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//splitTag?=XML_TAG_END method+=Method* closedTag?=METHODS_END_TAG
		public Group getGroup_2_0() { return cGroup_2_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_2_0_0() { return cSplitTagAssignment_2_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0; }

		//method+=Method*
		public Assignment getMethodAssignment_2_0_1() { return cMethodAssignment_2_0_1; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_2_0_1_0() { return cMethodMethodParserRuleCall_2_0_1_0; }

		//closedTag?=METHODS_END_TAG
		public Assignment getClosedTagAssignment_2_0_2() { return cClosedTagAssignment_2_0_2; }

		//METHODS_END_TAG
		public RuleCall getClosedTagMETHODS_END_TAGTerminalRuleCall_2_0_2_0() { return cClosedTagMETHODS_END_TAGTerminalRuleCall_2_0_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMETHOD_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cChildrenRequiredParserRuleCall_3_0_1_0 = (RuleCall)cChildrenAssignment_3_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cClosedTagMETHOD_END_TAGTerminalRuleCall_3_0_2_0 = (RuleCall)cClosedTagAssignment_3_0_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Method:
		//	METHOD_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END children+=Required*
		//	closedTag?=METHOD_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//METHOD_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END children+=Required*
		//closedTag?=METHOD_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//METHOD_START_TAG
		public RuleCall getMETHOD_START_TAGTerminalRuleCall_0() { return cMETHOD_START_TAGTerminalRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END children+=Required* closedTag?=METHOD_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END children+=Required* closedTag?=METHOD_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		//children+=Required*
		public Assignment getChildrenAssignment_3_0_1() { return cChildrenAssignment_3_0_1; }

		//Required
		public RuleCall getChildrenRequiredParserRuleCall_3_0_1_0() { return cChildrenRequiredParserRuleCall_3_0_1_0; }

		//closedTag?=METHOD_END_TAG
		public Assignment getClosedTagAssignment_3_0_2() { return cClosedTagAssignment_3_0_2; }

		//METHOD_END_TAG
		public RuleCall getClosedTagMETHOD_END_TAGTerminalRuleCall_3_0_2_0() { return cClosedTagMETHOD_END_TAGTerminalRuleCall_3_0_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class ValidationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVALIDATIONS_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cValidationsAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cSplitTagAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0 = (RuleCall)cSplitTagAssignment_2_0_0.eContents().get(0);
		private final Assignment cChildrenAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cChildrenCheckParserRuleCall_2_0_1_0 = (RuleCall)cChildrenAssignment_2_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cClosedTagVALIDATIONS_END_TAGTerminalRuleCall_2_0_2_0 = (RuleCall)cClosedTagAssignment_2_0_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//Validations:
		//	VALIDATIONS_START_TAG {Validations} (splitTag?=XML_TAG_END children+=Check* closedTag?=VALIDATIONS_END_TAG |
		//	XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//VALIDATIONS_START_TAG {Validations} (splitTag?=XML_TAG_END children+=Check* closedTag?=VALIDATIONS_END_TAG |
		//XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//VALIDATIONS_START_TAG
		public RuleCall getVALIDATIONS_START_TAGTerminalRuleCall_0() { return cVALIDATIONS_START_TAGTerminalRuleCall_0; }

		//{Validations}
		public Action getValidationsAction_1() { return cValidationsAction_1; }

		//splitTag?=XML_TAG_END children+=Check* closedTag?=VALIDATIONS_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//splitTag?=XML_TAG_END children+=Check* closedTag?=VALIDATIONS_END_TAG
		public Group getGroup_2_0() { return cGroup_2_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_2_0_0() { return cSplitTagAssignment_2_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_2_0_0_0; }

		//children+=Check*
		public Assignment getChildrenAssignment_2_0_1() { return cChildrenAssignment_2_0_1; }

		//Check
		public RuleCall getChildrenCheckParserRuleCall_2_0_1_0() { return cChildrenCheckParserRuleCall_2_0_1_0; }

		//closedTag?=VALIDATIONS_END_TAG
		public Assignment getClosedTagAssignment_2_0_2() { return cClosedTagAssignment_2_0_2; }

		//VALIDATIONS_END_TAG
		public RuleCall getClosedTagVALIDATIONS_END_TAGTerminalRuleCall_2_0_2_0() { return cClosedTagVALIDATIONS_END_TAGTerminalRuleCall_2_0_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_1; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCHECK_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCheckAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_0_1_0 = (RuleCall)cExpressionAssignment_3_0_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cClosedTagCHECK_END_TAGTerminalRuleCall_3_0_2_0 = (RuleCall)cClosedTagAssignment_3_0_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Check:
		//	CHECK_START_TAG {Check} attributes+=PossibleExpression* (splitTag?=XML_TAG_END expression=TopLevel
		//	closedTag?=CHECK_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//CHECK_START_TAG {Check} attributes+=PossibleExpression* (splitTag?=XML_TAG_END expression=TopLevel
		//closedTag?=CHECK_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//CHECK_START_TAG
		public RuleCall getCHECK_START_TAGTerminalRuleCall_0() { return cCHECK_START_TAGTerminalRuleCall_0; }

		//{Check}
		public Action getCheckAction_1() { return cCheckAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END expression=TopLevel closedTag?=CHECK_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END expression=TopLevel closedTag?=CHECK_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_3_0_1() { return cExpressionAssignment_3_0_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_0_1_0() { return cExpressionTopLevelParserRuleCall_3_0_1_0; }

		//closedTag?=CHECK_END_TAG
		public Assignment getClosedTagAssignment_3_0_2() { return cClosedTagAssignment_3_0_2; }

		//CHECK_END_TAG
		public RuleCall getClosedTagCHECK_END_TAGTerminalRuleCall_3_0_2_0() { return cClosedTagCHECK_END_TAGTerminalRuleCall_3_0_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMENT_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cCommentAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cClosedTagCOMMENT_END_TAGTerminalRuleCall_3_0_1_0 = (RuleCall)cClosedTagAssignment_3_0_1.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Comment:
		//	COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
		//	closedTag?=COMMENT_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=COMMENT_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//COMMENT_START_TAG
		public RuleCall getCOMMENT_START_TAGTerminalRuleCall_0() { return cCOMMENT_START_TAGTerminalRuleCall_0; }

		//{Comment}
		public Action getCommentAction_1() { return cCommentAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=COMMENT_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=COMMENT_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		////		expression=TopLevel
		//closedTag?=COMMENT_END_TAG
		public Assignment getClosedTagAssignment_3_0_1() { return cClosedTagAssignment_3_0_1; }

		//COMMENT_END_TAG
		public RuleCall getClosedTagCOMMENT_END_TAGTerminalRuleCall_3_0_1_0() { return cClosedTagCOMMENT_END_TAGTerminalRuleCall_3_0_1_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBREAK_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cBreakAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cClosedTagBREAK_END_TAGTerminalRuleCall_3_0_1_0 = (RuleCall)cClosedTagAssignment_3_0_1.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Break:
		//	BREAK_START_TAG {Break} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
		//	closedTag?=BREAK_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//BREAK_START_TAG {Break} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=BREAK_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//BREAK_START_TAG
		public RuleCall getBREAK_START_TAGTerminalRuleCall_0() { return cBREAK_START_TAGTerminalRuleCall_0; }

		//{Break}
		public Action getBreakAction_1() { return cBreakAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=BREAK_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END //		expression=TopLevel
		//closedTag?=BREAK_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		////		expression=TopLevel
		//closedTag?=BREAK_END_TAG
		public Assignment getClosedTagAssignment_3_0_1() { return cClosedTagAssignment_3_0_1; }

		//BREAK_END_TAG
		public RuleCall getClosedTagBREAK_END_TAGTerminalRuleCall_3_0_1_0() { return cClosedTagBREAK_END_TAGTerminalRuleCall_3_0_1_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINCLUDE_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMethodAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cClosedTagINCLUDE_END_TAGTerminalRuleCall_3_0_1_0 = (RuleCall)cClosedTagAssignment_3_0_1.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//// create Include entity in Model
		//Include returns Method:
		//	INCLUDE_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END closedTag?=INCLUDE_END_TAG |
		//	XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//INCLUDE_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END closedTag?=INCLUDE_END_TAG |
		//XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//INCLUDE_START_TAG
		public RuleCall getINCLUDE_START_TAGTerminalRuleCall_0() { return cINCLUDE_START_TAGTerminalRuleCall_0; }

		//{Method}
		public Action getMethodAction_1() { return cMethodAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END closedTag?=INCLUDE_END_TAG | XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END closedTag?=INCLUDE_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		//closedTag?=INCLUDE_END_TAG
		public Assignment getClosedTagAssignment_3_0_1() { return cClosedTagAssignment_3_0_1; }

		//INCLUDE_END_TAG
		public RuleCall getClosedTagINCLUDE_END_TAGTerminalRuleCall_3_0_1_0() { return cClosedTagINCLUDE_END_TAGTerminalRuleCall_3_0_1_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMESSAGE_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMessageAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0 = (RuleCall)cSplitTagAssignment_3_0_0.eContents().get(0);
		private final Alternatives cAlternatives_3_0_1 = (Alternatives)cGroup_3_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_0_1_0 = (Assignment)cAlternatives_3_0_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_0_1_0_0 = (RuleCall)cChildrenAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_1 = (Assignment)cAlternatives_3_0_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_3_0_1_1_0 = (RuleCall)cChildrenAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_2 = (Assignment)cAlternatives_3_0_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_0_1_2_0 = (RuleCall)cChildrenAssignment_3_0_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_3 = (Assignment)cAlternatives_3_0_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_3_0_1_3_0 = (RuleCall)cChildrenAssignment_3_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_4 = (Assignment)cAlternatives_3_0_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_0_1_4_0 = (RuleCall)cChildrenAssignment_3_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_5 = (Assignment)cAlternatives_3_0_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_0_1_5_0 = (RuleCall)cChildrenAssignment_3_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_6 = (Assignment)cAlternatives_3_0_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_3_0_1_6_0 = (RuleCall)cChildrenAssignment_3_0_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_7 = (Assignment)cAlternatives_3_0_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_3_0_1_7_0 = (RuleCall)cChildrenAssignment_3_0_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_3_0_1_8 = (Assignment)cAlternatives_3_0_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_3_0_1_8_0 = (RuleCall)cChildrenAssignment_3_0_1_8.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cClosedTagMESSAGE_END_TAGTerminalRuleCall_3_0_2_0 = (RuleCall)cClosedTagAssignment_3_0_2.eContents().get(0);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Message:
		//	MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (splitTag?=XML_TAG_END (children+=Message |
		//	children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field |
		//	children+=Comment | children+=Break)* closedTag?=MESSAGE_END_TAG | XML_TAG_SINGLEEND);
		public ParserRule getRule() { return rule; }

		//MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (splitTag?=XML_TAG_END (children+=Message |
		//children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field |
		//children+=Comment | children+=Break)* closedTag?=MESSAGE_END_TAG | XML_TAG_SINGLEEND)
		public Group getGroup() { return cGroup; }

		//MESSAGE_START_TAG
		public RuleCall getMESSAGE_START_TAGTerminalRuleCall_0() { return cMESSAGE_START_TAGTerminalRuleCall_0; }

		//{Message}
		public Action getMessageAction_1() { return cMessageAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* closedTag?=MESSAGE_END_TAG |
		//XML_TAG_SINGLEEND
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* closedTag?=MESSAGE_END_TAG
		public Group getGroup_3_0() { return cGroup_3_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_0_0() { return cSplitTagAssignment_3_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_0_0_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_3_0_1() { return cAlternatives_3_0_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_0_1_0() { return cChildrenAssignment_3_0_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_0_1_0_0() { return cChildrenMessageParserRuleCall_3_0_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_3_0_1_1() { return cChildrenAssignment_3_0_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_3_0_1_1_0() { return cChildrenPropertyParserRuleCall_3_0_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_0_1_2() { return cChildrenAssignment_3_0_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_0_1_2_0() { return cChildrenParamParserRuleCall_3_0_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_0_1_3() { return cChildrenAssignment_3_0_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_0_1_3_0() { return cChildrenMapParserRuleCall_3_0_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_0_1_4() { return cChildrenAssignment_3_0_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_0_1_4_0() { return cChildrenMapMethodParserRuleCall_3_0_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_0_1_5() { return cChildrenAssignment_3_0_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_0_1_5_0() { return cChildrenDebugTagParserRuleCall_3_0_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_3_0_1_6() { return cChildrenAssignment_3_0_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_3_0_1_6_0() { return cChildrenFieldParserRuleCall_3_0_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_0_1_7() { return cChildrenAssignment_3_0_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_0_1_7_0() { return cChildrenCommentParserRuleCall_3_0_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_0_1_8() { return cChildrenAssignment_3_0_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_0_1_8_0() { return cChildrenBreakParserRuleCall_3_0_1_8_0; }

		//closedTag?=MESSAGE_END_TAG
		public Assignment getClosedTagAssignment_3_0_2() { return cClosedTagAssignment_3_0_2; }

		//MESSAGE_END_TAG
		public RuleCall getClosedTagMESSAGE_END_TAGTerminalRuleCall_3_0_2_0() { return cClosedTagMESSAGE_END_TAGTerminalRuleCall_3_0_2_0; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_1() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_1; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAPSTARTKEYWORDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cMapAction_1 = (Action)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cMapNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMapNameMapIdParserRuleCall_2_0_1_0 = (RuleCall)cMapNameAssignment_2_0_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0_2_0 = (RuleCall)cAttributesAssignment_2_0_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cSplitTagAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0 = (RuleCall)cSplitTagAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenMessageParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenPropertyParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_2 = (Assignment)cAlternatives_3_1_1.eContents().get(2);
		private final RuleCall cChildrenParamParserRuleCall_3_1_1_2_0 = (RuleCall)cChildrenAssignment_3_1_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_3 = (Assignment)cAlternatives_3_1_1.eContents().get(3);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_3_0 = (RuleCall)cChildrenAssignment_3_1_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_4 = (Assignment)cAlternatives_3_1_1.eContents().get(4);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_1_4_0 = (RuleCall)cChildrenAssignment_3_1_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_5 = (Assignment)cAlternatives_3_1_1.eContents().get(5);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_1_1_5_0 = (RuleCall)cChildrenAssignment_3_1_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_6 = (Assignment)cAlternatives_3_1_1.eContents().get(6);
		private final RuleCall cChildrenFieldParserRuleCall_3_1_1_6_0 = (RuleCall)cChildrenAssignment_3_1_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_7 = (Assignment)cAlternatives_3_1_1.eContents().get(7);
		private final RuleCall cChildrenCommentParserRuleCall_3_1_1_7_0 = (RuleCall)cChildrenAssignment_3_1_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_8 = (Assignment)cAlternatives_3_1_1.eContents().get(8);
		private final RuleCall cChildrenBreakParserRuleCall_3_1_1_8_0 = (RuleCall)cChildrenAssignment_3_1_1_8.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final RuleCall cMAPENDKEYWORDTerminalRuleCall_3_1_2_0 = (RuleCall)cGroup_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_2_1 = (Group)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_3_1_2_1_0 = (RuleCall)cGroup_3_1_2_1.eContents().get(0);
		private final Assignment cMapClosingNameAssignment_3_1_2_1_1 = (Assignment)cGroup_3_1_2_1.eContents().get(1);
		private final RuleCall cMapClosingNameMapIdParserRuleCall_3_1_2_1_1_0 = (RuleCall)cMapClosingNameAssignment_3_1_2_1_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_2_2 = (Assignment)cGroup_3_1_2.eContents().get(2);
		private final RuleCall cClosedTagXML_TAG_ENDTerminalRuleCall_3_1_2_2_0 = (RuleCall)cClosedTagAssignment_3_1_2_2.eContents().get(0);
		
		//Map:
		//	MAPSTARTKEYWORD {Map} (DOT mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
		//	(XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//	children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (MAPENDKEYWORD (DOT
		//	mapClosingName=MapId)? closedTag?=XML_TAG_END));
		public ParserRule getRule() { return rule; }

		//MAPSTARTKEYWORD {Map} (DOT mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
		//(XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (MAPENDKEYWORD (DOT
		//mapClosingName=MapId)? closedTag?=XML_TAG_END))
		public Group getGroup() { return cGroup; }

		//MAPSTARTKEYWORD
		public RuleCall getMAPSTARTKEYWORDTerminalRuleCall_0() { return cMAPSTARTKEYWORDTerminalRuleCall_0; }

		//{Map}
		public Action getMapAction_1() { return cMapAction_1; }

		//DOT mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//DOT mapName=MapId attributes+=PossibleExpression*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2_0_0() { return cDOTTerminalRuleCall_2_0_0; }

		//mapName=MapId
		public Assignment getMapNameAssignment_2_0_1() { return cMapNameAssignment_2_0_1; }

		//MapId
		public RuleCall getMapNameMapIdParserRuleCall_2_0_1_0() { return cMapNameMapIdParserRuleCall_2_0_1_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2_0_2() { return cAttributesAssignment_2_0_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0_2_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_1_0() { return cAttributesPossibleExpressionParserRuleCall_2_1_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (MAPENDKEYWORD (DOT
		//mapClosingName=MapId)? closedTag?=XML_TAG_END)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (MAPENDKEYWORD (DOT mapClosingName=MapId)?
		//closedTag?=XML_TAG_END)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0() { return cSplitTagAssignment_3_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0; }

		//(children+=Message | children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=Message
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_3_1_1_0_0() { return cChildrenMessageParserRuleCall_3_1_1_0_0; }

		//children+=Property
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_3_1_1_1_0() { return cChildrenPropertyParserRuleCall_3_1_1_1_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_1_1_2() { return cChildrenAssignment_3_1_1_2; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_1_1_2_0() { return cChildrenParamParserRuleCall_3_1_1_2_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_3() { return cChildrenAssignment_3_1_1_3; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_3_0() { return cChildrenMapParserRuleCall_3_1_1_3_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_1_4() { return cChildrenAssignment_3_1_1_4; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_1_4_0() { return cChildrenMapMethodParserRuleCall_3_1_1_4_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_1_1_5() { return cChildrenAssignment_3_1_1_5; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_1_1_5_0() { return cChildrenDebugTagParserRuleCall_3_1_1_5_0; }

		//children+=Field
		public Assignment getChildrenAssignment_3_1_1_6() { return cChildrenAssignment_3_1_1_6; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_3_1_1_6_0() { return cChildrenFieldParserRuleCall_3_1_1_6_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_1_1_7() { return cChildrenAssignment_3_1_1_7; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_1_1_7_0() { return cChildrenCommentParserRuleCall_3_1_1_7_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_1_1_8() { return cChildrenAssignment_3_1_1_8; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_1_1_8_0() { return cChildrenBreakParserRuleCall_3_1_1_8_0; }

		//MAPENDKEYWORD (DOT mapClosingName=MapId)? closedTag?=XML_TAG_END
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//MAPENDKEYWORD
		public RuleCall getMAPENDKEYWORDTerminalRuleCall_3_1_2_0() { return cMAPENDKEYWORDTerminalRuleCall_3_1_2_0; }

		//(DOT mapClosingName=MapId)?
		public Group getGroup_3_1_2_1() { return cGroup_3_1_2_1; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_3_1_2_1_0() { return cDOTTerminalRuleCall_3_1_2_1_0; }

		//mapClosingName=MapId
		public Assignment getMapClosingNameAssignment_3_1_2_1_1() { return cMapClosingNameAssignment_3_1_2_1_1; }

		//MapId
		public RuleCall getMapClosingNameMapIdParserRuleCall_3_1_2_1_1_0() { return cMapClosingNameMapIdParserRuleCall_3_1_2_1_1_0; }

		//closedTag?=XML_TAG_END
		public Assignment getClosedTagAssignment_3_1_2_2() { return cClosedTagAssignment_3_1_2_2; }

		//XML_TAG_END
		public RuleCall getClosedTagXML_TAG_ENDTerminalRuleCall_3_1_2_2_0() { return cClosedTagXML_TAG_ENDTerminalRuleCall_3_1_2_2_0; }
	}

	public class MapIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapId");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MapId:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class RequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Required");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cREQUIRED_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cRequiredAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cSplitTagAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0 = (RuleCall)cSplitTagAssignment_3_1_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cClosedTagREQUIRED_END_TAGTerminalRuleCall_3_1_1_0 = (RuleCall)cClosedTagAssignment_3_1_1.eContents().get(0);
		
		//// doesn't seem to work. All are optional
		////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
		//// ToDo Add ALL types!
		//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
		////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
		////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
		////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
		//// The direction 'inout' has been deprecated, so I've left that one out.
		////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
		//// '1' this makes 1 a keyword
		////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
		//Required:
		//	REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//	closedTag?=REQUIRED_END_TAG);
		public ParserRule getRule() { return rule; }

		//REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//closedTag?=REQUIRED_END_TAG)
		public Group getGroup() { return cGroup; }

		//REQUIRED_START_TAG
		public RuleCall getREQUIRED_START_TAGTerminalRuleCall_0() { return cREQUIRED_START_TAGTerminalRuleCall_0; }

		//{Required}
		public Action getRequiredAction_1() { return cRequiredAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END closedTag?=REQUIRED_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//splitTag?=XML_TAG_END closedTag?=REQUIRED_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0() { return cSplitTagAssignment_3_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0; }

		//closedTag?=REQUIRED_END_TAG
		public Assignment getClosedTagAssignment_3_1_1() { return cClosedTagAssignment_3_1_1; }

		//REQUIRED_END_TAG
		public RuleCall getClosedTagREQUIRED_END_TAGTerminalRuleCall_3_1_1_0() { return cClosedTagREQUIRED_END_TAGTerminalRuleCall_3_1_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPROPERTY_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cPropertyAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cSplitTagAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0 = (RuleCall)cSplitTagAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cClosedTagPROPERTY_END_TAGTerminalRuleCall_3_1_2_0 = (RuleCall)cClosedTagAssignment_3_1_2.eContents().get(0);
		
		//Property:
		//	PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//	(children+=ExpressionOrOption | children+=Map)* closedTag?=PROPERTY_END_TAG);
		public ParserRule getRule() { return rule; }

		//PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//(children+=ExpressionOrOption | children+=Map)* closedTag?=PROPERTY_END_TAG)
		public Group getGroup() { return cGroup; }

		//PROPERTY_START_TAG
		public RuleCall getPROPERTY_START_TAGTerminalRuleCall_0() { return cPROPERTY_START_TAGTerminalRuleCall_0; }

		//{Property}
		public Action getPropertyAction_1() { return cPropertyAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Map)* closedTag?=PROPERTY_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Map)* closedTag?=PROPERTY_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0() { return cSplitTagAssignment_3_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0; }

		//(children+=ExpressionOrOption | children+=Map)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_1_0() { return cChildrenMapParserRuleCall_3_1_1_1_0; }

		//closedTag?=PROPERTY_END_TAG
		public Assignment getClosedTagAssignment_3_1_2() { return cClosedTagAssignment_3_1_2; }

		//PROPERTY_END_TAG
		public RuleCall getClosedTagPROPERTY_END_TAGTerminalRuleCall_3_1_2_0() { return cClosedTagPROPERTY_END_TAGTerminalRuleCall_3_1_2_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPARAM_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cParamAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cSplitTagAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0 = (RuleCall)cSplitTagAssignment_3_1_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_1_0 = (Assignment)cAlternatives_3_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0 = (RuleCall)cChildrenAssignment_3_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_1_1 = (Assignment)cAlternatives_3_1_1.eContents().get(1);
		private final RuleCall cChildrenMapParserRuleCall_3_1_1_1_0 = (RuleCall)cChildrenAssignment_3_1_1_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cClosedTagPARAM_END_TAGTerminalRuleCall_3_1_2_0 = (RuleCall)cClosedTagAssignment_3_1_2.eContents().get(0);
		
		//Param:
		//	PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//	(children+=ExpressionOrOption | children+=Map)* closedTag?=PARAM_END_TAG);
		public ParserRule getRule() { return rule; }

		//PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//(children+=ExpressionOrOption | children+=Map)* closedTag?=PARAM_END_TAG)
		public Group getGroup() { return cGroup; }

		//PARAM_START_TAG
		public RuleCall getPARAM_START_TAGTerminalRuleCall_0() { return cPARAM_START_TAGTerminalRuleCall_0; }

		//{Param}
		public Action getParamAction_1() { return cParamAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Map)* closedTag?=PARAM_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Map)* closedTag?=PARAM_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0() { return cSplitTagAssignment_3_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0; }

		//(children+=ExpressionOrOption | children+=Map)*
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_1_0() { return cChildrenAssignment_3_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_1_1() { return cChildrenAssignment_3_1_1_1; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_1_1_0() { return cChildrenMapParserRuleCall_3_1_1_1_0; }

		//closedTag?=PARAM_END_TAG
		public Assignment getClosedTagAssignment_3_1_2() { return cClosedTagAssignment_3_1_2; }

		//PARAM_END_TAG
		public RuleCall getClosedTagPARAM_END_TAGTerminalRuleCall_3_1_2_0() { return cClosedTagPARAM_END_TAGTerminalRuleCall_3_1_2_0; }
	}

	public class MapMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMAP_METHOD_STARTTAG_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cMapNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMapNameIDTerminalRuleCall_1_0 = (RuleCall)cMapNameAssignment_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMethodNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodNameAttributeNameParserRuleCall_3_0 = (RuleCall)cMethodNameAssignment_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cSplitTagAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_5_1_0_0 = (RuleCall)cSplitTagAssignment_5_1_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_1 = (Alternatives)cGroup_5_1.eContents().get(1);
		private final Assignment cChildrenAssignment_5_1_1_0 = (Assignment)cAlternatives_5_1_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0 = (RuleCall)cChildrenAssignment_5_1_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_1 = (Assignment)cAlternatives_5_1_1.eContents().get(1);
		private final RuleCall cChildrenMessageParserRuleCall_5_1_1_1_0 = (RuleCall)cChildrenAssignment_5_1_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_2 = (Assignment)cAlternatives_5_1_1.eContents().get(2);
		private final RuleCall cChildrenPropertyParserRuleCall_5_1_1_2_0 = (RuleCall)cChildrenAssignment_5_1_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_3 = (Assignment)cAlternatives_5_1_1.eContents().get(3);
		private final RuleCall cChildrenParamParserRuleCall_5_1_1_3_0 = (RuleCall)cChildrenAssignment_5_1_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_4 = (Assignment)cAlternatives_5_1_1.eContents().get(4);
		private final RuleCall cChildrenMapParserRuleCall_5_1_1_4_0 = (RuleCall)cChildrenAssignment_5_1_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_5 = (Assignment)cAlternatives_5_1_1.eContents().get(5);
		private final RuleCall cChildrenMapMethodParserRuleCall_5_1_1_5_0 = (RuleCall)cChildrenAssignment_5_1_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_6 = (Assignment)cAlternatives_5_1_1.eContents().get(6);
		private final RuleCall cChildrenDebugTagParserRuleCall_5_1_1_6_0 = (RuleCall)cChildrenAssignment_5_1_1_6.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_7 = (Assignment)cAlternatives_5_1_1.eContents().get(7);
		private final RuleCall cChildrenFieldParserRuleCall_5_1_1_7_0 = (RuleCall)cChildrenAssignment_5_1_1_7.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_8 = (Assignment)cAlternatives_5_1_1.eContents().get(8);
		private final RuleCall cChildrenCommentParserRuleCall_5_1_1_8_0 = (RuleCall)cChildrenAssignment_5_1_1_8.eContents().get(0);
		private final Assignment cChildrenAssignment_5_1_1_9 = (Assignment)cAlternatives_5_1_1.eContents().get(9);
		private final RuleCall cChildrenBreakParserRuleCall_5_1_1_9_0 = (RuleCall)cChildrenAssignment_5_1_1_9.eContents().get(0);
		private final Assignment cClosedTagAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cClosedTagMAP_METHOD_ENDTAG_STARTTerminalRuleCall_5_1_2_0 = (RuleCall)cClosedTagAssignment_5_1_2.eContents().get(0);
		private final Assignment cMethodClosingNameAssignment_5_1_3 = (Assignment)cGroup_5_1.eContents().get(3);
		private final RuleCall cMethodClosingNameIDTerminalRuleCall_5_1_3_0 = (RuleCall)cMethodClosingNameAssignment_5_1_3.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_5_1_4 = (RuleCall)cGroup_5_1.eContents().get(4);
		private final Assignment cMethodClosingMethodAssignment_5_1_5 = (Assignment)cGroup_5_1.eContents().get(5);
		private final RuleCall cMethodClosingMethodIDTerminalRuleCall_5_1_5_0 = (RuleCall)cMethodClosingMethodAssignment_5_1_5.eContents().get(0);
		private final RuleCall cXML_TAG_ENDTerminalRuleCall_5_1_6 = (RuleCall)cGroup_5_1.eContents().get(6);
		
		//MapMethod:
		//	MAP_METHOD_STARTTAG_START mapName=ID DOT methodName=AttributeName attributes+=PossibleExpression* (XML_TAG_SINGLEEND |
		//	splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
		//	children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		//	closedTag?=MAP_METHOD_ENDTAG_START methodClosingName=ID DOT methodClosingMethod=ID XML_TAG_END);
		public ParserRule getRule() { return rule; }

		//MAP_METHOD_STARTTAG_START mapName=ID DOT methodName=AttributeName attributes+=PossibleExpression* (XML_TAG_SINGLEEND |
		//splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
		//children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		//closedTag?=MAP_METHOD_ENDTAG_START methodClosingName=ID DOT methodClosingMethod=ID XML_TAG_END)
		public Group getGroup() { return cGroup; }

		//MAP_METHOD_STARTTAG_START
		public RuleCall getMAP_METHOD_STARTTAG_STARTTerminalRuleCall_0() { return cMAP_METHOD_STARTTAG_STARTTerminalRuleCall_0; }

		//mapName=ID
		public Assignment getMapNameAssignment_1() { return cMapNameAssignment_1; }

		//ID
		public RuleCall getMapNameIDTerminalRuleCall_1_0() { return cMapNameIDTerminalRuleCall_1_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_2() { return cDOTTerminalRuleCall_2; }

		//methodName=AttributeName
		public Assignment getMethodNameAssignment_3() { return cMethodNameAssignment_3; }

		//AttributeName
		public RuleCall getMethodNameAttributeNameParserRuleCall_3_0() { return cMethodNameAttributeNameParserRuleCall_3_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_4_0() { return cAttributesPossibleExpressionParserRuleCall_4_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Message | children+=Property |
		//children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment |
		//children+=Break)* closedTag?=MAP_METHOD_ENDTAG_START methodClosingName=ID DOT methodClosingMethod=ID XML_TAG_END
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_5_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_5_0; }

		//splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
		//children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		//closedTag?=MAP_METHOD_ENDTAG_START methodClosingName=ID DOT methodClosingMethod=ID XML_TAG_END
		public Group getGroup_5_1() { return cGroup_5_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_5_1_0() { return cSplitTagAssignment_5_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_5_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_5_1_0_0; }

		//(children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
		public Alternatives getAlternatives_5_1_1() { return cAlternatives_5_1_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_5_1_1_0() { return cChildrenAssignment_5_1_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_5_1_1_0_0; }

		//children+=Message
		public Assignment getChildrenAssignment_5_1_1_1() { return cChildrenAssignment_5_1_1_1; }

		//Message
		public RuleCall getChildrenMessageParserRuleCall_5_1_1_1_0() { return cChildrenMessageParserRuleCall_5_1_1_1_0; }

		//children+=Property
		public Assignment getChildrenAssignment_5_1_1_2() { return cChildrenAssignment_5_1_1_2; }

		//Property
		public RuleCall getChildrenPropertyParserRuleCall_5_1_1_2_0() { return cChildrenPropertyParserRuleCall_5_1_1_2_0; }

		//children+=Param
		public Assignment getChildrenAssignment_5_1_1_3() { return cChildrenAssignment_5_1_1_3; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_5_1_1_3_0() { return cChildrenParamParserRuleCall_5_1_1_3_0; }

		//children+=Map
		public Assignment getChildrenAssignment_5_1_1_4() { return cChildrenAssignment_5_1_1_4; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_5_1_1_4_0() { return cChildrenMapParserRuleCall_5_1_1_4_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_5_1_1_5() { return cChildrenAssignment_5_1_1_5; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_5_1_1_5_0() { return cChildrenMapMethodParserRuleCall_5_1_1_5_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_5_1_1_6() { return cChildrenAssignment_5_1_1_6; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_5_1_1_6_0() { return cChildrenDebugTagParserRuleCall_5_1_1_6_0; }

		//children+=Field
		public Assignment getChildrenAssignment_5_1_1_7() { return cChildrenAssignment_5_1_1_7; }

		//Field
		public RuleCall getChildrenFieldParserRuleCall_5_1_1_7_0() { return cChildrenFieldParserRuleCall_5_1_1_7_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_5_1_1_8() { return cChildrenAssignment_5_1_1_8; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_5_1_1_8_0() { return cChildrenCommentParserRuleCall_5_1_1_8_0; }

		//children+=Break
		public Assignment getChildrenAssignment_5_1_1_9() { return cChildrenAssignment_5_1_1_9; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_5_1_1_9_0() { return cChildrenBreakParserRuleCall_5_1_1_9_0; }

		//closedTag?=MAP_METHOD_ENDTAG_START
		public Assignment getClosedTagAssignment_5_1_2() { return cClosedTagAssignment_5_1_2; }

		//MAP_METHOD_ENDTAG_START
		public RuleCall getClosedTagMAP_METHOD_ENDTAG_STARTTerminalRuleCall_5_1_2_0() { return cClosedTagMAP_METHOD_ENDTAG_STARTTerminalRuleCall_5_1_2_0; }

		//methodClosingName=ID
		public Assignment getMethodClosingNameAssignment_5_1_3() { return cMethodClosingNameAssignment_5_1_3; }

		//ID
		public RuleCall getMethodClosingNameIDTerminalRuleCall_5_1_3_0() { return cMethodClosingNameIDTerminalRuleCall_5_1_3_0; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_5_1_4() { return cDOTTerminalRuleCall_5_1_4; }

		//methodClosingMethod=ID
		public Assignment getMethodClosingMethodAssignment_5_1_5() { return cMethodClosingMethodAssignment_5_1_5; }

		//ID
		public RuleCall getMethodClosingMethodIDTerminalRuleCall_5_1_5_0() { return cMethodClosingMethodIDTerminalRuleCall_5_1_5_0; }

		//XML_TAG_END
		public RuleCall getXML_TAG_ENDTerminalRuleCall_5_1_6() { return cXML_TAG_ENDTerminalRuleCall_5_1_6; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFIELD_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cFieldAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cSplitTagAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0_0 = (RuleCall)cSplitTagAssignment_3_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1_0_1 = (Alternatives)cGroup_3_1_0.eContents().get(1);
		private final Assignment cChildrenAssignment_3_1_0_1_0 = (Assignment)cAlternatives_3_1_0_1.eContents().get(0);
		private final RuleCall cChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0 = (RuleCall)cChildrenAssignment_3_1_0_1_0.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_1 = (Assignment)cAlternatives_3_1_0_1.eContents().get(1);
		private final RuleCall cChildrenParamParserRuleCall_3_1_0_1_1_0 = (RuleCall)cChildrenAssignment_3_1_0_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_2 = (Assignment)cAlternatives_3_1_0_1.eContents().get(2);
		private final RuleCall cChildrenMapParserRuleCall_3_1_0_1_2_0 = (RuleCall)cChildrenAssignment_3_1_0_1_2.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_3 = (Assignment)cAlternatives_3_1_0_1.eContents().get(3);
		private final RuleCall cChildrenMapMethodParserRuleCall_3_1_0_1_3_0 = (RuleCall)cChildrenAssignment_3_1_0_1_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_4 = (Assignment)cAlternatives_3_1_0_1.eContents().get(4);
		private final RuleCall cChildrenDebugTagParserRuleCall_3_1_0_1_4_0 = (RuleCall)cChildrenAssignment_3_1_0_1_4.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_5 = (Assignment)cAlternatives_3_1_0_1.eContents().get(5);
		private final RuleCall cChildrenCommentParserRuleCall_3_1_0_1_5_0 = (RuleCall)cChildrenAssignment_3_1_0_1_5.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_0_1_6 = (Assignment)cAlternatives_3_1_0_1.eContents().get(6);
		private final RuleCall cChildrenBreakParserRuleCall_3_1_0_1_6_0 = (RuleCall)cChildrenAssignment_3_1_0_1_6.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cClosedTagFIELD_END_TAGTerminalRuleCall_3_1_1_0 = (RuleCall)cClosedTagAssignment_3_1_1.eContents().get(0);
		
		//Field:
		//	FIELD_START_TAG {Field} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | (splitTag?=XML_TAG_END
		//	(children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//	children+=Comment | children+=Break)*) closedTag?=FIELD_END_TAG);
		public ParserRule getRule() { return rule; }

		//FIELD_START_TAG {Field} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | (splitTag?=XML_TAG_END
		//(children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Comment | children+=Break)*) closedTag?=FIELD_END_TAG)
		public Group getGroup() { return cGroup; }

		//FIELD_START_TAG
		public RuleCall getFIELD_START_TAGTerminalRuleCall_0() { return cFIELD_START_TAGTerminalRuleCall_0; }

		//{Field}
		public Action getFieldAction_1() { return cFieldAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | (splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Param | children+=Map |
		//children+=MapMethod | children+=DebugTag | children+=Comment | children+=Break)*) closedTag?=FIELD_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//(splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Comment | children+=Break)*) closedTag?=FIELD_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod |
		//children+=DebugTag | children+=Comment | children+=Break)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0_0() { return cSplitTagAssignment_3_1_0_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0_0; }

		//(children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
		//children+=Comment | children+=Break)*
		public Alternatives getAlternatives_3_1_0_1() { return cAlternatives_3_1_0_1; }

		//children+=ExpressionOrOption
		public Assignment getChildrenAssignment_3_1_0_1_0() { return cChildrenAssignment_3_1_0_1_0; }

		//ExpressionOrOption
		public RuleCall getChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0() { return cChildrenExpressionOrOptionParserRuleCall_3_1_0_1_0_0; }

		//children+=Param
		public Assignment getChildrenAssignment_3_1_0_1_1() { return cChildrenAssignment_3_1_0_1_1; }

		//Param
		public RuleCall getChildrenParamParserRuleCall_3_1_0_1_1_0() { return cChildrenParamParserRuleCall_3_1_0_1_1_0; }

		//children+=Map
		public Assignment getChildrenAssignment_3_1_0_1_2() { return cChildrenAssignment_3_1_0_1_2; }

		//Map
		public RuleCall getChildrenMapParserRuleCall_3_1_0_1_2_0() { return cChildrenMapParserRuleCall_3_1_0_1_2_0; }

		//children+=MapMethod
		public Assignment getChildrenAssignment_3_1_0_1_3() { return cChildrenAssignment_3_1_0_1_3; }

		//MapMethod
		public RuleCall getChildrenMapMethodParserRuleCall_3_1_0_1_3_0() { return cChildrenMapMethodParserRuleCall_3_1_0_1_3_0; }

		//children+=DebugTag
		public Assignment getChildrenAssignment_3_1_0_1_4() { return cChildrenAssignment_3_1_0_1_4; }

		//DebugTag
		public RuleCall getChildrenDebugTagParserRuleCall_3_1_0_1_4_0() { return cChildrenDebugTagParserRuleCall_3_1_0_1_4_0; }

		//children+=Comment
		public Assignment getChildrenAssignment_3_1_0_1_5() { return cChildrenAssignment_3_1_0_1_5; }

		//Comment
		public RuleCall getChildrenCommentParserRuleCall_3_1_0_1_5_0() { return cChildrenCommentParserRuleCall_3_1_0_1_5_0; }

		//children+=Break
		public Assignment getChildrenAssignment_3_1_0_1_6() { return cChildrenAssignment_3_1_0_1_6; }

		//Break
		public RuleCall getChildrenBreakParserRuleCall_3_1_0_1_6_0() { return cChildrenBreakParserRuleCall_3_1_0_1_6_0; }

		//closedTag?=FIELD_END_TAG
		public Assignment getClosedTagAssignment_3_1_1() { return cClosedTagAssignment_3_1_1; }

		//FIELD_END_TAG
		public RuleCall getClosedTagFIELD_END_TAGTerminalRuleCall_3_1_1_0() { return cClosedTagFIELD_END_TAGTerminalRuleCall_3_1_1_0; }
	}

	public class DebugTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DebugTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEBUG_START_TAGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cDebugTagAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cSplitTagAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0 = (RuleCall)cSplitTagAssignment_3_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_3_1_1_0 = (RuleCall)cExpressionAssignment_3_1_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cClosedTagDEBUG_END_TAGTerminalRuleCall_3_1_2_0 = (RuleCall)cClosedTagAssignment_3_1_2.eContents().get(0);
		
		//DebugTag:
		//	DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//	expression=TopLevel? closedTag?=DEBUG_END_TAG);
		public ParserRule getRule() { return rule; }

		//DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
		//expression=TopLevel? closedTag?=DEBUG_END_TAG)
		public Group getGroup() { return cGroup; }

		//DEBUG_START_TAG
		public RuleCall getDEBUG_START_TAGTerminalRuleCall_0() { return cDEBUG_START_TAGTerminalRuleCall_0; }

		//{DebugTag}
		public Action getDebugTagAction_1() { return cDebugTagAction_1; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_2_0() { return cAttributesPossibleExpressionParserRuleCall_2_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END expression=TopLevel? closedTag?=DEBUG_END_TAG
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_3_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_3_0; }

		//splitTag?=XML_TAG_END expression=TopLevel? closedTag?=DEBUG_END_TAG
		public Group getGroup_3_1() { return cGroup_3_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_3_1_0() { return cSplitTagAssignment_3_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_3_1_0_0; }

		//expression=TopLevel?
		public Assignment getExpressionAssignment_3_1_1() { return cExpressionAssignment_3_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_3_1_1_0() { return cExpressionTopLevelParserRuleCall_3_1_1_0; }

		//closedTag?=DEBUG_END_TAG
		public Assignment getClosedTagAssignment_3_1_2() { return cClosedTagAssignment_3_1_2; }

		//DEBUG_END_TAG
		public RuleCall getClosedTagDEBUG_END_TAGTerminalRuleCall_3_1_2_0() { return cClosedTagDEBUG_END_TAGTerminalRuleCall_3_1_2_0; }
	}

	public class ExpressionOrOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionOrOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEXPRESSION_START_TAGTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionTagParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOPTION_START_TAGTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ExpressionOrOption returns Element:
		//	EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option;
		public ParserRule getRule() { return rule; }

		//EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXPRESSION_START_TAG ExpressionTag
		public Group getGroup_0() { return cGroup_0; }

		//EXPRESSION_START_TAG
		public RuleCall getEXPRESSION_START_TAGTerminalRuleCall_0_0() { return cEXPRESSION_START_TAGTerminalRuleCall_0_0; }

		//ExpressionTag
		public RuleCall getExpressionTagParserRuleCall_0_1() { return cExpressionTagParserRuleCall_0_1; }

		//OPTION_START_TAG Option
		public Group getGroup_1() { return cGroup_1; }

		//OPTION_START_TAG
		public RuleCall getOPTION_START_TAGTerminalRuleCall_1_0() { return cOPTION_START_TAGTerminalRuleCall_1_0; }

		//Option
		public RuleCall getOptionParserRuleCall_1_1() { return cOptionParserRuleCall_1_1; }
	}

	public class ExpressionTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cSplitTagAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0 = (RuleCall)cSplitTagAssignment_2_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionTopLevelParserRuleCall_2_1_1_0 = (RuleCall)cExpressionAssignment_2_1_1.eContents().get(0);
		private final Assignment cClosedTagAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0 = (RuleCall)cClosedTagAssignment_2_1_2.eContents().get(0);
		
		//ExpressionTag:
		//	{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END expression=TopLevel
		//	closedTag?=EXPRESSION_END_TAG);
		public ParserRule getRule() { return rule; }

		//{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END expression=TopLevel
		//closedTag?=EXPRESSION_END_TAG)
		public Group getGroup() { return cGroup; }

		//{ExpressionTag}
		public Action getExpressionTagAction_0() { return cExpressionTagAction_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_1_0() { return cAttributesPossibleExpressionParserRuleCall_1_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END expression=TopLevel closedTag?=EXPRESSION_END_TAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_0; }

		//splitTag?=XML_TAG_END expression=TopLevel closedTag?=EXPRESSION_END_TAG
		public Group getGroup_2_1() { return cGroup_2_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_2_1_0() { return cSplitTagAssignment_2_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0; }

		//expression=TopLevel
		public Assignment getExpressionAssignment_2_1_1() { return cExpressionAssignment_2_1_1; }

		//TopLevel
		public RuleCall getExpressionTopLevelParserRuleCall_2_1_1_0() { return cExpressionTopLevelParserRuleCall_2_1_1_0; }

		//closedTag?=EXPRESSION_END_TAG
		public Assignment getClosedTagAssignment_2_1_2() { return cClosedTagAssignment_2_1_2; }

		//EXPRESSION_END_TAG
		public RuleCall getClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0() { return cClosedTagEXPRESSION_END_TAGTerminalRuleCall_2_1_2_0; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesPossibleExpressionParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cXML_TAG_SINGLEENDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cSplitTagAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0 = (RuleCall)cSplitTagAssignment_2_1_0.eContents().get(0);
		private final Assignment cClosedTagAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cClosedTagOPTION_END_TAGTerminalRuleCall_2_1_1_0 = (RuleCall)cClosedTagAssignment_2_1_1.eContents().get(0);
		
		//Option:
		//	{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END closedTag?=OPTION_END_TAG);
		public ParserRule getRule() { return rule; }

		//{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END closedTag?=OPTION_END_TAG)
		public Group getGroup() { return cGroup; }

		//{Option}
		public Action getOptionAction_0() { return cOptionAction_0; }

		//attributes+=PossibleExpression*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//PossibleExpression
		public RuleCall getAttributesPossibleExpressionParserRuleCall_1_0() { return cAttributesPossibleExpressionParserRuleCall_1_0; }

		//XML_TAG_SINGLEEND | splitTag?=XML_TAG_END closedTag?=OPTION_END_TAG
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//XML_TAG_SINGLEEND
		public RuleCall getXML_TAG_SINGLEENDTerminalRuleCall_2_0() { return cXML_TAG_SINGLEENDTerminalRuleCall_2_0; }

		//splitTag?=XML_TAG_END closedTag?=OPTION_END_TAG
		public Group getGroup_2_1() { return cGroup_2_1; }

		//splitTag?=XML_TAG_END
		public Assignment getSplitTagAssignment_2_1_0() { return cSplitTagAssignment_2_1_0; }

		//XML_TAG_END
		public RuleCall getSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0() { return cSplitTagXML_TAG_ENDTerminalRuleCall_2_1_0_0; }

		//closedTag?=OPTION_END_TAG
		public Assignment getClosedTagAssignment_2_1_1() { return cClosedTagAssignment_2_1_1; }

		//OPTION_END_TAG
		public RuleCall getClosedTagOPTION_END_TAGTerminalRuleCall_2_1_1_0() { return cClosedTagOPTION_END_TAGTerminalRuleCall_2_1_1_0; }
	}
	
	
	private TmlElements pTml;
	private TerminalRule tXMLHead;
	private TerminalRule tXMLComment;
	private TerminalRule tQUOTEQ;
	private TerminalRule tSEMICOLONQUOTE;
	private TerminalRule tDOT;
	private TerminalRule tDEBUG_START_TAG;
	private TerminalRule tDEBUG_END_TAG;
	private TerminalRule tEMPTYSTRING;
	private TerminalRule tATTRIBUTESTRING;
	private TerminalRule tXML_START_ENDTAG;
	private TerminalRule tXML_TAG_END;
	private TerminalRule tXML_TAG_SINGLEEND;
	private TerminalRule tMAP_METHOD_STARTTAG_START;
	private TerminalRule tMAP_METHOD_ENDTAG_START;
	private TerminalRule tMAPENDKEYWORD;
	private TerminalRule tMAPSTARTKEYWORD;
	private TerminalRule tINCLUDE_START_TAG;
	private TerminalRule tPROPERTY_START_TAG;
	private TerminalRule tREQUIRED_START_TAG;
	private TerminalRule tVALIDATIONS_START_TAG;
	private TerminalRule tCHECK_START_TAG;
	private TerminalRule tCOMMENT_START_TAG;
	private TerminalRule tBREAK_START_TAG;
	private TerminalRule tOPTION_START_TAG;
	private TerminalRule tBREAK_END_TAG;
	private TerminalRule tOPTION_END_TAG;
	private TerminalRule tREQUIRED_END_TAG;
	private TerminalRule tINCLUDE_END_TAG;
	private TerminalRule tPROPERTY_END_TAG;
	private TerminalRule tCOMMENT_END_TAG;
	private TerminalRule tVALIDATIONS_END_TAG;
	private TerminalRule tCHECK_END_TAG;
	private TerminalRule tPARAM_END_TAG;
	private TerminalRule tMESSAGE_END_TAG;
	private TerminalRule tMETHODS_END_TAG;
	private TerminalRule tMETHOD_END_TAG;
	private TerminalRule tFIELD_END_TAG;
	private TerminalRule tEXPRESSION_START_TAG;
	private TerminalRule tEXPRESSION_END_TAG;
	private TerminalRule tPARAM_START_TAG;
	private TerminalRule tMESSAGE_START_TAG;
	private TerminalRule tMETHOD_START_TAG;
	private TerminalRule tMETHODS_START_TAG;
	private TerminalRule tFIELD_START_TAG;
	private TerminalRule tNAVASCRIPT_START;
	private TerminalRule tNAVASCRIPT_END;
	private AttributeNameElements pAttributeName;
	private PossibleExpressionElements pPossibleExpression;
	private MethodsElements pMethods;
	private MethodElements pMethod;
	private ValidationsElements pValidations;
	private CheckElements pCheck;
	private CommentElements pComment;
	private BreakElements pBreak;
	private IncludeElements pInclude;
	private MessageElements pMessage;
	private MapElements pMap;
	private MapIdElements pMapId;
	private RequiredElements pRequired;
	private PropertyElements pProperty;
	private ParamElements pParam;
	private MapMethodElements pMapMethod;
	private FieldElements pField;
	private DebugTagElements pDebugTag;
	private ExpressionOrOptionElements pExpressionOrOption;
	private ExpressionTagElements pExpressionTag;
	private OptionElements pOption;
	
	private final GrammarProvider grammarProvider;

	private NavajoExpressionGrammarAccess gaNavajoExpression;

	@Inject
	public TslGrammarAccess(GrammarProvider grammarProvider,
		NavajoExpressionGrammarAccess gaNavajoExpression) {
		this.grammarProvider = grammarProvider;
		this.gaNavajoExpression = gaNavajoExpression;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public NavajoExpressionGrammarAccess getNavajoExpressionGrammarAccess() {
		return gaNavajoExpression;
	}

	
	////com.dexels.navajo.dsl.expression/src-gen/com/dexels.navajo/dsl/expression/NavajoExpression.ecore"
	////generate tsl "http://www.dexels.com/navajo/dsl/tsl/NavajoTsl"
	//Tml:
	//	{Tml} XMLHead? NAVASCRIPT_START attributes+=PossibleExpression* (XML_TAG_END (children+=Message | children+=Map |
	//	children+=Param | methods+=Methods | children+=DebugTag | children+=Include | children+=Validations |
	//	children+=Comment)* NAVASCRIPT_END | XML_TAG_SINGLEEND);
	public TmlElements getTmlAccess() {
		return (pTml != null) ? pTml : (pTml = new TmlElements());
	}
	
	public ParserRule getTmlRule() {
		return getTmlAccess().getRule();
	}

	//terminal XMLHead:
	//	"<?"->"?>";
	public TerminalRule getXMLHeadRule() {
		return (tXMLHead != null) ? tXMLHead : (tXMLHead = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLHead"));
	} 

	//terminal XMLComment:
	//	"<!--"->"-->";
	public TerminalRule getXMLCommentRule() {
		return (tXMLComment != null) ? tXMLComment : (tXMLComment = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XMLComment"));
	} 

	//terminal QUOTEQ:
	//	"\"=";
	public TerminalRule getQUOTEQRule() {
		return (tQUOTEQ != null) ? tQUOTEQ : (tQUOTEQ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUOTEQ"));
	} 

	//terminal SEMICOLONQUOTE:
	//	";\"";
	public TerminalRule getSEMICOLONQUOTERule() {
		return (tSEMICOLONQUOTE != null) ? tSEMICOLONQUOTE : (tSEMICOLONQUOTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLONQUOTE"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal DEBUG_START_TAG:
	//	"<debug";
	public TerminalRule getDEBUG_START_TAGRule() {
		return (tDEBUG_START_TAG != null) ? tDEBUG_START_TAG : (tDEBUG_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEBUG_START_TAG"));
	} 

	//terminal DEBUG_END_TAG:
	//	"</debug" XML_TAG_END;
	public TerminalRule getDEBUG_END_TAGRule() {
		return (tDEBUG_END_TAG != null) ? tDEBUG_END_TAG : (tDEBUG_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEBUG_END_TAG"));
	} 

	////terminal NAVASCRIPT_START:
	////	'<navascript';
	//terminal EMPTYSTRING:
	//	"\"\"";
	public TerminalRule getEMPTYSTRINGRule() {
		return (tEMPTYSTRING != null) ? tEMPTYSTRING : (tEMPTYSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTYSTRING"));
	} 

	//terminal ATTRIBUTESTRING:
	//	"\"" !("=" | "\"")* "\"";
	public TerminalRule getATTRIBUTESTRINGRule() {
		return (tATTRIBUTESTRING != null) ? tATTRIBUTESTRING : (tATTRIBUTESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTRIBUTESTRING"));
	} 

	//terminal XML_START_ENDTAG:
	//	"</";
	public TerminalRule getXML_START_ENDTAGRule() {
		return (tXML_START_ENDTAG != null) ? tXML_START_ENDTAG : (tXML_START_ENDTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_START_ENDTAG"));
	} 

	//terminal XML_TAG_END:
	//	">";
	public TerminalRule getXML_TAG_ENDRule() {
		return (tXML_TAG_END != null) ? tXML_TAG_END : (tXML_TAG_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_END"));
	} 

	//terminal XML_TAG_SINGLEEND:
	//	"/>";
	public TerminalRule getXML_TAG_SINGLEENDRule() {
		return (tXML_TAG_SINGLEEND != null) ? tXML_TAG_SINGLEEND : (tXML_TAG_SINGLEEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XML_TAG_SINGLEEND"));
	} 

	//terminal MAP_METHOD_STARTTAG_START:
	//	"<_";
	public TerminalRule getMAP_METHOD_STARTTAG_STARTRule() {
		return (tMAP_METHOD_STARTTAG_START != null) ? tMAP_METHOD_STARTTAG_START : (tMAP_METHOD_STARTTAG_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAP_METHOD_STARTTAG_START"));
	} 

	//terminal MAP_METHOD_ENDTAG_START:
	//	"</_";
	public TerminalRule getMAP_METHOD_ENDTAG_STARTRule() {
		return (tMAP_METHOD_ENDTAG_START != null) ? tMAP_METHOD_ENDTAG_START : (tMAP_METHOD_ENDTAG_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAP_METHOD_ENDTAG_START"));
	} 

	////terminal XML_TAG_START: '<';
	//terminal MAPENDKEYWORD:
	//	"</map";
	public TerminalRule getMAPENDKEYWORDRule() {
		return (tMAPENDKEYWORD != null) ? tMAPENDKEYWORD : (tMAPENDKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAPENDKEYWORD"));
	} 

	//terminal MAPSTARTKEYWORD:
	//	"<map";
	public TerminalRule getMAPSTARTKEYWORDRule() {
		return (tMAPSTARTKEYWORD != null) ? tMAPSTARTKEYWORD : (tMAPSTARTKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAPSTARTKEYWORD"));
	} 

	//terminal INCLUDE_START_TAG:
	//	"<include";
	public TerminalRule getINCLUDE_START_TAGRule() {
		return (tINCLUDE_START_TAG != null) ? tINCLUDE_START_TAG : (tINCLUDE_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE_START_TAG"));
	} 

	//terminal PROPERTY_START_TAG:
	//	"<property";
	public TerminalRule getPROPERTY_START_TAGRule() {
		return (tPROPERTY_START_TAG != null) ? tPROPERTY_START_TAG : (tPROPERTY_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY_START_TAG"));
	} 

	//terminal REQUIRED_START_TAG:
	//	"<required";
	public TerminalRule getREQUIRED_START_TAGRule() {
		return (tREQUIRED_START_TAG != null) ? tREQUIRED_START_TAG : (tREQUIRED_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REQUIRED_START_TAG"));
	} 

	//terminal VALIDATIONS_START_TAG:
	//	"<validations";
	public TerminalRule getVALIDATIONS_START_TAGRule() {
		return (tVALIDATIONS_START_TAG != null) ? tVALIDATIONS_START_TAG : (tVALIDATIONS_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALIDATIONS_START_TAG"));
	} 

	//terminal CHECK_START_TAG:
	//	"<check";
	public TerminalRule getCHECK_START_TAGRule() {
		return (tCHECK_START_TAG != null) ? tCHECK_START_TAG : (tCHECK_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHECK_START_TAG"));
	} 

	//terminal COMMENT_START_TAG:
	//	"<comment";
	public TerminalRule getCOMMENT_START_TAGRule() {
		return (tCOMMENT_START_TAG != null) ? tCOMMENT_START_TAG : (tCOMMENT_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_START_TAG"));
	} 

	//terminal BREAK_START_TAG:
	//	"<break";
	public TerminalRule getBREAK_START_TAGRule() {
		return (tBREAK_START_TAG != null) ? tBREAK_START_TAG : (tBREAK_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BREAK_START_TAG"));
	} 

	////
	//terminal OPTION_START_TAG:
	//	"<option";
	public TerminalRule getOPTION_START_TAGRule() {
		return (tOPTION_START_TAG != null) ? tOPTION_START_TAG : (tOPTION_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_START_TAG"));
	} 

	//terminal BREAK_END_TAG:
	//	"</break" XML_TAG_END;
	public TerminalRule getBREAK_END_TAGRule() {
		return (tBREAK_END_TAG != null) ? tBREAK_END_TAG : (tBREAK_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BREAK_END_TAG"));
	} 

	//terminal OPTION_END_TAG:
	//	"</option" XML_TAG_END;
	public TerminalRule getOPTION_END_TAGRule() {
		return (tOPTION_END_TAG != null) ? tOPTION_END_TAG : (tOPTION_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPTION_END_TAG"));
	} 

	//terminal REQUIRED_END_TAG:
	//	"</required" XML_TAG_END;
	public TerminalRule getREQUIRED_END_TAGRule() {
		return (tREQUIRED_END_TAG != null) ? tREQUIRED_END_TAG : (tREQUIRED_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REQUIRED_END_TAG"));
	} 

	//terminal INCLUDE_END_TAG:
	//	"</include" XML_TAG_END;
	public TerminalRule getINCLUDE_END_TAGRule() {
		return (tINCLUDE_END_TAG != null) ? tINCLUDE_END_TAG : (tINCLUDE_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCLUDE_END_TAG"));
	} 

	//terminal PROPERTY_END_TAG:
	//	"</property" XML_TAG_END;
	public TerminalRule getPROPERTY_END_TAGRule() {
		return (tPROPERTY_END_TAG != null) ? tPROPERTY_END_TAG : (tPROPERTY_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY_END_TAG"));
	} 

	//terminal COMMENT_END_TAG:
	//	"</comment" XML_TAG_END;
	public TerminalRule getCOMMENT_END_TAGRule() {
		return (tCOMMENT_END_TAG != null) ? tCOMMENT_END_TAG : (tCOMMENT_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMENT_END_TAG"));
	} 

	//terminal VALIDATIONS_END_TAG:
	//	"</validations" XML_TAG_END;
	public TerminalRule getVALIDATIONS_END_TAGRule() {
		return (tVALIDATIONS_END_TAG != null) ? tVALIDATIONS_END_TAG : (tVALIDATIONS_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VALIDATIONS_END_TAG"));
	} 

	//terminal CHECK_END_TAG:
	//	"</check" XML_TAG_END;
	public TerminalRule getCHECK_END_TAGRule() {
		return (tCHECK_END_TAG != null) ? tCHECK_END_TAG : (tCHECK_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHECK_END_TAG"));
	} 

	//terminal PARAM_END_TAG:
	//	"</param" XML_TAG_END;
	public TerminalRule getPARAM_END_TAGRule() {
		return (tPARAM_END_TAG != null) ? tPARAM_END_TAG : (tPARAM_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_END_TAG"));
	} 

	//terminal MESSAGE_END_TAG:
	//	"</message" XML_TAG_END;
	public TerminalRule getMESSAGE_END_TAGRule() {
		return (tMESSAGE_END_TAG != null) ? tMESSAGE_END_TAG : (tMESSAGE_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGE_END_TAG"));
	} 

	//terminal METHODS_END_TAG:
	//	"</methods" XML_TAG_END;
	public TerminalRule getMETHODS_END_TAGRule() {
		return (tMETHODS_END_TAG != null) ? tMETHODS_END_TAG : (tMETHODS_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METHODS_END_TAG"));
	} 

	//terminal METHOD_END_TAG:
	//	"</method" XML_TAG_END;
	public TerminalRule getMETHOD_END_TAGRule() {
		return (tMETHOD_END_TAG != null) ? tMETHOD_END_TAG : (tMETHOD_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METHOD_END_TAG"));
	} 

	//terminal FIELD_END_TAG:
	//	"</field" XML_TAG_END;
	public TerminalRule getFIELD_END_TAGRule() {
		return (tFIELD_END_TAG != null) ? tFIELD_END_TAG : (tFIELD_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_END_TAG"));
	} 

	//terminal EXPRESSION_START_TAG:
	//	"<expression";
	public TerminalRule getEXPRESSION_START_TAGRule() {
		return (tEXPRESSION_START_TAG != null) ? tEXPRESSION_START_TAG : (tEXPRESSION_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_START_TAG"));
	} 

	//terminal EXPRESSION_END_TAG:
	//	"</expression" XML_TAG_END;
	public TerminalRule getEXPRESSION_END_TAGRule() {
		return (tEXPRESSION_END_TAG != null) ? tEXPRESSION_END_TAG : (tEXPRESSION_END_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPRESSION_END_TAG"));
	} 

	//terminal PARAM_START_TAG:
	//	"<param";
	public TerminalRule getPARAM_START_TAGRule() {
		return (tPARAM_START_TAG != null) ? tPARAM_START_TAG : (tPARAM_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAM_START_TAG"));
	} 

	//terminal MESSAGE_START_TAG:
	//	"<message";
	public TerminalRule getMESSAGE_START_TAGRule() {
		return (tMESSAGE_START_TAG != null) ? tMESSAGE_START_TAG : (tMESSAGE_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MESSAGE_START_TAG"));
	} 

	//terminal METHOD_START_TAG:
	//	"<method";
	public TerminalRule getMETHOD_START_TAGRule() {
		return (tMETHOD_START_TAG != null) ? tMETHOD_START_TAG : (tMETHOD_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METHOD_START_TAG"));
	} 

	//terminal METHODS_START_TAG:
	//	"<methods";
	public TerminalRule getMETHODS_START_TAGRule() {
		return (tMETHODS_START_TAG != null) ? tMETHODS_START_TAG : (tMETHODS_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "METHODS_START_TAG"));
	} 

	//terminal FIELD_START_TAG:
	//	"<field";
	public TerminalRule getFIELD_START_TAGRule() {
		return (tFIELD_START_TAG != null) ? tFIELD_START_TAG : (tFIELD_START_TAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_START_TAG"));
	} 

	//terminal NAVASCRIPT_START: //	XML_TAG_START NAVASCRIPT_KEYWORD;
	//	"<navascript" | "<tsl";
	public TerminalRule getNAVASCRIPT_STARTRule() {
		return (tNAVASCRIPT_START != null) ? tNAVASCRIPT_START : (tNAVASCRIPT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_START"));
	} 

	//terminal NAVASCRIPT_END:
	//	"</navascript" XML_TAG_END //XML_START_ENDTAG NAVASCRIPT_KEYWORD XML_TAG_END;
	//	| "</tsl" XML_TAG_END;
	public TerminalRule getNAVASCRIPT_ENDRule() {
		return (tNAVASCRIPT_END != null) ? tNAVASCRIPT_END : (tNAVASCRIPT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NAVASCRIPT_END"));
	} 

	//// might need to add a lot more kywords here 'message' | 'comment' 
	//AttributeName:
	//	ID;
	public AttributeNameElements getAttributeNameAccess() {
		return (pAttributeName != null) ? pAttributeName : (pAttributeName = new AttributeNameElements());
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//PossibleExpression:
	//	(namespace=ID ":")? key=AttributeName "=" (QUOTEQ expressionValue=TopLevel endToken=SEMICOLONQUOTE |
	//	value=ATTRIBUTESTRING | value=EMPTYSTRING);
	public PossibleExpressionElements getPossibleExpressionAccess() {
		return (pPossibleExpression != null) ? pPossibleExpression : (pPossibleExpression = new PossibleExpressionElements());
	}
	
	public ParserRule getPossibleExpressionRule() {
		return getPossibleExpressionAccess().getRule();
	}

	//Methods:
	//	METHODS_START_TAG {Methods} (splitTag?=XML_TAG_END method+=Method* closedTag?=METHODS_END_TAG | XML_TAG_SINGLEEND);
	public MethodsElements getMethodsAccess() {
		return (pMethods != null) ? pMethods : (pMethods = new MethodsElements());
	}
	
	public ParserRule getMethodsRule() {
		return getMethodsAccess().getRule();
	}

	//Method:
	//	METHOD_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END children+=Required*
	//	closedTag?=METHOD_END_TAG | XML_TAG_SINGLEEND);
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Validations:
	//	VALIDATIONS_START_TAG {Validations} (splitTag?=XML_TAG_END children+=Check* closedTag?=VALIDATIONS_END_TAG |
	//	XML_TAG_SINGLEEND);
	public ValidationsElements getValidationsAccess() {
		return (pValidations != null) ? pValidations : (pValidations = new ValidationsElements());
	}
	
	public ParserRule getValidationsRule() {
		return getValidationsAccess().getRule();
	}

	//Check:
	//	CHECK_START_TAG {Check} attributes+=PossibleExpression* (splitTag?=XML_TAG_END expression=TopLevel
	//	closedTag?=CHECK_END_TAG | XML_TAG_SINGLEEND);
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//Comment:
	//	COMMENT_START_TAG {Comment} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
	//	closedTag?=COMMENT_END_TAG | XML_TAG_SINGLEEND);
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Break:
	//	BREAK_START_TAG {Break} attributes+=PossibleExpression* (splitTag?=XML_TAG_END //		expression=TopLevel
	//	closedTag?=BREAK_END_TAG | XML_TAG_SINGLEEND);
	public BreakElements getBreakAccess() {
		return (pBreak != null) ? pBreak : (pBreak = new BreakElements());
	}
	
	public ParserRule getBreakRule() {
		return getBreakAccess().getRule();
	}

	//// create Include entity in Model
	//Include returns Method:
	//	INCLUDE_START_TAG {Method} attributes+=PossibleExpression* (splitTag?=XML_TAG_END closedTag?=INCLUDE_END_TAG |
	//	XML_TAG_SINGLEEND);
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Message:
	//	MESSAGE_START_TAG {Message} attributes+=PossibleExpression* (splitTag?=XML_TAG_END (children+=Message |
	//	children+=Property | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag | children+=Field |
	//	children+=Comment | children+=Break)* closedTag?=MESSAGE_END_TAG | XML_TAG_SINGLEEND);
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Map:
	//	MAPSTARTKEYWORD {Map} (DOT mapName=MapId attributes+=PossibleExpression* | attributes+=PossibleExpression*)
	//	(XML_TAG_SINGLEEND | splitTag?=XML_TAG_END (children+=Message | children+=Property | children+=Param | children+=Map |
	//	children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)* (MAPENDKEYWORD (DOT
	//	mapClosingName=MapId)? closedTag?=XML_TAG_END));
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//MapId:
	//	ID;
	public MapIdElements getMapIdAccess() {
		return (pMapId != null) ? pMapId : (pMapId = new MapIdElements());
	}
	
	public ParserRule getMapIdRule() {
		return getMapIdAccess().getRule();
	}

	//// doesn't seem to work. All are optional
	////Modifier: static?='static'? & final?='final'? & visibility=Visibility;
	//// ToDo Add ALL types!
	//// this fails. All these possibilities will be tokens/keywords, so it will break other stuff.
	////PropertyTypes: STRING_PROPERTY='string' | INTEGER_PROPERTY='integer' | LONG_PROPERTY='long' | DATE_PROPERTY = "date" | FLOAT_PROPERTY = "float";
	////MessageTypes: MSG_TYPE_SIMPLE='simple' |  MSG_TYPE_ARRAY = "array" | MSG_TYPE_TABLE = "table";
	////MessageModes: MSG_MODE = "mode" | MSG_MODE_LAZY = "lazy" | MSG_MODE_IGNORE = "ignore" | MSG_MODE_OVERWRITE = "overwrite";
	//// The direction 'inout' has been deprecated, so I've left that one out.
	////PropertyDirection: DIR_IN = "in" | DIR_OUT = "out";
	//// '1' this makes 1 a keyword
	////PropertyCardinalities: CARDINALITY_SINGLE = "1" | CARDINALITY_MULTIPLE = "+";
	//Required:
	//	REQUIRED_START_TAG {Required} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
	//	closedTag?=REQUIRED_END_TAG);
	public RequiredElements getRequiredAccess() {
		return (pRequired != null) ? pRequired : (pRequired = new RequiredElements());
	}
	
	public ParserRule getRequiredRule() {
		return getRequiredAccess().getRule();
	}

	//Property:
	//	PROPERTY_START_TAG {Property} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
	//	(children+=ExpressionOrOption | children+=Map)* closedTag?=PROPERTY_END_TAG);
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Param:
	//	PARAM_START_TAG {Param} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
	//	(children+=ExpressionOrOption | children+=Map)* closedTag?=PARAM_END_TAG);
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//MapMethod:
	//	MAP_METHOD_STARTTAG_START mapName=ID DOT methodName=AttributeName attributes+=PossibleExpression* (XML_TAG_SINGLEEND |
	//	splitTag?=XML_TAG_END (children+=ExpressionOrOption | children+=Message | children+=Property | children+=Param |
	//	children+=Map | children+=MapMethod | children+=DebugTag | children+=Field | children+=Comment | children+=Break)*
	//	closedTag?=MAP_METHOD_ENDTAG_START methodClosingName=ID DOT methodClosingMethod=ID XML_TAG_END);
	public MapMethodElements getMapMethodAccess() {
		return (pMapMethod != null) ? pMapMethod : (pMapMethod = new MapMethodElements());
	}
	
	public ParserRule getMapMethodRule() {
		return getMapMethodAccess().getRule();
	}

	//Field:
	//	FIELD_START_TAG {Field} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | (splitTag?=XML_TAG_END
	//	(children+=ExpressionOrOption | children+=Param | children+=Map | children+=MapMethod | children+=DebugTag |
	//	children+=Comment | children+=Break)*) closedTag?=FIELD_END_TAG);
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//DebugTag:
	//	DEBUG_START_TAG {DebugTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END
	//	expression=TopLevel? closedTag?=DEBUG_END_TAG);
	public DebugTagElements getDebugTagAccess() {
		return (pDebugTag != null) ? pDebugTag : (pDebugTag = new DebugTagElements());
	}
	
	public ParserRule getDebugTagRule() {
		return getDebugTagAccess().getRule();
	}

	//ExpressionOrOption returns Element:
	//	EXPRESSION_START_TAG ExpressionTag | OPTION_START_TAG Option;
	public ExpressionOrOptionElements getExpressionOrOptionAccess() {
		return (pExpressionOrOption != null) ? pExpressionOrOption : (pExpressionOrOption = new ExpressionOrOptionElements());
	}
	
	public ParserRule getExpressionOrOptionRule() {
		return getExpressionOrOptionAccess().getRule();
	}

	//ExpressionTag:
	//	{ExpressionTag} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END expression=TopLevel
	//	closedTag?=EXPRESSION_END_TAG);
	public ExpressionTagElements getExpressionTagAccess() {
		return (pExpressionTag != null) ? pExpressionTag : (pExpressionTag = new ExpressionTagElements());
	}
	
	public ParserRule getExpressionTagRule() {
		return getExpressionTagAccess().getRule();
	}

	//Option:
	//	{Option} attributes+=PossibleExpression* (XML_TAG_SINGLEEND | splitTag?=XML_TAG_END closedTag?=OPTION_END_TAG);
	public OptionElements getOptionAccess() {
		return (pOption != null) ? pOption : (pOption = new OptionElements());
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
	////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
	////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
	////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//TopLevel: //	 toplevelExpression =OrExpression
	//	toplevelExpression=OrExpression;
	public NavajoExpressionGrammarAccess.TopLevelElements getTopLevelAccess() {
		return gaNavajoExpression.getTopLevelAccess();
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	////terminal INT returns ecore::EString: ('0'..'9')+;
	//terminal XML_GT:
	//	"&gt;";
	public TerminalRule getXML_GTRule() {
		return gaNavajoExpression.getXML_GTRule();
	} 

	//terminal XML_LT:
	//	"&lt;";
	public TerminalRule getXML_LTRule() {
		return gaNavajoExpression.getXML_LTRule();
	} 

	//terminal XML_GTEQ:
	//	"&gt;=";
	public TerminalRule getXML_GTEQRule() {
		return gaNavajoExpression.getXML_GTEQRule();
	} 

	//terminal XML_LTEQ:
	//	"&lt;=";
	public TerminalRule getXML_LTEQRule() {
		return gaNavajoExpression.getXML_LTEQRule();
	} 

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return gaNavajoExpression.getNUMBERRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaNavajoExpression.getWSRule();
	} 

	//terminal TRUE:
	//	"true" | "TRUE";
	public TerminalRule getTRUERule() {
		return gaNavajoExpression.getTRUERule();
	} 

	//terminal FALSE:
	//	"false" | "FALSE";
	public TerminalRule getFALSERule() {
		return gaNavajoExpression.getFALSERule();
	} 

	//terminal NULL:
	//	"null" | "NULL";
	public TerminalRule getNULLRule() {
		return gaNavajoExpression.getNULLRule();
	} 

	//terminal TODAY:
	//	"today" | "TODAY";
	public TerminalRule getTODAYRule() {
		return gaNavajoExpression.getTODAYRule();
	} 

	//terminal FORALL:
	//	"FORALL";
	public TerminalRule getFORALLRule() {
		return gaNavajoExpression.getFORALLRule();
	} 

	//terminal PARENT:
	//	"..";
	public TerminalRule getPARENTRule() {
		return gaNavajoExpression.getPARENTRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaNavajoExpression.getIDRule();
	} 

	//terminal AT:
	//	"@";
	public TerminalRule getATRule() {
		return gaNavajoExpression.getATRule();
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'" | "<![CDATA["->"]]>";
	public TerminalRule getLITERALSTRINGRule() {
		return gaNavajoExpression.getLITERALSTRINGRule();
	} 

	//terminal SQBRACKET_OPEN:
	//	"[";
	public TerminalRule getSQBRACKET_OPENRule() {
		return gaNavajoExpression.getSQBRACKET_OPENRule();
	} 

	//terminal SQBRACKET_CLOSE:
	//	"]";
	public TerminalRule getSQBRACKET_CLOSERule() {
		return gaNavajoExpression.getSQBRACKET_CLOSERule();
	} 

	//terminal TML_SEPARATOR:
	//	"/";
	public TerminalRule getTML_SEPARATORRule() {
		return gaNavajoExpression.getTML_SEPARATORRule();
	} 

	//terminal TML_EXISTS:
	//	"?";
	public TerminalRule getTML_EXISTSRule() {
		return gaNavajoExpression.getTML_EXISTSRule();
	} 

	//terminal DOLLAR:
	//	"$";
	public TerminalRule getDOLLARRule() {
		return gaNavajoExpression.getDOLLARRule();
	} 

	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | PARENT;
	public NavajoExpressionGrammarAccess.PathElementElements getPathElementAccess() {
		return gaNavajoExpression.getPathElementAccess();
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//TmlExpression returns TmlReference:
	//	SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR elements+=PathElement)*
	//	SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.TmlExpressionElements getTmlExpressionAccess() {
		return gaNavajoExpression.getTmlExpressionAccess();
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ExistsTmlReference:
	//	TML_EXISTS SQBRACKET_OPEN absolute?=TML_SEPARATOR? param?=AT? elements+=PathElement (TML_SEPARATOR
	//	elements+=PathElement)* SQBRACKET_CLOSE;
	public NavajoExpressionGrammarAccess.ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return gaNavajoExpression.getExistsTmlExpressionAccess();
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//MapReferenceParams returns ReferenceParams:
	//	"(" getterParams+=Literal ("," getterParams+=Literal)* ")";
	public NavajoExpressionGrammarAccess.MapReferenceParamsElements getMapReferenceParamsAccess() {
		return gaNavajoExpression.getMapReferenceParamsAccess();
	}
	
	public ParserRule getMapReferenceParamsRule() {
		return getMapReferenceParamsAccess().getRule();
	}

	//MapGetReference:
	//	operations+=DOLLAR (elements+=PARENT TML_SEPARATOR)* elements+=ID referenceParams=MapReferenceParams?;
	public NavajoExpressionGrammarAccess.MapGetReferenceElements getMapGetReferenceAccess() {
		return gaNavajoExpression.getMapGetReferenceAccess();
	}
	
	public ParserRule getMapGetReferenceRule() {
		return getMapGetReferenceAccess().getRule();
	}

	//OrExpression returns Expression:
	//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
	public NavajoExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaNavajoExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
	public NavajoExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaNavajoExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	parameters+=RelationalExpression (operations+="==" parameters+=RelationalExpression | operations+="!="
	//	parameters+=RelationalExpression)?;
	public NavajoExpressionGrammarAccess.EqualityExpressionElements getEqualityExpressionAccess() {
		return gaNavajoExpression.getEqualityExpressionAccess();
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	//RelationalExpression returns Expression:
	//	{Expression} parameters+=AdditiveExpression (operations+=XML_LT parameters+=AdditiveExpression | operations+=XML_GT
	//	parameters+=AdditiveExpression | operations+=XML_LTEQ parameters+=AdditiveExpression | operations+=XML_GTEQ
	//	parameters+=AdditiveExpression)?;
	public NavajoExpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaNavajoExpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
	//	parameters+=MultiplicativeExpression)*;
	public NavajoExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaNavajoExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+=TML_SEPARATOR
	//	parameters+=UnaryExpression)*;
	public NavajoExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaNavajoExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
	public NavajoExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaNavajoExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	parameters+=Literal | "(" parameters+=OrExpression ")";
	public NavajoExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaNavajoExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Keep this one in place so it will create a node for the code completion
	//FunctionName:
	//	ID;
	public NavajoExpressionGrammarAccess.FunctionNameElements getFunctionNameAccess() {
		return gaNavajoExpression.getFunctionNameAccess();
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
	public NavajoExpressionGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaNavajoExpression.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	////void DatePatternLiteral() #void:
	////{}
	////{
	////  (Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()"#"Literal()) #DatePatternNode
	////}
	////Expression returns Expression:
	////	Literal | FunctionCall | FunctionOperands ;
	//DateLiteral returns Expression:
	//	{Expression} NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER "#" NUMBER;
	public NavajoExpressionGrammarAccess.DateLiteralElements getDateLiteralAccess() {
		return gaNavajoExpression.getDateLiteralAccess();
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//Literal returns Expression:
	//	{Expression} NUMBER | valueString=LITERALSTRING | operations+=FORALL "(" valueString=LITERALSTRING ","
	//	parameters+=OrExpression ")" | parameters+=FunctionCall | expressionType="{" parameters+=OrExpression? (","
	//	parameters+=OrExpression)* "}" | elements+=NULL | elements+=TODAY | elements+=TRUE | elements+=FALSE |
	//	parameters+=TmlExpression | parameters+=ExistsTmlExpression | parameters+=MapGetReference | parameters+=DateLiteral;
	public NavajoExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaNavajoExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
