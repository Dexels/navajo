/*
* generated by Xtext
*/
grammar InternalTsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.dexels.navajo.dsl.tsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.dexels.navajo.dsl.tsl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.dexels.navajo.dsl.tsl.services.TslGrammarAccess;

}

@parser::members {

 	private TslGrammarAccess grammarAccess;
 	
    public InternalTslParser(TokenStream input, IAstFactory factory, TslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/dexels/navajo/dsl/tsl/parser/antlr/internal/InternalTsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Tml";	
   	}
   	
   	@Override
   	protected TslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTml
entryRuleTml returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTmlRule(), currentNode); }
	 iv_ruleTml=ruleTml 
	 { $current=$iv_ruleTml.current; } 
	 EOF 
;

// Rule Tml
ruleTml returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getNAVASCRIPT_STARTParserRuleCall_0(), currentNode); 
    }
ruleNAVASCRIPT_START
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getTmlAccess().getTmlAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTmlAccess().getTmlAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getTmlAccess().getXML_TAG_ENDTerminalRuleCall_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getChildrenMessageParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_children_4_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_4_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getChildrenMapParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_children_5_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_5_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getChildrenParamParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_children_6_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_6_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getMethodsMethodsParserRuleCall_3_0_1_3_0(), currentNode); 
	    }
		lv_methods_7_0=ruleMethods		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"methods",
	        		lv_methods_7_0, 
	        		"Methods", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getChildrenDebugTagParserRuleCall_3_0_1_4_0(), currentNode); 
	    }
		lv_children_8_0=ruleDebugTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_8_0, 
	        		"DebugTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getChildrenIncludeParserRuleCall_3_0_1_5_0(), currentNode); 
	    }
		lv_children_9_0=ruleInclude		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_9_0, 
	        		"Include", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    { 
        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getNAVASCRIPT_ENDParserRuleCall_3_0_2(), currentNode); 
    }
ruleNAVASCRIPT_END
    { 
        currentNode = currentNode.getParent();
    }
)
    |RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getTmlAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_1(), null); 
    }
))
;





// Entry rule entryRuleDEBUG_START_TAG
entryRuleDEBUG_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDEBUG_START_TAGRule(), currentNode); } 
	 iv_ruleDEBUG_START_TAG=ruleDEBUG_START_TAG 
	 { $current=$iv_ruleDEBUG_START_TAG.current.getText(); }  
	 EOF 
;

// Rule DEBUG_START_TAG
ruleDEBUG_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getDEBUG_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='debug' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDEBUG_START_TAGAccess().getDebugKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleDEBUG_END_TAG
entryRuleDEBUG_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDEBUG_END_TAGRule(), currentNode); } 
	 iv_ruleDEBUG_END_TAG=ruleDEBUG_END_TAG 
	 { $current=$iv_ruleDEBUG_END_TAG.current.getText(); }  
	 EOF 
;

// Rule DEBUG_END_TAG
ruleDEBUG_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_END_0=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_0);
    }

    { 
    createLeafNode(grammarAccess.getDEBUG_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_0(), null); 
    }

	kw='debug' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDEBUG_END_TAGAccess().getDebugKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getDEBUG_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;







// Entry rule entryRuleMAPSTARTKEYWORD
entryRuleMAPSTARTKEYWORD returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMAPSTARTKEYWORDRule(), currentNode); } 
	 iv_ruleMAPSTARTKEYWORD=ruleMAPSTARTKEYWORD 
	 { $current=$iv_ruleMAPSTARTKEYWORD.current.getText(); }  
	 EOF 
;

// Rule MAPSTARTKEYWORD
ruleMAPSTARTKEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getMAPSTARTKEYWORDAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }
    this_MAPKEYWORD_1=RULE_MAPKEYWORD    {
		$current.merge(this_MAPKEYWORD_1);
    }

    { 
    createLeafNode(grammarAccess.getMAPSTARTKEYWORDAccess().getMAPKEYWORDTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleINCLUDE_START_TAG
entryRuleINCLUDE_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINCLUDE_START_TAGRule(), currentNode); } 
	 iv_ruleINCLUDE_START_TAG=ruleINCLUDE_START_TAG 
	 { $current=$iv_ruleINCLUDE_START_TAG.current.getText(); }  
	 EOF 
;

// Rule INCLUDE_START_TAG
ruleINCLUDE_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getINCLUDE_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='include' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getINCLUDE_START_TAGAccess().getIncludeKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRulePROPERTY_START_TAG
entryRulePROPERTY_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPROPERTY_START_TAGRule(), currentNode); } 
	 iv_rulePROPERTY_START_TAG=rulePROPERTY_START_TAG 
	 { $current=$iv_rulePROPERTY_START_TAG.current.getText(); }  
	 EOF 
;

// Rule PROPERTY_START_TAG
rulePROPERTY_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getPROPERTY_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPROPERTY_START_TAGAccess().getPropertyKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleREQUIRED_START_TAG
entryRuleREQUIRED_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getREQUIRED_START_TAGRule(), currentNode); } 
	 iv_ruleREQUIRED_START_TAG=ruleREQUIRED_START_TAG 
	 { $current=$iv_ruleREQUIRED_START_TAG.current.getText(); }  
	 EOF 
;

// Rule REQUIRED_START_TAG
ruleREQUIRED_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getREQUIRED_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='required' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREQUIRED_START_TAGAccess().getRequiredKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleOPTION_START_TAG
entryRuleOPTION_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOPTION_START_TAGRule(), currentNode); } 
	 iv_ruleOPTION_START_TAG=ruleOPTION_START_TAG 
	 { $current=$iv_ruleOPTION_START_TAG.current.getText(); }  
	 EOF 
;

// Rule OPTION_START_TAG
ruleOPTION_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getOPTION_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='option' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOPTION_START_TAGAccess().getOptionKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleOPTION_END_TAG
entryRuleOPTION_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOPTION_END_TAGRule(), currentNode); } 
	 iv_ruleOPTION_END_TAG=ruleOPTION_END_TAG 
	 { $current=$iv_ruleOPTION_END_TAG.current.getText(); }  
	 EOF 
;

// Rule OPTION_END_TAG
ruleOPTION_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getOPTION_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='option' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOPTION_END_TAGAccess().getOptionKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getOPTION_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleREQUIRED_END_TAG
entryRuleREQUIRED_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getREQUIRED_END_TAGRule(), currentNode); } 
	 iv_ruleREQUIRED_END_TAG=ruleREQUIRED_END_TAG 
	 { $current=$iv_ruleREQUIRED_END_TAG.current.getText(); }  
	 EOF 
;

// Rule REQUIRED_END_TAG
ruleREQUIRED_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getREQUIRED_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='required' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getREQUIRED_END_TAGAccess().getRequiredKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getREQUIRED_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRulePROPERTY_END_TAG
entryRulePROPERTY_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPROPERTY_END_TAGRule(), currentNode); } 
	 iv_rulePROPERTY_END_TAG=rulePROPERTY_END_TAG 
	 { $current=$iv_rulePROPERTY_END_TAG.current.getText(); }  
	 EOF 
;

// Rule PROPERTY_END_TAG
rulePROPERTY_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getPROPERTY_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='property' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPROPERTY_END_TAGAccess().getPropertyKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getPROPERTY_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRulePARAM_END_TAG
entryRulePARAM_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPARAM_END_TAGRule(), currentNode); } 
	 iv_rulePARAM_END_TAG=rulePARAM_END_TAG 
	 { $current=$iv_rulePARAM_END_TAG.current.getText(); }  
	 EOF 
;

// Rule PARAM_END_TAG
rulePARAM_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getPARAM_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='param' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPARAM_END_TAGAccess().getParamKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getPARAM_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleMESSAGE_END_TAG
entryRuleMESSAGE_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMESSAGE_END_TAGRule(), currentNode); } 
	 iv_ruleMESSAGE_END_TAG=ruleMESSAGE_END_TAG 
	 { $current=$iv_ruleMESSAGE_END_TAG.current.getText(); }  
	 EOF 
;

// Rule MESSAGE_END_TAG
ruleMESSAGE_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getMESSAGE_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='message' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMESSAGE_END_TAGAccess().getMessageKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getMESSAGE_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleMETHODS_END_TAG
entryRuleMETHODS_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMETHODS_END_TAGRule(), currentNode); } 
	 iv_ruleMETHODS_END_TAG=ruleMETHODS_END_TAG 
	 { $current=$iv_ruleMETHODS_END_TAG.current.getText(); }  
	 EOF 
;

// Rule METHODS_END_TAG
ruleMETHODS_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getMETHODS_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='methods' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMETHODS_END_TAGAccess().getMethodsKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getMETHODS_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleMETHOD_END_TAG
entryRuleMETHOD_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMETHOD_END_TAGRule(), currentNode); } 
	 iv_ruleMETHOD_END_TAG=ruleMETHOD_END_TAG 
	 { $current=$iv_ruleMETHOD_END_TAG.current.getText(); }  
	 EOF 
;

// Rule METHOD_END_TAG
ruleMETHOD_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getMETHOD_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='method' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMETHOD_END_TAGAccess().getMethodKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getMETHOD_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleFIELD_END_TAG
entryRuleFIELD_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFIELD_END_TAGRule(), currentNode); } 
	 iv_ruleFIELD_END_TAG=ruleFIELD_END_TAG 
	 { $current=$iv_ruleFIELD_END_TAG.current.getText(); }  
	 EOF 
;

// Rule FIELD_END_TAG
ruleFIELD_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getFIELD_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='field' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFIELD_END_TAGAccess().getFieldKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getFIELD_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleEXPRESSION_START_TAG
entryRuleEXPRESSION_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEXPRESSION_START_TAGRule(), currentNode); } 
	 iv_ruleEXPRESSION_START_TAG=ruleEXPRESSION_START_TAG 
	 { $current=$iv_ruleEXPRESSION_START_TAG.current.getText(); }  
	 EOF 
;

// Rule EXPRESSION_START_TAG
ruleEXPRESSION_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getEXPRESSION_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='expression' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEXPRESSION_START_TAGAccess().getExpressionKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleEXPRESSION_END_TAG
entryRuleEXPRESSION_END_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEXPRESSION_END_TAGRule(), currentNode); } 
	 iv_ruleEXPRESSION_END_TAG=ruleEXPRESSION_END_TAG 
	 { $current=$iv_ruleEXPRESSION_END_TAG.current.getText(); }  
	 EOF 
;

// Rule EXPRESSION_END_TAG
ruleEXPRESSION_END_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getEXPRESSION_END_TAGAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }

	kw='expression' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEXPRESSION_END_TAGAccess().getExpressionKeyword_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getEXPRESSION_END_TAGAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRulePARAM_START_TAG
entryRulePARAM_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPARAM_START_TAGRule(), currentNode); } 
	 iv_rulePARAM_START_TAG=rulePARAM_START_TAG 
	 { $current=$iv_rulePARAM_START_TAG.current.getText(); }  
	 EOF 
;

// Rule PARAM_START_TAG
rulePARAM_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getPARAM_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='param' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPARAM_START_TAGAccess().getParamKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleMESSAGE_START_TAG
entryRuleMESSAGE_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMESSAGE_START_TAGRule(), currentNode); } 
	 iv_ruleMESSAGE_START_TAG=ruleMESSAGE_START_TAG 
	 { $current=$iv_ruleMESSAGE_START_TAG.current.getText(); }  
	 EOF 
;

// Rule MESSAGE_START_TAG
ruleMESSAGE_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getMESSAGE_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='message' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMESSAGE_START_TAGAccess().getMessageKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleMETHOD_START_TAG
entryRuleMETHOD_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMETHOD_START_TAGRule(), currentNode); } 
	 iv_ruleMETHOD_START_TAG=ruleMETHOD_START_TAG 
	 { $current=$iv_ruleMETHOD_START_TAG.current.getText(); }  
	 EOF 
;

// Rule METHOD_START_TAG
ruleMETHOD_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getMETHOD_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='method' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMETHOD_START_TAGAccess().getMethodKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleMETHODS_START_TAG
entryRuleMETHODS_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMETHODS_START_TAGRule(), currentNode); } 
	 iv_ruleMETHODS_START_TAG=ruleMETHODS_START_TAG 
	 { $current=$iv_ruleMETHODS_START_TAG.current.getText(); }  
	 EOF 
;

// Rule METHODS_START_TAG
ruleMETHODS_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getMETHODS_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='methods' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMETHODS_START_TAGAccess().getMethodsKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleFIELD_START_TAG
entryRuleFIELD_START_TAG returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFIELD_START_TAGRule(), currentNode); } 
	 iv_ruleFIELD_START_TAG=ruleFIELD_START_TAG 
	 { $current=$iv_ruleFIELD_START_TAG.current.getText(); }  
	 EOF 
;

// Rule FIELD_START_TAG
ruleFIELD_START_TAG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getFIELD_START_TAGAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }

	kw='field' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFIELD_START_TAGAccess().getFieldKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleNAVASCRIPT_START
entryRuleNAVASCRIPT_START returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNAVASCRIPT_STARTRule(), currentNode); } 
	 iv_ruleNAVASCRIPT_START=ruleNAVASCRIPT_START 
	 { $current=$iv_ruleNAVASCRIPT_START.current.getText(); }  
	 EOF 
;

// Rule NAVASCRIPT_START
ruleNAVASCRIPT_START returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_TAG_START_0=RULE_XML_TAG_START    {
		$current.merge(this_XML_TAG_START_0);
    }

    { 
    createLeafNode(grammarAccess.getNAVASCRIPT_STARTAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }
    this_NAVASCRIPT_KEYWORD_1=RULE_NAVASCRIPT_KEYWORD    {
		$current.merge(this_NAVASCRIPT_KEYWORD_1);
    }

    { 
    createLeafNode(grammarAccess.getNAVASCRIPT_STARTAccess().getNAVASCRIPT_KEYWORDTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleNAVASCRIPT_END
entryRuleNAVASCRIPT_END returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNAVASCRIPT_ENDRule(), currentNode); } 
	 iv_ruleNAVASCRIPT_END=ruleNAVASCRIPT_END 
	 { $current=$iv_ruleNAVASCRIPT_END.current.getText(); }  
	 EOF 
;

// Rule NAVASCRIPT_END
ruleNAVASCRIPT_END returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_XML_START_ENDTAG_0=RULE_XML_START_ENDTAG    {
		$current.merge(this_XML_START_ENDTAG_0);
    }

    { 
    createLeafNode(grammarAccess.getNAVASCRIPT_ENDAccess().getXML_START_ENDTAGTerminalRuleCall_0(), null); 
    }
    this_NAVASCRIPT_KEYWORD_1=RULE_NAVASCRIPT_KEYWORD    {
		$current.merge(this_NAVASCRIPT_KEYWORD_1);
    }

    { 
    createLeafNode(grammarAccess.getNAVASCRIPT_ENDAccess().getNAVASCRIPT_KEYWORDTerminalRuleCall_1(), null); 
    }
    this_XML_TAG_END_2=RULE_XML_TAG_END    {
		$current.merge(this_XML_TAG_END_2);
    }

    { 
    createLeafNode(grammarAccess.getNAVASCRIPT_ENDAccess().getXML_TAG_ENDTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeNameRule(), currentNode); } 
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current.getText(); }  
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getAttributeNameAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw='message' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttributeNameAccess().getMessageKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRulePossibleExpression
entryRulePossibleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPossibleExpressionRule(), currentNode); }
	 iv_rulePossibleExpression=rulePossibleExpression 
	 { $current=$iv_rulePossibleExpression.current; } 
	 EOF 
;

// Rule PossibleExpression
rulePossibleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_namespace_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPossibleExpressionAccess().getNamespaceIDTerminalRuleCall_0_0_0(), "namespace"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getPossibleExpressionAccess().getColonKeyword_0_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPossibleExpressionAccess().getKeyAttributeNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_key_2_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_2_0, 
	        		"AttributeName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getPossibleExpressionAccess().getEqualsSignKeyword_2(), null); 
    }
((RULE_QUOTEQ
    { 
    createLeafNode(grammarAccess.getPossibleExpressionAccess().getQUOTEQTerminalRuleCall_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPossibleExpressionAccess().getExpressionValueTopLevelParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_expressionValue_5_0=ruleTopLevel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionValue",
	        		lv_expressionValue_5_0, 
	        		"TopLevel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)RULE_SEMICOLONQUOTE
    { 
    createLeafNode(grammarAccess.getPossibleExpressionAccess().getSEMICOLONQUOTETerminalRuleCall_3_0_2(), null); 
    }
)
    |(
(
		lv_value_7_0=RULE_ATTRIBUTESTRING
		{
			createLeafNode(grammarAccess.getPossibleExpressionAccess().getValueATTRIBUTESTRINGTerminalRuleCall_3_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_7_0, 
	        		"ATTRIBUTESTRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |RULE_EMPTYSTRING
    { 
    createLeafNode(grammarAccess.getPossibleExpressionAccess().getEMPTYSTRINGTerminalRuleCall_3_2(), null); 
    }
))
;





// Entry rule entryRuleMethods
entryRuleMethods returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodsRule(), currentNode); }
	 iv_ruleMethods=ruleMethods 
	 { $current=$iv_ruleMethods.current; } 
	 EOF 
;

// Rule Methods
ruleMethods returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMethodsAccess().getMETHODS_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleMETHODS_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getMethodsAccess().getMethodsAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMethodsAccess().getMethodsAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMethodsAccess().getXML_TAG_ENDTerminalRuleCall_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodsAccess().getMethodMethodParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_method_3_0=ruleMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"method",
	        		lv_method_3_0, 
	        		"Method", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
    { 
        currentNode=createCompositeNode(grammarAccess.getMethodsAccess().getMETHODS_END_TAGParserRuleCall_2_0_2(), currentNode); 
    }
ruleMETHODS_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)
    |RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getMethodsAccess().getXML_TAG_SINGLEENDTerminalRuleCall_2_1(), null); 
    }
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMethodRule(), currentNode); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getMETHOD_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleMETHOD_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getMethodAccess().getMethodAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMethodAccess().getMethodAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMethodAccess().getXML_TAG_ENDTerminalRuleCall_3_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getChildrenRequiredParserRuleCall_3_0_1_0(), currentNode); 
	    }
		lv_children_4_0=ruleRequired		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_4_0, 
	        		"Required", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
    { 
        currentNode=createCompositeNode(grammarAccess.getMethodAccess().getMETHOD_END_TAGParserRuleCall_3_0_2(), currentNode); 
    }
ruleMETHOD_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)
    |RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getMethodAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_1(), null); 
    }
))
;





// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIncludeRule(), currentNode); }
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current; } 
	 EOF 
;

// Rule Include
ruleInclude returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getIncludeAccess().getINCLUDE_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleINCLUDE_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getIncludeAccess().getMethodAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIncludeAccess().getMethodAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIncludeAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIncludeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getIncludeAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3(), null); 
    }
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMESSAGE_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleMESSAGE_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getMessageAccess().getMessageAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMessageAccess().getMessageAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMessageAccess().getXML_TAG_ENDTerminalRuleCall_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenMessageParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_children_4_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_4_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenPropertyParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_children_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_5_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenParamParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_children_6_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_6_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenMapParserRuleCall_3_0_1_3_0(), currentNode); 
	    }
		lv_children_7_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_7_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenMapMethodParserRuleCall_3_0_1_4_0(), currentNode); 
	    }
		lv_children_8_0=ruleMapMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_8_0, 
	        		"MapMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenDebugTagParserRuleCall_3_0_1_5_0(), currentNode); 
	    }
		lv_children_9_0=ruleDebugTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_9_0, 
	        		"DebugTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getChildrenFieldParserRuleCall_3_0_1_6_0(), currentNode); 
	    }
		lv_children_10_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_10_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    { 
        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMESSAGE_END_TAGParserRuleCall_3_0_2(), currentNode); 
    }
ruleMESSAGE_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)
    |RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getMessageAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_1(), null); 
    }
))
;





// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapRule(), currentNode); }
	 iv_ruleMap=ruleMap 
	 { $current=$iv_ruleMap.current; } 
	 EOF 
;

// Rule Map
ruleMap returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMapAccess().getMAPSTARTKEYWORDParserRuleCall_0(), currentNode); 
    }
ruleMAPSTARTKEYWORD
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getMapAccess().getMapAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMapAccess().getMapAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((	'.' 
    {
        createLeafNode(grammarAccess.getMapAccess().getFullStopKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getMapNameMapIdParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_mapName_3_0=ruleMapId		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mapName",
	        		lv_mapName_3_0, 
	        		"MapId", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getAttributesPossibleExpressionParserRuleCall_2_0_2_0(), currentNode); 
	    }
		lv_attributes_4_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_4_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getAttributesPossibleExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_attributes_5_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_5_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getMapAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMapAccess().getXML_TAG_ENDTerminalRuleCall_3_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenMessageParserRuleCall_3_1_1_0_0(), currentNode); 
	    }
		lv_children_8_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_8_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenPropertyParserRuleCall_3_1_1_1_0(), currentNode); 
	    }
		lv_children_9_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_9_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenParamParserRuleCall_3_1_1_2_0(), currentNode); 
	    }
		lv_children_10_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_10_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenMapParserRuleCall_3_1_1_3_0(), currentNode); 
	    }
		lv_children_11_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_11_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenMapMethodParserRuleCall_3_1_1_4_0(), currentNode); 
	    }
		lv_children_12_0=ruleMapMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_12_0, 
	        		"MapMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenDebugTagParserRuleCall_3_1_1_5_0(), currentNode); 
	    }
		lv_children_13_0=ruleDebugTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_13_0, 
	        		"DebugTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getChildrenFieldParserRuleCall_3_1_1_6_0(), currentNode); 
	    }
		lv_children_14_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_14_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(RULE_XML_START_ENDTAG
    { 
    createLeafNode(grammarAccess.getMapAccess().getXML_START_ENDTAGTerminalRuleCall_3_1_2_0(), null); 
    }
RULE_MAPKEYWORD
    { 
    createLeafNode(grammarAccess.getMapAccess().getMAPKEYWORDTerminalRuleCall_3_1_2_1(), null); 
    }
(	'.' 
    {
        createLeafNode(grammarAccess.getMapAccess().getFullStopKeyword_3_1_2_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getMapClosingNameMapIdParserRuleCall_3_1_2_2_1_0(), currentNode); 
	    }
		lv_mapClosingName_18_0=ruleMapId		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mapClosingName",
	        		lv_mapClosingName_18_0, 
	        		"MapId", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMapAccess().getXML_TAG_ENDTerminalRuleCall_3_1_2_3(), null); 
    }
))))
;





// Entry rule entryRuleMapId
entryRuleMapId returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapIdRule(), currentNode); } 
	 iv_ruleMapId=ruleMapId 
	 { $current=$iv_ruleMapId.current.getText(); }  
	 EOF 
;

// Rule MapId
ruleMapId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getMapIdAccess().getIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleRequired
entryRuleRequired returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequiredRule(), currentNode); }
	 iv_ruleRequired=ruleRequired 
	 { $current=$iv_ruleRequired.current; } 
	 EOF 
;

// Rule Required
ruleRequired returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRequiredAccess().getREQUIRED_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleREQUIRED_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getRequiredAccess().getRequiredAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRequiredAccess().getRequiredAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRequiredAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequiredRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getRequiredAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getRequiredAccess().getXML_TAG_ENDTerminalRuleCall_3_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getRequiredAccess().getREQUIRED_END_TAGParserRuleCall_3_1_1(), currentNode); 
    }
ruleREQUIRED_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getPROPERTY_START_TAGParserRuleCall_0(), currentNode); 
    }
rulePROPERTY_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getPropertyAccess().getPropertyAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyAccess().getPropertyAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getPropertyAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getPropertyAccess().getXML_TAG_ENDTerminalRuleCall_3_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getChildrenExpressionOrOptionParserRuleCall_3_1_1_0_0(), currentNode); 
	    }
		lv_children_5_0=ruleExpressionOrOption		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_5_0, 
	        		"ExpressionOrOption", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getChildrenMapParserRuleCall_3_1_1_1_0(), currentNode); 
	    }
		lv_children_6_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_6_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getPROPERTY_END_TAGParserRuleCall_3_1_2(), currentNode); 
    }
rulePROPERTY_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamRule(), currentNode); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getParamAccess().getPARAM_START_TAGParserRuleCall_0(), currentNode); 
    }
rulePARAM_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getParamAccess().getParamAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getParamAccess().getParamAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getParamAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getParamAccess().getXML_TAG_ENDTerminalRuleCall_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParamAccess().getChildrenExpressionOrOptionParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_children_5_0=ruleExpressionOrOption		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_5_0, 
	        		"ExpressionOrOption", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*
    { 
        currentNode=createCompositeNode(grammarAccess.getParamAccess().getPARAM_END_TAGParserRuleCall_3_1_2(), currentNode); 
    }
rulePARAM_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleMapMethod
entryRuleMapMethod returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapMethodRule(), currentNode); }
	 iv_ruleMapMethod=ruleMapMethod 
	 { $current=$iv_ruleMapMethod.current; } 
	 EOF 
;

// Rule MapMethod
ruleMapMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_XML_TAG_START
    { 
    createLeafNode(grammarAccess.getMapMethodAccess().getXML_TAG_STARTTerminalRuleCall_0(), null); 
    }
(
(
		lv_mapName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapMethodAccess().getMapNameIDTerminalRuleCall_1_0(), "mapName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mapName",
	        		lv_mapName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getMapMethodAccess().getFullStopKeyword_2(), null); 
    }
(
(
		lv_methodName_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapMethodAccess().getMethodNameIDTerminalRuleCall_3_0(), "methodName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodName",
	        		lv_methodName_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapMethodAccess().getAttributesPossibleExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_attributes_4_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_4_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getMapMethodAccess().getXML_TAG_SINGLEENDTerminalRuleCall_5_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMapMethodAccess().getXML_TAG_ENDTerminalRuleCall_5_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapMethodAccess().getExpressionTopLevelParserRuleCall_5_1_1_0(), currentNode); 
	    }
		lv_expression_7_0=ruleTopLevel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_7_0, 
	        		"TopLevel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)RULE_XML_START_ENDTAG
    { 
    createLeafNode(grammarAccess.getMapMethodAccess().getXML_START_ENDTAGTerminalRuleCall_5_1_2(), null); 
    }
(
(
		lv_methodClosingName_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapMethodAccess().getMethodClosingNameIDTerminalRuleCall_5_1_3_0(), "methodClosingName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodClosingName",
	        		lv_methodClosingName_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getMapMethodAccess().getFullStopKeyword_5_1_4(), null); 
    }
(
(
		lv_methodClosingMethod_11_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapMethodAccess().getMethodClosingMethodIDTerminalRuleCall_5_1_5_0(), "methodClosingMethod"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"methodClosingMethod",
	        		lv_methodClosingMethod_11_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getMapMethodAccess().getXML_TAG_ENDTerminalRuleCall_5_1_6(), null); 
    }
)))
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRule(), currentNode); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getFIELD_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleFIELD_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getFieldAccess().getParamAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFieldAccess().getParamAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getFieldAccess().getXML_TAG_ENDTerminalRuleCall_3(), null); 
    }
(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getFieldAccess().getXML_TAG_SINGLEENDTerminalRuleCall_4_0(), null); 
    }

    |(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenExpressionOrOptionParserRuleCall_4_1_0_0_0(), currentNode); 
	    }
		lv_children_5_0=ruleExpressionOrOption		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_5_0, 
	        		"ExpressionOrOption", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenMessageParserRuleCall_4_1_0_1_0(), currentNode); 
	    }
		lv_children_6_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_6_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenPropertyParserRuleCall_4_1_0_2_0(), currentNode); 
	    }
		lv_children_7_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_7_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenParamParserRuleCall_4_1_0_3_0(), currentNode); 
	    }
		lv_children_8_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_8_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenMapParserRuleCall_4_1_0_4_0(), currentNode); 
	    }
		lv_children_9_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_9_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenMapMethodParserRuleCall_4_1_0_5_0(), currentNode); 
	    }
		lv_children_10_0=ruleMapMethod		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_10_0, 
	        		"MapMethod", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenDebugTagParserRuleCall_4_1_0_6_0(), currentNode); 
	    }
		lv_children_11_0=ruleDebugTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_11_0, 
	        		"DebugTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getChildrenFieldParserRuleCall_4_1_0_7_0(), currentNode); 
	    }
		lv_children_12_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_12_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    { 
        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getFIELD_END_TAGParserRuleCall_4_1_1(), currentNode); 
    }
ruleFIELD_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleDebugTag
entryRuleDebugTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDebugTagRule(), currentNode); }
	 iv_ruleDebugTag=ruleDebugTag 
	 { $current=$iv_ruleDebugTag.current; } 
	 EOF 
;

// Rule DebugTag
ruleDebugTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDebugTagAccess().getDEBUG_START_TAGParserRuleCall_0(), currentNode); 
    }
ruleDEBUG_START_TAG
    { 
        currentNode = currentNode.getParent();
    }
(
    { 
        temp=factory.create(grammarAccess.getDebugTagAccess().getDebugTagAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDebugTagAccess().getDebugTagAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDebugTagAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDebugTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getDebugTagAccess().getXML_TAG_SINGLEENDTerminalRuleCall_3_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getDebugTagAccess().getXML_TAG_ENDTerminalRuleCall_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDebugTagAccess().getExpressionTopLevelParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_expression_5_0=ruleTopLevel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDebugTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_5_0, 
	        		"TopLevel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    { 
        currentNode=createCompositeNode(grammarAccess.getDebugTagAccess().getDEBUG_END_TAGParserRuleCall_3_1_2(), currentNode); 
    }
ruleDEBUG_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleExpressionOrOption
entryRuleExpressionOrOption returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionOrOptionRule(), currentNode); }
	 iv_ruleExpressionOrOption=ruleExpressionOrOption 
	 { $current=$iv_ruleExpressionOrOption.current; } 
	 EOF 
;

// Rule ExpressionOrOption
ruleExpressionOrOption returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionOrOptionAccess().getEXPRESSION_START_TAGParserRuleCall_0_0(), currentNode); 
    }
ruleEXPRESSION_START_TAG
    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionOrOptionAccess().getExpressionTagParserRuleCall_0_1(), currentNode); 
    }
    this_ExpressionTag_1=ruleExpressionTag
    { 
        $current = $this_ExpressionTag_1.current; 
        currentNode = currentNode.getParent();
    }
)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionOrOptionAccess().getOPTION_START_TAGParserRuleCall_1_0(), currentNode); 
    }
ruleOPTION_START_TAG
    { 
        currentNode = currentNode.getParent();
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionOrOptionAccess().getOptionParserRuleCall_1_1(), currentNode); 
    }
    this_Option_3=ruleOption
    { 
        $current = $this_Option_3.current; 
        currentNode = currentNode.getParent();
    }
))
;







// Entry rule entryRuleExpressionTag
entryRuleExpressionTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionTagRule(), currentNode); }
	 iv_ruleExpressionTag=ruleExpressionTag 
	 { $current=$iv_ruleExpressionTag.current; } 
	 EOF 
;

// Rule ExpressionTag
ruleExpressionTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExpressionTagAccess().getExpressionTagAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionTagAccess().getExpressionTagAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionTagAccess().getAttributesPossibleExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_attributes_1_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_1_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getExpressionTagAccess().getXML_TAG_SINGLEENDTerminalRuleCall_2_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getExpressionTagAccess().getXML_TAG_ENDTerminalRuleCall_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionTagAccess().getExpressionTopLevelParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_expression_4_0=ruleTopLevel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_4_0, 
	        		"TopLevel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionTagAccess().getEXPRESSION_END_TAGParserRuleCall_2_1_2(), currentNode); 
    }
ruleEXPRESSION_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOptionRule(), currentNode); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOptionAccess().getOptionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOptionAccess().getOptionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOptionAccess().getAttributesPossibleExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_attributes_1_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_1_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(RULE_XML_TAG_SINGLEEND
    { 
    createLeafNode(grammarAccess.getOptionAccess().getXML_TAG_SINGLEENDTerminalRuleCall_2_0(), null); 
    }

    |(RULE_XML_TAG_END
    { 
    createLeafNode(grammarAccess.getOptionAccess().getXML_TAG_ENDTerminalRuleCall_2_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getOptionAccess().getOPTION_END_TAGParserRuleCall_2_1_1(), currentNode); 
    }
ruleOPTION_END_TAG
    { 
        currentNode = currentNode.getParent();
    }
)))
;





// Entry rule entryRuleTopLevel
entryRuleTopLevel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelRule(), currentNode); }
	 iv_ruleTopLevel=ruleTopLevel 
	 { $current=$iv_ruleTopLevel.current; } 
	 EOF 
;

// Rule TopLevel
ruleTopLevel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelAccess().getToplevelExpressionOrExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_toplevelExpression_0_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"toplevelExpression",
	        		lv_toplevelExpression_0_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePathElement
entryRulePathElement returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathElementRule(), currentNode); } 
	 iv_rulePathElement=rulePathElement 
	 { $current=$iv_rulePathElement.current.getText(); }  
	 EOF 
;

// Rule PathElement
rulePathElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathElementAccess().getFullStopKeyword_1(), null); 
    }

    |    this_PARENT_2=RULE_PARENT    {
		$current.merge(this_PARENT_2);
    }

    { 
    createLeafNode(grammarAccess.getPathElementAccess().getPARENTTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRuleTmlExpression
entryRuleTmlExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTmlExpressionRule(), currentNode); }
	 iv_ruleTmlExpression=ruleTmlExpression 
	 { $current=$iv_ruleTmlExpression.current; } 
	 EOF 
;

// Rule TmlExpression
ruleTmlExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_SQBRACKET_OPEN
    { 
    createLeafNode(grammarAccess.getTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_0(), null); 
    }
(
(
		lv_absolute_1_0=RULE_TML_SEPARATOR
		{
			createLeafNode(grammarAccess.getTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_1_0(), "absolute"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"absolute",
	        		true, 
	        		"TML_SEPARATOR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_param_2_0=RULE_AT
		{
			createLeafNode(grammarAccess.getTmlExpressionAccess().getParamATTerminalRuleCall_2_0(), "param"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"param",
	        		true, 
	        		"AT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_3_0(), currentNode); 
	    }
		lv_elements_3_0=rulePathElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_3_0, 
	        		"PathElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_TML_SEPARATOR
    { 
    createLeafNode(grammarAccess.getTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_elements_5_0=rulePathElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_5_0, 
	        		"PathElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_SQBRACKET_CLOSE
    { 
    createLeafNode(grammarAccess.getTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_5(), null); 
    }
)
;





// Entry rule entryRuleExistsTmlExpression
entryRuleExistsTmlExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExistsTmlExpressionRule(), currentNode); }
	 iv_ruleExistsTmlExpression=ruleExistsTmlExpression 
	 { $current=$iv_ruleExistsTmlExpression.current; } 
	 EOF 
;

// Rule ExistsTmlExpression
ruleExistsTmlExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(RULE_TML_EXISTS
    { 
    createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getTML_EXISTSTerminalRuleCall_0(), null); 
    }
RULE_SQBRACKET_OPEN
    { 
    createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_1(), null); 
    }
(
(
		lv_absolute_2_0=RULE_TML_SEPARATOR
		{
			createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_2_0(), "absolute"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"absolute",
	        		true, 
	        		"TML_SEPARATOR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		lv_param_3_0=RULE_AT
		{
			createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getParamATTerminalRuleCall_3_0(), "param"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"param",
	        		true, 
	        		"AT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_4_0(), currentNode); 
	    }
		lv_elements_4_0=rulePathElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_4_0, 
	        		"PathElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(RULE_TML_SEPARATOR
    { 
    createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_elements_6_0=rulePathElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExistsTmlExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_6_0, 
	        		"PathElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*RULE_SQBRACKET_CLOSE
    { 
    createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_6(), null); 
    }
)
;





// Entry rule entryRuleMapReferenceParams
entryRuleMapReferenceParams returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapReferenceParamsRule(), currentNode); }
	 iv_ruleMapReferenceParams=ruleMapReferenceParams 
	 { $current=$iv_ruleMapReferenceParams.current; } 
	 EOF 
;

// Rule MapReferenceParams
ruleMapReferenceParams returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getMapReferenceParamsAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_1_0(), currentNode); 
	    }
		lv_getterParams_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapReferenceParamsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"getterParams",
	        		lv_getterParams_1_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getMapReferenceParamsAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_getterParams_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapReferenceParamsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"getterParams",
	        		lv_getterParams_3_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getMapReferenceParamsAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleMapGetReference
entryRuleMapGetReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapGetReferenceRule(), currentNode); }
	 iv_ruleMapGetReference=ruleMapGetReference 
	 { $current=$iv_ruleMapGetReference.current; } 
	 EOF 
;

// Rule MapGetReference
ruleMapGetReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_operations_0_0=RULE_DOLLAR
		{
			createLeafNode(grammarAccess.getMapGetReferenceAccess().getOperationsDOLLARTerminalRuleCall_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapGetReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_0_0, 
	        		"DOLLAR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_elements_1_0=RULE_PARENT
		{
			createLeafNode(grammarAccess.getMapGetReferenceAccess().getElementsPARENTTerminalRuleCall_1_0_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapGetReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_1_0, 
	        		"PARENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)RULE_TML_SEPARATOR
    { 
    createLeafNode(grammarAccess.getMapGetReferenceAccess().getTML_SEPARATORTerminalRuleCall_1_1(), null); 
    }
)*(
(
		lv_elements_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapGetReferenceAccess().getElementsIDTerminalRuleCall_2_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapGetReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapGetReferenceAccess().getReferenceParamsMapReferenceParamsParserRuleCall_3_0(), currentNode); 
	    }
		lv_referenceParams_4_0=ruleMapReferenceParams		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapGetReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"referenceParams",
	        		lv_referenceParams_4_0, 
	        		"MapReferenceParams", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_operations_1_0=	'OR' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOperationsORKeyword_1_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_1_0, "OR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_operations_1_0=	'AND' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOperationsANDKeyword_1_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_1_0, "AND", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_operations_1_0=	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOperationsEqualsSignEqualsSignKeyword_1_0_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_1_0, "==", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_operations_3_0=	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_3_0, "!=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_parameters_1_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_1_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_operations_2_0=RULE_XML_LT
		{
			createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTTerminalRuleCall_2_0_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_2_0, 
	        		"XML_LT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_operations_4_0=RULE_XML_GT
		{
			createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTTerminalRuleCall_2_1_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_4_0, 
	        		"XML_GT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_parameters_5_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_5_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_operations_6_0=RULE_XML_LTEQ
		{
			createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTEQTerminalRuleCall_2_2_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_6_0, 
	        		"XML_LTEQ", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_2_1_0(), currentNode); 
	    }
		lv_parameters_7_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_7_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_operations_8_0=RULE_XML_GTEQ
		{
			createLeafNode(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTEQTerminalRuleCall_2_3_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_8_0, 
	        		"XML_GTEQ", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_3_1_0(), currentNode); 
	    }
		lv_parameters_9_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_9_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_operations_1_0=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAsteriskKeyword_1_0_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_1_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_operations_3_0=RULE_TML_SEPARATOR
		{
			createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_3_0, 
	        		"TML_SEPARATOR", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_operations_0_0=	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOperationsExclamationMarkKeyword_0_0_0(), "operations"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "operations", lv_operations_0_0, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getParametersPrimaryExpressionParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_parameters_1_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_1_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1(), currentNode); 
    }
    this_PrimaryExpression_2=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParametersLiteralParserRuleCall_0_0(), currentNode); 
	    }
		lv_parameters_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_0_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParametersOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionNameRule(), currentNode); } 
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current.getText(); }  
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionCallRule(), currentNode); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getNameFunctionNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"FunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_parameters_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_2_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_parameters_4_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_4_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_INT
    { 
    createLeafNode(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0_1(), null); 
    }
)
    |(
(
		lv_valueString_2_0=RULE_LITERALSTRING
		{
			createLeafNode(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_1_0(), "valueString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueString",
	        		lv_valueString_2_0, 
	        		"LITERALSTRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |((
(
		lv_operations_3_0=RULE_FORALL
		{
			createLeafNode(grammarAccess.getLiteralAccess().getOperationsFORALLTerminalRuleCall_2_0_0(), "operations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_3_0, 
	        		"FORALL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getLeftParenthesisKeyword_2_1(), null); 
    }
(
(
		lv_valueString_5_0=RULE_LITERALSTRING
		{
			createLeafNode(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_2_2_0(), "valueString"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueString",
	        		lv_valueString_5_0, 
	        		"LITERALSTRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getCommaKeyword_2_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_2_4_0(), currentNode); 
	    }
		lv_parameters_7_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_7_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getRightParenthesisKeyword_2_5(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersFunctionCallParserRuleCall_3_0(), currentNode); 
	    }
		lv_parameters_9_0=ruleFunctionCall		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_9_0, 
	        		"FunctionCall", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |((
(
		lv_expressionType_10_0=	'{' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getExpressionTypeLeftCurlyBracketKeyword_4_0_0(), "expressionType"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "expressionType", lv_expressionType_10_0, "{", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_parameters_11_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_11_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getCommaKeyword_4_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_2_1_0(), currentNode); 
	    }
		lv_parameters_13_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_13_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_3(), null); 
    }
)
    |(
(
		lv_elements_15_0=RULE_NULL
		{
			createLeafNode(grammarAccess.getLiteralAccess().getElementsNULLTerminalRuleCall_5_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_15_0, 
	        		"NULL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_elements_16_0=RULE_TODAY
		{
			createLeafNode(grammarAccess.getLiteralAccess().getElementsTODAYTerminalRuleCall_6_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_16_0, 
	        		"TODAY", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_elements_17_0=RULE_TRUE
		{
			createLeafNode(grammarAccess.getLiteralAccess().getElementsTRUETerminalRuleCall_7_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_17_0, 
	        		"TRUE", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_elements_18_0=RULE_FALSE
		{
			createLeafNode(grammarAccess.getLiteralAccess().getElementsFALSETerminalRuleCall_8_0(), "elements"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_18_0, 
	        		"FALSE", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersTmlExpressionParserRuleCall_9_0(), currentNode); 
	    }
		lv_parameters_19_0=ruleTmlExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_19_0, 
	        		"TmlExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersExistsTmlExpressionParserRuleCall_10_0(), currentNode); 
	    }
		lv_parameters_20_0=ruleExistsTmlExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_20_0, 
	        		"ExistsTmlExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getParametersMapGetReferenceParserRuleCall_11_0(), currentNode); 
	    }
		lv_parameters_21_0=ruleMapGetReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_21_0, 
	        		"MapGetReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





RULE_XMLHEAD : '<?' ( options {greedy=false;} : . )*'?>';

RULE_XMLCOMMENT : '<!--' ( options {greedy=false;} : . )*'-->';

RULE_QUOTEQ : '"=';

RULE_SEMICOLONQUOTE : ';"';

RULE_XML_START_ENDTAG : '</';

RULE_XML_TAG_END : '>';

RULE_XML_TAG_SINGLEEND : '/>';

RULE_XML_TAG_START : '<';

RULE_EMPTYSTRING : '""';

RULE_ATTRIBUTESTRING : '"' ~(('='|'"'))* '"';

RULE_MAPKEYWORD : 'map';

RULE_NAVASCRIPT_KEYWORD : ('navascript'|'tsl');

RULE_XML_GT : '&gt;';

RULE_XML_LT : '&lt;';

RULE_XML_GTEQ : '&gt;=';

RULE_XML_LTEQ : '&lt;=';

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TRUE : ('true'|'TRUE');

RULE_FALSE : ('false'|'FALSE');

RULE_NULL : ('null'|'NULL');

RULE_TODAY : ('today'|'TODAY');

RULE_FORALL : 'FORALL';

RULE_PARENT : '..';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_AT : '@';

RULE_LITERALSTRING : ('\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\''|'<![CDATA[' ( options {greedy=false;} : . )*']]>');

RULE_SQBRACKET_OPEN : '[';

RULE_SQBRACKET_CLOSE : ']';

RULE_TML_SEPARATOR : '/';

RULE_TML_EXISTS : '?';

RULE_DOLLAR : '$';


