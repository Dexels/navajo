/*
* generated by Xtext
*/
grammar InternalTsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.dexels.navajo.dsl.tsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.dexels.navajo.dsl.tsl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import com.dexels.navajo.dsl.tsl.services.TslGrammarAccess;

}

@parser::members {

 	private TslGrammarAccess grammarAccess;
 	
    public InternalTslParser(TokenStream input, IAstFactory factory, TslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("com/dexels/navajo/dsl/tsl/parser/antlr/internal/InternalTsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Tml";	
   	}
   	
   	@Override
   	protected TslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTml
entryRuleTml returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTmlRule(), currentNode); }
	 iv_ruleTml=ruleTml 
	 { $current=$iv_ruleTml.current; } 
	 EOF 
;

// Rule Tml
ruleTml returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<navascript' 
    {
        createLeafNode(grammarAccess.getTmlAccess().getNavascriptKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getTmlAccess().getTmlAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTmlAccess().getTmlAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((	'>' 
    {
        createLeafNode(grammarAccess.getTmlAccess().getGreaterThanSignKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getMessagesMessageParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_messages_4_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"messages",
	        		lv_messages_4_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTmlAccess().getMapsMapParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_maps_5_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTmlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"maps",
	        		lv_maps_5_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'</navascript>' 
    {
        createLeafNode(grammarAccess.getTmlAccess().getNavascriptKeyword_3_0_2(), null); 
    }
)
    |	'/>' 
    {
        createLeafNode(grammarAccess.getTmlAccess().getSolidusGreaterThanSignKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRulePossibleExpression
entryRulePossibleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPossibleExpressionRule(), currentNode); }
	 iv_rulePossibleExpression=rulePossibleExpression 
	 { $current=$iv_rulePossibleExpression.current; } 
	 EOF 
;

// Rule PossibleExpression
rulePossibleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_key_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPossibleExpressionAccess().getKeyIDTerminalRuleCall_0_0(), "key"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getPossibleExpressionAccess().getEqualsSignKeyword_1(), null); 
    }
((	'"=' 
    {
        createLeafNode(grammarAccess.getPossibleExpressionAccess().getQuotationMarkEqualsSignKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPossibleExpressionAccess().getExpressionValueExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_expressionValue_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionValue",
	        		lv_expressionValue_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';"' 
    {
        createLeafNode(grammarAccess.getPossibleExpressionAccess().getSemicolonQuotationMarkKeyword_2_0_2(), null); 
    }
)
    |(
(
		lv_value_5_0=RULE_ATTRIBUTESTRING
		{
			createLeafNode(grammarAccess.getPossibleExpressionAccess().getValueATTRIBUTESTRINGTerminalRuleCall_2_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPossibleExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_5_0, 
	        		"ATTRIBUTESTRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<message' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getMessageKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getMessageAccess().getMessageAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMessageAccess().getMessageAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((	'>' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getGreaterThanSignKeyword_3_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMessagesMessageParserRuleCall_3_0_1_0_0(), currentNode); 
	    }
		lv_messages_4_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"messages",
	        		lv_messages_4_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getPropertiesPropertyParserRuleCall_3_0_1_1_0(), currentNode); 
	    }
		lv_properties_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_5_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getMapsMapParserRuleCall_3_0_1_2_0(), currentNode); 
	    }
		lv_maps_6_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"maps",
	        		lv_maps_6_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'</message>' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getMessageKeyword_3_0_2(), null); 
    }
)
    |	'/>' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getSolidusGreaterThanSignKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMapRule(), currentNode); }
	 iv_ruleMap=ruleMap 
	 { $current=$iv_ruleMap.current; } 
	 EOF 
;

// Rule Map
ruleMap returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<map.' 
    {
        createLeafNode(grammarAccess.getMapAccess().getMapKeyword_0(), null); 
    }
(
(
		lv_mapName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapAccess().getMapNameIDTerminalRuleCall_1_0(), "mapName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mapName",
	        		lv_mapName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'/>' 
    {
        createLeafNode(grammarAccess.getMapAccess().getSolidusGreaterThanSignKeyword_3_0(), null); 
    }

    |(	'>' 
    {
        createLeafNode(grammarAccess.getMapAccess().getGreaterThanSignKeyword_3_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getMessagesMessageParserRuleCall_3_1_1_0_0(), currentNode); 
	    }
		lv_messages_5_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"messages",
	        		lv_messages_5_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getPropertiesPropertyParserRuleCall_3_1_1_1_0(), currentNode); 
	    }
		lv_properties_6_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_6_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMapAccess().getMapsMapParserRuleCall_3_1_1_2_0(), currentNode); 
	    }
		lv_maps_7_0=ruleMap		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"maps",
	        		lv_maps_7_0, 
	        		"Map", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'</map.' 
    {
        createLeafNode(grammarAccess.getMapAccess().getMapKeyword_3_1_2(), null); 
    }
(
(
		lv_mapClosingName_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMapAccess().getMapClosingNameIDTerminalRuleCall_3_1_3_0(), "mapClosingName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMapRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"mapClosingName",
	        		lv_mapClosingName_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'>' 
    {
        createLeafNode(grammarAccess.getMapAccess().getGreaterThanSignKeyword_3_1_4(), null); 
    }
)))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<property' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getPropertyKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getPropertyAccess().getPropertyAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPropertyAccess().getPropertyAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getAttributesPossibleExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePossibleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PossibleExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(	'/>' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getSolidusGreaterThanSignKeyword_3_0(), null); 
    }

    |(	'>' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getGreaterThanSignKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getExpressionValueExpressionTagParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_expressionValue_5_0=ruleExpressionTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionValue",
	        		lv_expressionValue_5_0, 
	        		"ExpressionTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'</property>' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getPropertyKeyword_3_1_2(), null); 
    }
)))
;





// Entry rule entryRuleExpressionTag
entryRuleExpressionTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionTagRule(), currentNode); }
	 iv_ruleExpressionTag=ruleExpressionTag 
	 { $current=$iv_ruleExpressionTag.current; } 
	 EOF 
;

// Rule ExpressionTag
ruleExpressionTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<expression>' 
    {
        createLeafNode(grammarAccess.getExpressionTagAccess().getExpressionKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionTagAccess().getValueExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'</expression>' 
    {
        createLeafNode(grammarAccess.getExpressionTagAccess().getExpressionKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getExpressionOrExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_expression_0_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_0_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePathElement
entryRulePathElement returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathElementRule(), currentNode); } 
	 iv_rulePathElement=rulePathElement 
	 { $current=$iv_rulePathElement.current.getText(); }  
	 EOF 
;

// Rule PathElement
rulePathElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathElementAccess().getFullStopKeyword_1(), null); 
    }

    |
	kw='..' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathElementAccess().getFullStopFullStopKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRulePathSequence
entryRulePathSequence returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathSequenceRule(), currentNode); } 
	 iv_rulePathSequence=rulePathSequence 
	 { $current=$iv_rulePathSequence.current.getText(); }  
	 EOF 
;

// Rule PathSequence
rulePathSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='[' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathSequenceAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathSequenceAccess().getSolidusKeyword_1(), null); 
    }
)?
    { 
        currentNode=createCompositeNode(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_2(), currentNode); 
    }
    this_PathElement_2=rulePathElement    {
		$current.merge(this_PathElement_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathSequenceAccess().getSolidusKeyword_3_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_3_1(), currentNode); 
    }
    this_PathElement_4=rulePathElement    {
		$current.merge(this_PathElement_4);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*
	kw=']' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPathSequenceAccess().getRightSquareBracketKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleTmlExpression
entryRuleTmlExpression returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTmlExpressionRule(), currentNode); } 
	 iv_ruleTmlExpression=ruleTmlExpression 
	 { $current=$iv_ruleTmlExpression.current.getText(); }  
	 EOF 
;

// Rule TmlExpression
ruleTmlExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getTmlExpressionAccess().getPathSequenceParserRuleCall(), currentNode); 
    }
    this_PathSequence_0=rulePathSequence    {
		$current.merge(this_PathSequence_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleExistsTmlExpression
entryRuleExistsTmlExpression returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExistsTmlExpressionRule(), currentNode); } 
	 iv_ruleExistsTmlExpression=ruleExistsTmlExpression 
	 { $current=$iv_ruleExistsTmlExpression.current.getText(); }  
	 EOF 
;

// Rule ExistsTmlExpression
ruleExistsTmlExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='?' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getExistsTmlExpressionAccess().getQuestionMarkKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getExistsTmlExpressionAccess().getTmlExpressionParserRuleCall_1(), currentNode); 
    }
    this_TmlExpression_1=ruleTmlExpression    {
		$current.merge(this_TmlExpression_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_op_2_0=	'OR' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "OR", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_op_2_0=	'AND' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "AND", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEqualityExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_op_2_0=	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "==", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_op_4_0=	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_0, "!=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_operands_5_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_5_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_operands_5_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_5_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		lv_op_2_0=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_2_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		lv_op_4_0=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_2_1_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_4_0, "/", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_operands_5_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_5_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getUnaryExpressionAccess().getExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_1_0=	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_0, "!", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperandsPrimaryExpressionParserRuleCall_0_2_0(), currentNode); 
	    }
		lv_operands_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_2_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1(), currentNode); 
    }
    this_PrimaryExpression_3=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getPrimaryExpressionAccess().getExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOperandsLiteralParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"Literal", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_OrExpression_3=ruleOrExpression
    { 
        $current = $this_OrExpression_3.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionNameRule(), currentNode); } 
	 iv_ruleFunctionName=ruleFunctionName 
	 { $current=$iv_ruleFunctionName.current.getText(); }  
	 EOF 
;

// Rule FunctionName
ruleFunctionName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleFunctionOperands
entryRuleFunctionOperands returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionOperandsRule(), currentNode); }
	 iv_ruleFunctionOperands=ruleFunctionOperands 
	 { $current=$iv_ruleFunctionOperands.current; } 
	 EOF 
;

// Rule FunctionOperands
ruleFunctionOperands returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFunctionOperandsAccess().getExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFunctionOperandsAccess().getExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_operands_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOperandsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_1_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getFunctionOperandsAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_operands_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionOperandsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_3_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionCallRule(), currentNode); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getOpFunctionNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleFunctionName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"FunctionName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionCallAccess().getFunctionoperandsFunctionOperandsParserRuleCall_2_0(), currentNode); 
	    }
		lv_functionoperands_2_0=ruleFunctionOperands		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"functionoperands",
	        		lv_functionoperands_2_0, 
	        		"FunctionOperands", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_literal_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLiteralAccess().getLiteralINTTerminalRuleCall_0_1_0(), "literal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literal",
	        		lv_literal_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getFunctionCallParserRuleCall_1(), currentNode); 
    }
    this_FunctionCall_2=ruleFunctionCall
    { 
        $current = $this_FunctionCall_2.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getNameExistsTmlExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_name_4_0=ruleExistsTmlExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ExistsTmlExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getNameTmlExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_name_6_0=ruleTmlExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"TmlExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_8_0=	'{' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getOpLeftCurlyBracketKeyword_4_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_8_0, "{", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_operands_9_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_9_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	',' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getCommaKeyword_4_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_3_1_0(), currentNode); 
	    }
		lv_operands_11_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operands",
	        		lv_operands_11_0, 
	        		"OrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_5_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_14_0=	'NULL' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getOpNULLKeyword_5_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_14_0, "NULL", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_6_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_6_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_16_0=	'TODAY' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getOpTODAYKeyword_6_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_16_0, "TODAY", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_7_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_7_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_18_0=	'TRUE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getOpTRUEKeyword_7_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_18_0, "TRUE", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getLiteralAccess().getExpressionAction_8_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLiteralAccess().getExpressionAction_8_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_20_0=	'FALSE' 
    {
        createLeafNode(grammarAccess.getLiteralAccess().getOpFALSEKeyword_8_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_20_0, "FALSE", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





RULE_ATTRIBUTESTRING : ('"' ~('=') ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* ~(';') '"'|'""'|'"' ~('"') '"');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


