/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.expression.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class NavajoExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevel");
		private final Assignment cToplevelExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cToplevelExpressionOrExpressionParserRuleCall_0 = (RuleCall)cToplevelExpressionAssignment.eContents().get(0);
		
		////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
		////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
		////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
		////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
		////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//TopLevel: //	 toplevelExpression =OrExpression
		//	toplevelExpression=OrExpression;
		public ParserRule getRule() { return rule; }

		////	 toplevelExpression =OrExpression
		//toplevelExpression=OrExpression
		public Assignment getToplevelExpressionAssignment() { return cToplevelExpressionAssignment; }

		//OrExpression
		public RuleCall getToplevelExpressionOrExpressionParserRuleCall_0() { return cToplevelExpressionOrExpressionParserRuleCall_0; }
	}

	public class PathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// skipped url, image, points, datepattern, password
		////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
		//PathElement returns ecore::EString:
		//	ID | "." | "..";
		public ParserRule getRule() { return rule; }

		//ID | "." | ".."
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
	}

	public class TmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAbsoluteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbsoluteSolidusKeyword_1_0 = (Keyword)cAbsoluteAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsPathElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TmlExpression returns TmlReference:
		//	"[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]";
		public ParserRule getRule() { return rule; }

		//"[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//absolute?="/"?
		public Assignment getAbsoluteAssignment_1() { return cAbsoluteAssignment_1; }

		//"/"
		public Keyword getAbsoluteSolidusKeyword_1_0() { return cAbsoluteSolidusKeyword_1_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_2_0() { return cElementsPathElementParserRuleCall_2_0; }

		//("/" elements+=PathElement)*
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_3_1_0() { return cElementsPathElementParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ExistsTmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsTmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAbsoluteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAbsoluteSolidusKeyword_2_0 = (Keyword)cAbsoluteAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsPathElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSolidusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExistsTmlExpression returns ExistsTmlReference:
		//	"?" "[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]";
		public ParserRule getRule() { return rule; }

		//"?" "[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//absolute?="/"?
		public Assignment getAbsoluteAssignment_2() { return cAbsoluteAssignment_2; }

		//"/"
		public Keyword getAbsoluteSolidusKeyword_2_0() { return cAbsoluteSolidusKeyword_2_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_3_0() { return cElementsPathElementParserRuleCall_3_0; }

		//("/" elements+=PathElement)*
		public Group getGroup_4() { return cGroup_4; }

		//"/"
		public Keyword getSolidusKeyword_4_0() { return cSolidusKeyword_4_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_4_1_0() { return cElementsPathElementParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class MapGetReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapGetReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOperationsDollarSignKeyword_0_0 = (Keyword)cOperationsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsPathElementParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		
		//MapGetReference:
		//	operations+="$" elements+=PathElement ("/" elements+=PathElement)*;
		public ParserRule getRule() { return rule; }

		//operations+="$" elements+=PathElement ("/" elements+=PathElement)*
		public Group getGroup() { return cGroup; }

		//operations+="$"
		public Assignment getOperationsAssignment_0() { return cOperationsAssignment_0; }

		//"$"
		public Keyword getOperationsDollarSignKeyword_0_0() { return cOperationsDollarSignKeyword_0_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_1_0() { return cElementsPathElementParserRuleCall_1_0; }

		//("/" elements+=PathElement)*
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//elements+=PathElement
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//PathElement
		public RuleCall getElementsPathElementParserRuleCall_2_1_0() { return cElementsPathElementParserRuleCall_2_1_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersAndExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperationsORKeyword_1_0_0 = (Keyword)cOperationsAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersAndExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_0_0() { return cParametersAndExpressionParserRuleCall_0_0; }

		//(operations+="OR" parameters+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operations+="OR"
		public Assignment getOperationsAssignment_1_0() { return cOperationsAssignment_1_0; }

		//"OR"
		public Keyword getOperationsORKeyword_1_0_0() { return cOperationsORKeyword_1_0_0; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_1_1_0() { return cParametersAndExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperationsANDKeyword_1_0_0 = (Keyword)cOperationsAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_0_0() { return cParametersEqualityExpressionParserRuleCall_0_0; }

		//(operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operations+="AND"
		public Assignment getOperationsAssignment_1_0() { return cOperationsAssignment_1_0; }

		//"AND"
		public Keyword getOperationsANDKeyword_1_0_0() { return cOperationsANDKeyword_1_0_0; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_1_1_0() { return cParametersEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cOperationsEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cOperationsAssignment_1_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cOperationsExclamationMarkEqualsSignKeyword_1_1_0_0 = (Keyword)cOperationsAssignment_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
		//	parameters+=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
		//parameters+=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_0_0() { return cParametersAdditiveExpressionParserRuleCall_0_0; }

		//(operations+="==" parameters+=AdditiveExpression | operations+="!=" parameters+=AdditiveExpression)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//operations+="==" parameters+=AdditiveExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//operations+="=="
		public Assignment getOperationsAssignment_1_0_0() { return cOperationsAssignment_1_0_0; }

		//"=="
		public Keyword getOperationsEqualsSignEqualsSignKeyword_1_0_0_0() { return cOperationsEqualsSignEqualsSignKeyword_1_0_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_1_0_1_0() { return cParametersAdditiveExpressionParserRuleCall_1_0_1_0; }

		//operations+="!=" parameters+=AdditiveExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operations+="!="
		public Assignment getOperationsAssignment_1_1_0() { return cOperationsAssignment_1_1_0; }

		//"!="
		public Keyword getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0() { return cOperationsExclamationMarkEqualsSignKeyword_1_1_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_1_1_1_0() { return cParametersAdditiveExpressionParserRuleCall_1_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//// Skipped for now. Trouble with overloaded '<' stuff  
		////RelationalExpression returns Expression: 
		////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
		////    ;
		//AdditiveExpression returns Expression:
		//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//	parameters+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//parameters+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_0_0() { return cParametersMultiplicativeExpressionParserRuleCall_0_0; }

		//("+" parameters+=MultiplicativeExpression | "-" parameters+=MultiplicativeExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"+" parameters+=MultiplicativeExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_1_0_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_1_0_1_0; }

		//"-" parameters+=MultiplicativeExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_1_1_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_1_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cOperationsAsteriskKeyword_1_0_0_0 = (Keyword)cOperationsAssignment_1_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_1_0_1_0 = (RuleCall)cParametersAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cOperationsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cOperationsSolidusKeyword_1_1_0_0 = (Keyword)cOperationsAssignment_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/"
		//	parameters+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/" parameters+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_0_0() { return cParametersUnaryExpressionParserRuleCall_0_0; }

		//(operations+="*" parameters+=UnaryExpression | operations+="/" parameters+=UnaryExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//operations+="*" parameters+=UnaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//operations+="*"
		public Assignment getOperationsAssignment_1_0_0() { return cOperationsAssignment_1_0_0; }

		//"*"
		public Keyword getOperationsAsteriskKeyword_1_0_0_0() { return cOperationsAsteriskKeyword_1_0_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_1_0_1() { return cParametersAssignment_1_0_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_1_0_1_0() { return cParametersUnaryExpressionParserRuleCall_1_0_1_0; }

		//operations+="/" parameters+=UnaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operations+="/"
		public Assignment getOperationsAssignment_1_1_0() { return cOperationsAssignment_1_1_0; }

		//"/"
		public Keyword getOperationsSolidusKeyword_1_1_0_0() { return cOperationsSolidusKeyword_1_1_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_1_1_1_0() { return cParametersUnaryExpressionParserRuleCall_1_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperationsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOperationsExclamationMarkKeyword_0_0_0 = (Keyword)cOperationsAssignment_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParametersPrimaryExpressionParserRuleCall_0_1_0 = (RuleCall)cParametersAssignment_0_1.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//operations+="!" parameters+=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//operations+="!" parameters+=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//operations+="!"
		public Assignment getOperationsAssignment_0_0() { return cOperationsAssignment_0_0; }

		//"!"
		public Keyword getOperationsExclamationMarkKeyword_0_0_0() { return cOperationsExclamationMarkKeyword_0_0_0; }

		//parameters+=PrimaryExpression
		public Assignment getParametersAssignment_0_1() { return cParametersAssignment_0_1; }

		//PrimaryExpression
		public RuleCall getParametersPrimaryExpressionParserRuleCall_0_1_0() { return cParametersPrimaryExpressionParserRuleCall_0_1_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParametersLiteralParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	parameters+=Literal | "(" parameters+=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//parameters+=Literal | "(" parameters+=OrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//parameters+=Literal
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }

		//Literal
		public RuleCall getParametersLiteralParserRuleCall_0_0() { return cParametersLiteralParserRuleCall_0_0; }

		//"(" parameters+=OrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_1_0() { return cParametersOrExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Keep this one in place so it will create a node for the code completion
		//FunctionName returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFunctionNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
		public ParserRule getRule() { return rule; }

		//name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")"
		public Group getGroup() { return cGroup; }

		//name=FunctionName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//FunctionName
		public RuleCall getNameFunctionNameParserRuleCall_0_0() { return cNameFunctionNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_0() { return cParametersOrExpressionParserRuleCall_2_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_3_1_0() { return cParametersOrExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cValueStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueStringAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOperationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperationsFORALLKeyword_2_0_0 = (Keyword)cOperationsAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueStringAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cValueStringAssignment_2_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cParametersAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_4_0 = (RuleCall)cParametersAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cExpressionTypeAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExpressionTypeLeftCurlyBracketKeyword_4_0_0 = (Keyword)cExpressionTypeAssignment_4_0.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_4_2_1_0 = (RuleCall)cParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cElementsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cElementsNULLKeyword_5_0 = (Keyword)cElementsAssignment_5.eContents().get(0);
		private final Assignment cElementsAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cElementsTODAYKeyword_6_0 = (Keyword)cElementsAssignment_6.eContents().get(0);
		private final Assignment cElementsAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cElementsTRUEKeyword_7_0 = (Keyword)cElementsAssignment_7.eContents().get(0);
		private final Assignment cElementsAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cElementsFALSEKeyword_8_0 = (Keyword)cElementsAssignment_8.eContents().get(0);
		private final Assignment cParametersAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cParametersTmlExpressionParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Assignment cParametersAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cParametersExistsTmlExpressionParserRuleCall_10_0 = (RuleCall)cParametersAssignment_10.eContents().get(0);
		private final Assignment cParametersAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cParametersMapGetReferenceParserRuleCall_11_0 = (RuleCall)cParametersAssignment_11.eContents().get(0);
		
		////Expression returns Expression:
		////	Literal | FunctionCall | FunctionOperands ;
		//Literal returns Expression:
		//	{Expression} INT // TODO Add float
		//	//  | {Expression} elements+=ExistsTmlExpression 
		//	//  | {Expression} elements+=TmlExpression 
		//	| valueString=LITERALSTRING | operations+="FORALL" "(" valueString=LITERALSTRING "," parameters+=OrExpression ")" |
		//	FunctionCall | expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}" | elements+="NULL" |
		//	elements+="TODAY" | elements+="TRUE" | elements+="FALSE" | parameters+=TmlExpression | parameters+=ExistsTmlExpression
		//	| parameters+=MapGetReference;
		public ParserRule getRule() { return rule; }

		//{Expression} INT // TODO Add float
		////  | {Expression} elements+=ExistsTmlExpression 
		////  | {Expression} elements+=TmlExpression 
		//| valueString=LITERALSTRING | operations+="FORALL" "(" valueString=LITERALSTRING "," parameters+=OrExpression ")" |
		//FunctionCall | expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}" | elements+="NULL" |
		//elements+="TODAY" | elements+="TRUE" | elements+="FALSE" | parameters+=TmlExpression | parameters+=ExistsTmlExpression
		//| parameters+=MapGetReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} INT
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_1() { return cValueStringAssignment_1; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_1_0() { return cValueStringLITERALSTRINGTerminalRuleCall_1_0; }

		//operations+="FORALL" "(" valueString=LITERALSTRING "," parameters+=OrExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//operations+="FORALL"
		public Assignment getOperationsAssignment_2_0() { return cOperationsAssignment_2_0; }

		//"FORALL"
		public Keyword getOperationsFORALLKeyword_2_0_0() { return cOperationsFORALLKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_2_2() { return cValueStringAssignment_2_2; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_2_2_0() { return cValueStringLITERALSTRINGTerminalRuleCall_2_2_0; }

		//","
		public Keyword getCommaKeyword_2_3() { return cCommaKeyword_2_3; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_2_4() { return cParametersAssignment_2_4; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_4_0() { return cParametersOrExpressionParserRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }

		//expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//expressionType="{"
		public Assignment getExpressionTypeAssignment_4_0() { return cExpressionTypeAssignment_4_0; }

		//"{"
		public Keyword getExpressionTypeLeftCurlyBracketKeyword_4_0_0() { return cExpressionTypeLeftCurlyBracketKeyword_4_0_0; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_4_1_0() { return cParametersOrExpressionParserRuleCall_4_1_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_4_2_1() { return cParametersAssignment_4_2_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_4_2_1_0() { return cParametersOrExpressionParserRuleCall_4_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//elements+="NULL"
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//"NULL"
		public Keyword getElementsNULLKeyword_5_0() { return cElementsNULLKeyword_5_0; }

		//elements+="TODAY"
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//"TODAY"
		public Keyword getElementsTODAYKeyword_6_0() { return cElementsTODAYKeyword_6_0; }

		//elements+="TRUE"
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//"TRUE"
		public Keyword getElementsTRUEKeyword_7_0() { return cElementsTRUEKeyword_7_0; }

		//elements+="FALSE"
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//"FALSE"
		public Keyword getElementsFALSEKeyword_8_0() { return cElementsFALSEKeyword_8_0; }

		//parameters+=TmlExpression
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }

		//TmlExpression
		public RuleCall getParametersTmlExpressionParserRuleCall_9_0() { return cParametersTmlExpressionParserRuleCall_9_0; }

		//parameters+=ExistsTmlExpression
		public Assignment getParametersAssignment_10() { return cParametersAssignment_10; }

		//ExistsTmlExpression
		public RuleCall getParametersExistsTmlExpressionParserRuleCall_10_0() { return cParametersExistsTmlExpressionParserRuleCall_10_0; }

		//parameters+=MapGetReference
		public Assignment getParametersAssignment_11() { return cParametersAssignment_11; }

		//MapGetReference
		public RuleCall getParametersMapGetReferenceParserRuleCall_11_0() { return cParametersMapGetReferenceParserRuleCall_11_0; }
	}
	
	
	private TopLevelElements pTopLevel;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tLITERALSTRING;
	private PathElementElements pPathElement;
	private TmlExpressionElements pTmlExpression;
	private ExistsTmlExpressionElements pExistsTmlExpression;
	private MapGetReferenceElements pMapGetReference;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private FunctionNameElements pFunctionName;
	private FunctionCallElements pFunctionCall;
	private LiteralElements pLiteral;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public NavajoExpressionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
	////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
	////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
	////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//TopLevel: //	 toplevelExpression =OrExpression
	//	toplevelExpression=OrExpression;
	public TopLevelElements getTopLevelAccess() {
		return (pTopLevel != null) ? pTopLevel : (pTopLevel = new TopLevelElements());
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	////terminal INT returns ecore::EString: ('0'..'9')+;
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getLITERALSTRINGRule() {
		return (tLITERALSTRING != null) ? tLITERALSTRING : (tLITERALSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LITERALSTRING"));
	} 

	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | "..";
	public PathElementElements getPathElementAccess() {
		return (pPathElement != null) ? pPathElement : (pPathElement = new PathElementElements());
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//TmlExpression returns TmlReference:
	//	"[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]";
	public TmlExpressionElements getTmlExpressionAccess() {
		return (pTmlExpression != null) ? pTmlExpression : (pTmlExpression = new TmlExpressionElements());
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ExistsTmlReference:
	//	"?" "[" absolute?="/"? elements+=PathElement ("/" elements+=PathElement)* "]";
	public ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return (pExistsTmlExpression != null) ? pExistsTmlExpression : (pExistsTmlExpression = new ExistsTmlExpressionElements());
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//MapGetReference:
	//	operations+="$" elements+=PathElement ("/" elements+=PathElement)*;
	public MapGetReferenceElements getMapGetReferenceAccess() {
		return (pMapGetReference != null) ? pMapGetReference : (pMapGetReference = new MapGetReferenceElements());
	}
	
	public ParserRule getMapGetReferenceRule() {
		return getMapGetReferenceAccess().getRule();
	}

	//OrExpression returns Expression:
	//	parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
	//	parameters+=AdditiveExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	////RelationalExpression returns Expression: 
	////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
	////    ;
	//AdditiveExpression returns Expression:
	//	parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
	//	parameters+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/"
	//	parameters+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	parameters+=Literal | "(" parameters+=OrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// Keep this one in place so it will create a node for the code completion
	//FunctionName returns ecore::EString:
	//	ID;
	public FunctionNameElements getFunctionNameAccess() {
		return (pFunctionName != null) ? pFunctionName : (pFunctionName = new FunctionNameElements());
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionCall:
	//	name=FunctionName "(" parameters+=OrExpression? ("," parameters+=OrExpression)* ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	////Expression returns Expression:
	////	Literal | FunctionCall | FunctionOperands ;
	//Literal returns Expression:
	//	{Expression} INT // TODO Add float
	//	//  | {Expression} elements+=ExistsTmlExpression 
	//	//  | {Expression} elements+=TmlExpression 
	//	| valueString=LITERALSTRING | operations+="FORALL" "(" valueString=LITERALSTRING "," parameters+=OrExpression ")" |
	//	FunctionCall | expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}" | elements+="NULL" |
	//	elements+="TODAY" | elements+="TRUE" | elements+="FALSE" | parameters+=TmlExpression | parameters+=ExistsTmlExpression
	//	| parameters+=MapGetReference;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
