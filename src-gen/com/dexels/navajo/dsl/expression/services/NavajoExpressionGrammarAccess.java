/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.expression.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class NavajoExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTopLevelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cToplevelExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToplevelExpressionOrExpressionParserRuleCall_1_0 = (RuleCall)cToplevelExpressionAssignment_1.eContents().get(0);
		
		////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
		////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
		////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
		////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
		////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//TopLevel: //	 toplevelExpression =OrExpression
		//	{TopLevel} toplevelExpression=OrExpression;
		public ParserRule getRule() { return rule; }

		////	 toplevelExpression =OrExpression
		//{TopLevel} toplevelExpression=OrExpression
		public Group getGroup() { return cGroup; }

		////	 toplevelExpression =OrExpression
		//{TopLevel}
		public Action getTopLevelAction_0() { return cTopLevelAction_0; }

		//toplevelExpression=OrExpression
		public Assignment getToplevelExpressionAssignment_1() { return cToplevelExpressionAssignment_1; }

		//OrExpression
		public RuleCall getToplevelExpressionOrExpressionParserRuleCall_1_0() { return cToplevelExpressionOrExpressionParserRuleCall_1_0; }
	}

	public class PathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// skipped url, image, points, datepattern, password
		////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
		//PathElement returns ecore::EString:
		//	ID | "." | "..";
		public ParserRule getRule() { return rule; }

		//ID | "." | ".."
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
	}

	public class PathSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathElementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cPathElementParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PathSequence returns ecore::EString:
		//	"[" "/"? PathElement ("/" PathElement)* "]";
		public ParserRule getRule() { return rule; }

		//"[" "/"? PathElement ("/" PathElement)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"/"?
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//PathElement
		public RuleCall getPathElementParserRuleCall_2() { return cPathElementParserRuleCall_2; }

		//("/" PathElement)*
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//PathElement
		public RuleCall getPathElementParserRuleCall_3_1() { return cPathElementParserRuleCall_3_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class TmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmlExpression");
		private final RuleCall cPathSequenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TmlExpression returns ecore::EString:
		//	PathSequence;
		public ParserRule getRule() { return rule; }

		//PathSequence
		public RuleCall getPathSequenceParserRuleCall() { return cPathSequenceParserRuleCall; }
	}

	public class ExistsTmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsTmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTmlExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExistsTmlExpression returns ecore::EString:
		//	"?" TmlExpression;
		public ParserRule getRule() { return rule; }

		//"?" TmlExpression
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//TmlExpression
		public RuleCall getTmlExpressionParserRuleCall_1() { return cTmlExpressionParserRuleCall_1; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersAndExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperationsORKeyword_2_0_0 = (Keyword)cOperationsAssignment_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersAndExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	{Expression} parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_1_0() { return cParametersAndExpressionParserRuleCall_1_0; }

		//(operations+="OR" parameters+=AndExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//operations+="OR"
		public Assignment getOperationsAssignment_2_0() { return cOperationsAssignment_2_0; }

		//"OR"
		public Keyword getOperationsORKeyword_2_0_0() { return cOperationsORKeyword_2_0_0; }

		//parameters+=AndExpression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//AndExpression
		public RuleCall getParametersAndExpressionParserRuleCall_2_1_0() { return cParametersAndExpressionParserRuleCall_2_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOperationsANDKeyword_2_0_0 = (Keyword)cOperationsAssignment_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	{Expression} parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_1_0() { return cParametersEqualityExpressionParserRuleCall_1_0; }

		//(operations+="AND" parameters+=EqualityExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//operations+="AND"
		public Assignment getOperationsAssignment_2_0() { return cOperationsAssignment_2_0; }

		//"AND"
		public Keyword getOperationsANDKeyword_2_0_0() { return cOperationsANDKeyword_2_0_0; }

		//parameters+=EqualityExpression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//EqualityExpression
		public RuleCall getParametersEqualityExpressionParserRuleCall_2_1_0() { return cParametersEqualityExpressionParserRuleCall_2_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOperationsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cOperationsEqualsSignEqualsSignKeyword_2_0_0_0 = (Keyword)cOperationsAssignment_2_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOperationsExclamationMarkEqualsSignKeyword_2_1_0_0 = (Keyword)cOperationsAssignment_2_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersAdditiveExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	{Expression} parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
		//	parameters+=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
		//parameters+=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_1_0() { return cParametersAdditiveExpressionParserRuleCall_1_0; }

		//(operations+="==" parameters+=AdditiveExpression | operations+="!=" parameters+=AdditiveExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//operations+="==" parameters+=AdditiveExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//operations+="=="
		public Assignment getOperationsAssignment_2_0_0() { return cOperationsAssignment_2_0_0; }

		//"=="
		public Keyword getOperationsEqualsSignEqualsSignKeyword_2_0_0_0() { return cOperationsEqualsSignEqualsSignKeyword_2_0_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_0_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_0_1_0; }

		//operations+="!=" parameters+=AdditiveExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//operations+="!="
		public Assignment getOperationsAssignment_2_1_0() { return cOperationsAssignment_2_1_0; }

		//"!="
		public Keyword getOperationsExclamationMarkEqualsSignKeyword_2_1_0_0() { return cOperationsExclamationMarkEqualsSignKeyword_2_1_0_0; }

		//parameters+=AdditiveExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//AdditiveExpression
		public RuleCall getParametersAdditiveExpressionParserRuleCall_2_1_1_0() { return cParametersAdditiveExpressionParserRuleCall_2_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersMultiplicativeExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		
		//// Skipped for now. Trouble with overloaded '<' stuff  
		////RelationalExpression returns Expression: 
		////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
		////    ;
		//AdditiveExpression returns Expression:
		//	{Expression} parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//	parameters+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
		//parameters+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_1_0; }

		//("+" parameters+=MultiplicativeExpression | "-" parameters+=MultiplicativeExpression)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"+" parameters+=MultiplicativeExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_2_0_0() { return cPlusSignKeyword_2_0_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_2_0_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_2_0_1_0; }

		//"-" parameters+=MultiplicativeExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_0() { return cHyphenMinusKeyword_2_1_0; }

		//parameters+=MultiplicativeExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//MultiplicativeExpression
		public RuleCall getParametersMultiplicativeExpressionParserRuleCall_2_1_1_0() { return cParametersMultiplicativeExpressionParserRuleCall_2_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOperationsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cOperationsAsteriskKeyword_2_0_0_0 = (Keyword)cOperationsAssignment_2_0_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_2_0_1_0 = (RuleCall)cParametersAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperationsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOperationsSolidusKeyword_2_1_0_0 = (Keyword)cOperationsAssignment_2_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersUnaryExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	{Expression} parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/"
		//	parameters+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/"
		//parameters+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_1_0() { return cParametersUnaryExpressionParserRuleCall_1_0; }

		//(operations+="*" parameters+=UnaryExpression | operations+="/" parameters+=UnaryExpression)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//operations+="*" parameters+=UnaryExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//operations+="*"
		public Assignment getOperationsAssignment_2_0_0() { return cOperationsAssignment_2_0_0; }

		//"*"
		public Keyword getOperationsAsteriskKeyword_2_0_0_0() { return cOperationsAsteriskKeyword_2_0_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_2_0_1() { return cParametersAssignment_2_0_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_2_0_1_0() { return cParametersUnaryExpressionParserRuleCall_2_0_1_0; }

		//operations+="/" parameters+=UnaryExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//operations+="/"
		public Assignment getOperationsAssignment_2_1_0() { return cOperationsAssignment_2_1_0; }

		//"/"
		public Keyword getOperationsSolidusKeyword_2_1_0_0() { return cOperationsSolidusKeyword_2_1_0_0; }

		//parameters+=UnaryExpression
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//UnaryExpression
		public RuleCall getParametersUnaryExpressionParserRuleCall_2_1_1_0() { return cParametersUnaryExpressionParserRuleCall_2_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOperationsExclamationMarkKeyword_0_1_0 = (Keyword)cOperationsAssignment_0_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParametersPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cParametersAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//	{Expression} operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{Expression} operations+="!" parameters+=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} operations+="!" parameters+=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//operations+="!"
		public Assignment getOperationsAssignment_0_1() { return cOperationsAssignment_0_1; }

		//"!"
		public Keyword getOperationsExclamationMarkKeyword_0_1_0() { return cOperationsExclamationMarkKeyword_0_1_0; }

		//parameters+=PrimaryExpression
		public Assignment getParametersAssignment_0_2() { return cParametersAssignment_0_2; }

		//PrimaryExpression
		public RuleCall getParametersPrimaryExpressionParserRuleCall_0_2_0() { return cParametersPrimaryExpressionParserRuleCall_0_2_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cParametersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParametersLiteralParserRuleCall_0_1_0 = (RuleCall)cParametersAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	{Expression} parameters+=Literal | "(" parameters+=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//{Expression} parameters+=Literal | "(" parameters+=OrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} parameters+=Literal
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//parameters+=Literal
		public Assignment getParametersAssignment_0_1() { return cParametersAssignment_0_1; }

		//Literal
		public RuleCall getParametersLiteralParserRuleCall_0_1_0() { return cParametersLiteralParserRuleCall_0_1_0; }

		//"(" parameters+=OrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_1_0() { return cParametersOrExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperandsFunctionOperandsCrossReference_2_0 = (CrossReference)cOperandsAssignment_2.eContents().get(0);
		private final RuleCall cOperandsFunctionOperandsIDTerminalRuleCall_2_0_1 = (RuleCall)cOperandsFunctionOperandsCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////
		////FunctionName:
		////	ID;
		//FunctionCall:
		//	name=ID "(" operands=[FunctionOperands] ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" operands=[FunctionOperands] ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operands=[FunctionOperands]
		public Assignment getOperandsAssignment_2() { return cOperandsAssignment_2; }

		//[FunctionOperands]
		public CrossReference getOperandsFunctionOperandsCrossReference_2_0() { return cOperandsFunctionOperandsCrossReference_2_0; }

		//ID
		public RuleCall getOperandsFunctionOperandsIDTerminalRuleCall_2_0_1() { return cOperandsFunctionOperandsIDTerminalRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FunctionOperandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionOperands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionOperandsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		
		//FunctionOperands:
		//	{FunctionOperands} parameters+=OrExpression? ("," parameters+=OrExpression)*;
		public ParserRule getRule() { return rule; }

		//{FunctionOperands} parameters+=OrExpression? ("," parameters+=OrExpression)*
		public Group getGroup() { return cGroup; }

		//{FunctionOperands}
		public Action getFunctionOperandsAction_0() { return cFunctionOperandsAction_0; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_1_0() { return cParametersOrExpressionParserRuleCall_1_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_1_0() { return cParametersOrExpressionParserRuleCall_2_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueStringAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueStringINTTerminalRuleCall_0_1_0 = (RuleCall)cValueStringAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueStringAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueStringAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOperationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cOperationsFORALLKeyword_2_1_0 = (Keyword)cOperationsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cValueStringAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cValueStringLITERALSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cValueStringAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cParametersAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cParametersOrExpressionParserRuleCall_2_5_0 = (RuleCall)cParametersAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsExistsTmlExpressionParserRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsTmlExpressionParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cExpressionTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cExpressionTypeLeftCurlyBracketKeyword_6_1_0 = (Keyword)cExpressionTypeAssignment_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cParametersOrExpressionParserRuleCall_6_2_0 = (RuleCall)cParametersAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cParametersAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cParametersOrExpressionParserRuleCall_6_3_1_0 = (RuleCall)cParametersAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cElementsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cElementsNULLKeyword_7_1_0 = (Keyword)cElementsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cElementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cElementsTODAYKeyword_8_1_0 = (Keyword)cElementsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cExpressionAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cElementsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Keyword cElementsTRUEKeyword_9_1_0 = (Keyword)cElementsAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cExpressionAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cElementsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final Keyword cElementsFALSEKeyword_10_1_0 = (Keyword)cElementsAssignment_10_1.eContents().get(0);
		
		////Expression returns Expression:
		////	Literal | FunctionCall | FunctionOperands ;
		//Literal returns Expression:
		//	{Expression} valueString=INT // TODO Add float
		//	| {Expression} valueString=LITERALSTRING | {Expression} operations+="FORALL" "(" valueString=LITERALSTRING ","
		//	parameters+=OrExpression ")" | FunctionCall | {Expression} elements+=ExistsTmlExpression | {Expression}
		//	elements+=TmlExpression | {Expression} expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)*
		//	"}" | {Expression} elements+="NULL" | {Expression} elements+="TODAY" | {Expression} elements+="TRUE" | {Expression}
		//	elements+="FALSE";
		public ParserRule getRule() { return rule; }

		//{Expression} valueString=INT // TODO Add float
		//| {Expression} valueString=LITERALSTRING | {Expression} operations+="FORALL" "(" valueString=LITERALSTRING ","
		//parameters+=OrExpression ")" | FunctionCall | {Expression} elements+=ExistsTmlExpression | {Expression}
		//elements+=TmlExpression | {Expression} expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}"
		//| {Expression} elements+="NULL" | {Expression} elements+="TODAY" | {Expression} elements+="TRUE" | {Expression}
		//elements+="FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} valueString=INT
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//valueString=INT
		public Assignment getValueStringAssignment_0_1() { return cValueStringAssignment_0_1; }

		//INT
		public RuleCall getValueStringINTTerminalRuleCall_0_1_0() { return cValueStringINTTerminalRuleCall_0_1_0; }

		//{Expression} valueString=LITERALSTRING
		public Group getGroup_1() { return cGroup_1; }

		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_1_1() { return cValueStringAssignment_1_1; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_1_1_0() { return cValueStringLITERALSTRINGTerminalRuleCall_1_1_0; }

		//{Expression} operations+="FORALL" "(" valueString=LITERALSTRING "," parameters+=OrExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }

		//operations+="FORALL"
		public Assignment getOperationsAssignment_2_1() { return cOperationsAssignment_2_1; }

		//"FORALL"
		public Keyword getOperationsFORALLKeyword_2_1_0() { return cOperationsFORALLKeyword_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//valueString=LITERALSTRING
		public Assignment getValueStringAssignment_2_3() { return cValueStringAssignment_2_3; }

		//LITERALSTRING
		public RuleCall getValueStringLITERALSTRINGTerminalRuleCall_2_3_0() { return cValueStringLITERALSTRINGTerminalRuleCall_2_3_0; }

		//","
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_2_5() { return cParametersAssignment_2_5; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_2_5_0() { return cParametersOrExpressionParserRuleCall_2_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }

		//{Expression} elements+=ExistsTmlExpression
		public Group getGroup_4() { return cGroup_4; }

		//{Expression}
		public Action getExpressionAction_4_0() { return cExpressionAction_4_0; }

		//elements+=ExistsTmlExpression
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }

		//ExistsTmlExpression
		public RuleCall getElementsExistsTmlExpressionParserRuleCall_4_1_0() { return cElementsExistsTmlExpressionParserRuleCall_4_1_0; }

		//{Expression} elements+=TmlExpression
		public Group getGroup_5() { return cGroup_5; }

		//{Expression}
		public Action getExpressionAction_5_0() { return cExpressionAction_5_0; }

		//elements+=TmlExpression
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }

		//TmlExpression
		public RuleCall getElementsTmlExpressionParserRuleCall_5_1_0() { return cElementsTmlExpressionParserRuleCall_5_1_0; }

		//{Expression} expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)* "}"
		public Group getGroup_6() { return cGroup_6; }

		//{Expression}
		public Action getExpressionAction_6_0() { return cExpressionAction_6_0; }

		//expressionType="{"
		public Assignment getExpressionTypeAssignment_6_1() { return cExpressionTypeAssignment_6_1; }

		//"{"
		public Keyword getExpressionTypeLeftCurlyBracketKeyword_6_1_0() { return cExpressionTypeLeftCurlyBracketKeyword_6_1_0; }

		//parameters+=OrExpression?
		public Assignment getParametersAssignment_6_2() { return cParametersAssignment_6_2; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_6_2_0() { return cParametersOrExpressionParserRuleCall_6_2_0; }

		//("," parameters+=OrExpression)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//parameters+=OrExpression
		public Assignment getParametersAssignment_6_3_1() { return cParametersAssignment_6_3_1; }

		//OrExpression
		public RuleCall getParametersOrExpressionParserRuleCall_6_3_1_0() { return cParametersOrExpressionParserRuleCall_6_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//{Expression} elements+="NULL"
		public Group getGroup_7() { return cGroup_7; }

		//{Expression}
		public Action getExpressionAction_7_0() { return cExpressionAction_7_0; }

		//elements+="NULL"
		public Assignment getElementsAssignment_7_1() { return cElementsAssignment_7_1; }

		//"NULL"
		public Keyword getElementsNULLKeyword_7_1_0() { return cElementsNULLKeyword_7_1_0; }

		//{Expression} elements+="TODAY"
		public Group getGroup_8() { return cGroup_8; }

		//{Expression}
		public Action getExpressionAction_8_0() { return cExpressionAction_8_0; }

		//elements+="TODAY"
		public Assignment getElementsAssignment_8_1() { return cElementsAssignment_8_1; }

		//"TODAY"
		public Keyword getElementsTODAYKeyword_8_1_0() { return cElementsTODAYKeyword_8_1_0; }

		//{Expression} elements+="TRUE"
		public Group getGroup_9() { return cGroup_9; }

		//{Expression}
		public Action getExpressionAction_9_0() { return cExpressionAction_9_0; }

		//elements+="TRUE"
		public Assignment getElementsAssignment_9_1() { return cElementsAssignment_9_1; }

		//"TRUE"
		public Keyword getElementsTRUEKeyword_9_1_0() { return cElementsTRUEKeyword_9_1_0; }

		//{Expression} elements+="FALSE"
		public Group getGroup_10() { return cGroup_10; }

		//{Expression}
		public Action getExpressionAction_10_0() { return cExpressionAction_10_0; }

		//elements+="FALSE"
		public Assignment getElementsAssignment_10_1() { return cElementsAssignment_10_1; }

		//"FALSE"
		public Keyword getElementsFALSEKeyword_10_1_0() { return cElementsFALSEKeyword_10_1_0; }
	}
	
	
	private TopLevelElements pTopLevel;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tLITERALSTRING;
	private PathElementElements pPathElement;
	private PathSequenceElements pPathSequence;
	private TmlExpressionElements pTmlExpression;
	private ExistsTmlExpressionElements pExistsTmlExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private FunctionCallElements pFunctionCall;
	private FunctionOperandsElements pFunctionOperands;
	private LiteralElements pLiteral;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public NavajoExpressionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////import "classpath:/com/dexels/navajo/dsl/expression/Navajo.ecore"
	////import "file:///Users/frank/Documents/workspace-xtext/com.dexels.navajo.dsl.expression/src/com/dexels/navajo/dsl/expression/Navajo.ecore" as ncore
	////import "http://www.dexels.com/navajo/dsl/expression/NavajoCore" as ncore
	////generate navajoExpression "http://www.dexels.com/navajo/dsl/expression/NavajoExpression"
	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//TopLevel: //	 toplevelExpression =OrExpression
	//	{TopLevel} toplevelExpression=OrExpression;
	public TopLevelElements getTopLevelAccess() {
		return (pTopLevel != null) ? pTopLevel : (pTopLevel = new TopLevelElements());
	}
	
	public ParserRule getTopLevelRule() {
		return getTopLevelAccess().getRule();
	}

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal LITERALSTRING:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getLITERALSTRINGRule() {
		return (tLITERALSTRING != null) ? tLITERALSTRING : (tLITERALSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LITERALSTRING"));
	} 

	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | "..";
	public PathElementElements getPathElementAccess() {
		return (pPathElement != null) ? pPathElement : (pPathElement = new PathElementElements());
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//PathSequence returns ecore::EString:
	//	"[" "/"? PathElement ("/" PathElement)* "]";
	public PathSequenceElements getPathSequenceAccess() {
		return (pPathSequence != null) ? pPathSequence : (pPathSequence = new PathSequenceElements());
	}
	
	public ParserRule getPathSequenceRule() {
		return getPathSequenceAccess().getRule();
	}

	//TmlExpression returns ecore::EString:
	//	PathSequence;
	public TmlExpressionElements getTmlExpressionAccess() {
		return (pTmlExpression != null) ? pTmlExpression : (pTmlExpression = new TmlExpressionElements());
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ecore::EString:
	//	"?" TmlExpression;
	public ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return (pExistsTmlExpression != null) ? pExistsTmlExpression : (pExistsTmlExpression = new ExistsTmlExpressionElements());
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//	{Expression} parameters+=AndExpression (operations+="OR" parameters+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	{Expression} parameters+=EqualityExpression (operations+="AND" parameters+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	{Expression} parameters+=AdditiveExpression (operations+="==" parameters+=AdditiveExpression | operations+="!="
	//	parameters+=AdditiveExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	////RelationalExpression returns Expression: 
	////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
	////    ;
	//AdditiveExpression returns Expression:
	//	{Expression} parameters+=MultiplicativeExpression ("+" parameters+=MultiplicativeExpression | "-"
	//	parameters+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	{Expression} parameters+=UnaryExpression (operations+="*" parameters+=UnaryExpression | operations+="/"
	//	parameters+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	{Expression} operations+="!" parameters+=PrimaryExpression | PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	{Expression} parameters+=Literal | "(" parameters+=OrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////
	////FunctionName:
	////	ID;
	//FunctionCall:
	//	name=ID "(" operands=[FunctionOperands] ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//FunctionOperands:
	//	{FunctionOperands} parameters+=OrExpression? ("," parameters+=OrExpression)*;
	public FunctionOperandsElements getFunctionOperandsAccess() {
		return (pFunctionOperands != null) ? pFunctionOperands : (pFunctionOperands = new FunctionOperandsElements());
	}
	
	public ParserRule getFunctionOperandsRule() {
		return getFunctionOperandsAccess().getRule();
	}

	////Expression returns Expression:
	////	Literal | FunctionCall | FunctionOperands ;
	//Literal returns Expression:
	//	{Expression} valueString=INT // TODO Add float
	//	| {Expression} valueString=LITERALSTRING | {Expression} operations+="FORALL" "(" valueString=LITERALSTRING ","
	//	parameters+=OrExpression ")" | FunctionCall | {Expression} elements+=ExistsTmlExpression | {Expression}
	//	elements+=TmlExpression | {Expression} expressionType="{" parameters+=OrExpression? ("," parameters+=OrExpression)*
	//	"}" | {Expression} elements+="NULL" | {Expression} elements+="TODAY" | {Expression} elements+="TRUE" | {Expression}
	//	elements+="FALSE";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
