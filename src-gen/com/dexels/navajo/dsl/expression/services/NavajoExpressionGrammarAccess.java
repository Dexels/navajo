/*
* generated by Xtext
*/

package com.dexels.navajo.dsl.expression.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class NavajoExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionOrExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Expression returns TopLevel:
		//	expression=OrExpression;
		public ParserRule getRule() { return rule; }

		//expression=OrExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_0() { return cExpressionOrExpressionParserRuleCall_0; }
	}

	public class PathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		////terminal LITERALSTRING	: 
		////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		////	;
		//// skipped url, image, points, datepattern, password
		////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
		//PathElement returns ecore::EString:
		//	ID | "." | "..";
		public ParserRule getRule() { return rule; }

		//ID | "." | ".."
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
	}

	public class PathSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPathElementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cPathElementParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PathSequence returns ecore::EString:
		//	"[" "/"? PathElement ("/" PathElement)* "]";
		public ParserRule getRule() { return rule; }

		//"[" "/"? PathElement ("/" PathElement)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"/"?
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//PathElement
		public RuleCall getPathElementParserRuleCall_2() { return cPathElementParserRuleCall_2; }

		//("/" PathElement)*
		public Group getGroup_3() { return cGroup_3; }

		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }

		//PathElement
		public RuleCall getPathElementParserRuleCall_3_1() { return cPathElementParserRuleCall_3_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class TmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TmlExpression");
		private final RuleCall cPathSequenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TmlExpression returns ecore::EString:
		//	PathSequence;
		public ParserRule getRule() { return rule; }

		//PathSequence
		public RuleCall getPathSequenceParserRuleCall() { return cPathSequenceParserRuleCall; }
	}

	public class ExistsTmlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExistsTmlExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTmlExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExistsTmlExpression returns ecore::EString:
		//	"?" TmlExpression;
		public ParserRule getRule() { return rule; }

		//"?" TmlExpression
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//TmlExpression
		public RuleCall getTmlExpressionParserRuleCall_1() { return cTmlExpressionParserRuleCall_1; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsAndExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpORKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandsAndExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandsAssignment_2_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//	{Expression} operands+=AndExpression (op="OR" operands+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=AndExpression (op="OR" operands+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_1_0() { return cOperandsAndExpressionParserRuleCall_1_0; }

		//(op="OR" operands+=AndExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//op="OR"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"OR"
		public Keyword getOpORKeyword_2_0_0() { return cOpORKeyword_2_0_0; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_2_1() { return cOperandsAssignment_2_1; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_2_1_0() { return cOperandsAndExpressionParserRuleCall_2_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsEqualityExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpANDKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandsEqualityExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandsAssignment_2_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	{Expression} operands+=EqualityExpression (op="AND" operands+=EqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=EqualityExpression (op="AND" operands+=EqualityExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=EqualityExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//EqualityExpression
		public RuleCall getOperandsEqualityExpressionParserRuleCall_1_0() { return cOperandsEqualityExpressionParserRuleCall_1_0; }

		//(op="AND" operands+=EqualityExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//op="AND"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"AND"
		public Keyword getOpANDKeyword_2_0_0() { return cOpANDKeyword_2_0_0; }

		//operands+=EqualityExpression
		public Assignment getOperandsAssignment_2_1() { return cOperandsAssignment_2_1; }

		//EqualityExpression
		public RuleCall getOperandsEqualityExpressionParserRuleCall_2_1_0() { return cOperandsEqualityExpressionParserRuleCall_2_1_0; }
	}

	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsAdditiveExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_2_0_0_0 = (Keyword)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOperandsAdditiveExpressionParserRuleCall_2_0_1_0 = (RuleCall)cOperandsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOpAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_2_1_0_0 = (Keyword)cOpAssignment_2_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperandsAdditiveExpressionParserRuleCall_2_1_1_0 = (RuleCall)cOperandsAssignment_2_1_1.eContents().get(0);
		
		//EqualityExpression returns Expression:
		//	{Expression} operands+=AdditiveExpression (op="==" operands+=AdditiveExpression | op="!="
		//	operands+=AdditiveExpression)?;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=AdditiveExpression (op="==" operands+=AdditiveExpression | op="!=" operands+=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=AdditiveExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//AdditiveExpression
		public RuleCall getOperandsAdditiveExpressionParserRuleCall_1_0() { return cOperandsAdditiveExpressionParserRuleCall_1_0; }

		//(op="==" operands+=AdditiveExpression | op="!=" operands+=AdditiveExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//op="==" operands+=AdditiveExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//op="=="
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_2_0_0_0() { return cOpEqualsSignEqualsSignKeyword_2_0_0_0; }

		//operands+=AdditiveExpression
		public Assignment getOperandsAssignment_2_0_1() { return cOperandsAssignment_2_0_1; }

		//AdditiveExpression
		public RuleCall getOperandsAdditiveExpressionParserRuleCall_2_0_1_0() { return cOperandsAdditiveExpressionParserRuleCall_2_0_1_0; }

		//op="!=" operands+=AdditiveExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//op="!="
		public Assignment getOpAssignment_2_1_0() { return cOpAssignment_2_1_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_2_1_0_0() { return cOpExclamationMarkEqualsSignKeyword_2_1_0_0; }

		//operands+=AdditiveExpression
		public Assignment getOperandsAssignment_2_1_1() { return cOperandsAssignment_2_1_1; }

		//AdditiveExpression
		public RuleCall getOperandsAdditiveExpressionParserRuleCall_2_1_1_0() { return cOperandsAdditiveExpressionParserRuleCall_2_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsMultiplicativeExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0 = (RuleCall)cOperandsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0 = (RuleCall)cOperandsAssignment_2_1_1.eContents().get(0);
		
		//// Skipped for now. Trouble with overloaded '<' stuff  
		////RelationalExpression returns Expression: 
		////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
		////    ;
		//AdditiveExpression returns Expression:
		//	{Expression} operands+=MultiplicativeExpression ("+" operands+=MultiplicativeExpression | "-"
		//	operands+=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=MultiplicativeExpression ("+" operands+=MultiplicativeExpression | "-"
		//operands+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=MultiplicativeExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//MultiplicativeExpression
		public RuleCall getOperandsMultiplicativeExpressionParserRuleCall_1_0() { return cOperandsMultiplicativeExpressionParserRuleCall_1_0; }

		//("+" operands+=MultiplicativeExpression | "-" operands+=MultiplicativeExpression)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"+" operands+=MultiplicativeExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_2_0_0() { return cPlusSignKeyword_2_0_0; }

		//operands+=MultiplicativeExpression
		public Assignment getOperandsAssignment_2_0_1() { return cOperandsAssignment_2_0_1; }

		//MultiplicativeExpression
		public RuleCall getOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0() { return cOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0; }

		//"-" operands+=MultiplicativeExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_0() { return cHyphenMinusKeyword_2_1_0; }

		//operands+=MultiplicativeExpression
		public Assignment getOperandsAssignment_2_1_1() { return cOperandsAssignment_2_1_1; }

		//MultiplicativeExpression
		public RuleCall getOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0() { return cOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsUnaryExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cOpAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_2_0_0_0 = (Keyword)cOpAssignment_2_0_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cOperandsUnaryExpressionParserRuleCall_2_0_1_0 = (RuleCall)cOperandsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOpAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cOpSolidusKeyword_2_1_0_0 = (Keyword)cOpAssignment_2_1_0.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOperandsUnaryExpressionParserRuleCall_2_1_1_0 = (RuleCall)cOperandsAssignment_2_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	{Expression} operands+=UnaryExpression (op="*" operands+=UnaryExpression | op="/" operands+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=UnaryExpression (op="*" operands+=UnaryExpression | op="/" operands+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=UnaryExpression
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//UnaryExpression
		public RuleCall getOperandsUnaryExpressionParserRuleCall_1_0() { return cOperandsUnaryExpressionParserRuleCall_1_0; }

		//(op="*" operands+=UnaryExpression | op="/" operands+=UnaryExpression)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//op="*" operands+=UnaryExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//op="*"
		public Assignment getOpAssignment_2_0_0() { return cOpAssignment_2_0_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_2_0_0_0() { return cOpAsteriskKeyword_2_0_0_0; }

		//operands+=UnaryExpression
		public Assignment getOperandsAssignment_2_0_1() { return cOperandsAssignment_2_0_1; }

		//UnaryExpression
		public RuleCall getOperandsUnaryExpressionParserRuleCall_2_0_1_0() { return cOperandsUnaryExpressionParserRuleCall_2_0_1_0; }

		//op="/" operands+=UnaryExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//op="/"
		public Assignment getOpAssignment_2_1_0() { return cOpAssignment_2_1_0; }

		//"/"
		public Keyword getOpSolidusKeyword_2_1_0_0() { return cOpSolidusKeyword_2_1_0_0; }

		//operands+=UnaryExpression
		public Assignment getOperandsAssignment_2_1_1() { return cOperandsAssignment_2_1_1; }

		//UnaryExpression
		public RuleCall getOperandsUnaryExpressionParserRuleCall_2_1_1_0() { return cOperandsUnaryExpressionParserRuleCall_2_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpExclamationMarkKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cOperandsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandsPrimaryExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandsAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression returns Expression:
		//	{Expression} op="!" operands+=PrimaryExpression | PrimaryExpression;
		public ParserRule getRule() { return rule; }

		//{Expression} op="!" operands+=PrimaryExpression | PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} op="!" operands+=PrimaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//op="!"
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_0_1_0() { return cOpExclamationMarkKeyword_0_1_0; }

		//operands+=PrimaryExpression
		public Assignment getOperandsAssignment_0_2() { return cOperandsAssignment_0_2; }

		//PrimaryExpression
		public RuleCall getOperandsPrimaryExpressionParserRuleCall_0_2_0() { return cOperandsPrimaryExpressionParserRuleCall_0_2_0; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperandsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandsLiteralParserRuleCall_0_1_0 = (RuleCall)cOperandsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryExpression returns Expression:
		//	{Expression} operands+=Literal | "(" OrExpression ")";
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=Literal | "(" OrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} operands+=Literal
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//operands+=Literal
		public Assignment getOperandsAssignment_0_1() { return cOperandsAssignment_0_1; }

		//Literal
		public RuleCall getOperandsLiteralParserRuleCall_0_1_0() { return cOperandsLiteralParserRuleCall_0_1_0; }

		//"(" OrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_1_1() { return cOrExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionName");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName returns ecore::EString:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FunctionOperandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionOperands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperandsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandsOrExpressionParserRuleCall_1_0 = (RuleCall)cOperandsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOperandsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOperandsOrExpressionParserRuleCall_2_1_0 = (RuleCall)cOperandsAssignment_2_1.eContents().get(0);
		
		//FunctionOperands returns Expression:
		//	{Expression} operands+=OrExpression? ("," operands+=OrExpression)*;
		public ParserRule getRule() { return rule; }

		//{Expression} operands+=OrExpression? ("," operands+=OrExpression)*
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//operands+=OrExpression?
		public Assignment getOperandsAssignment_1() { return cOperandsAssignment_1; }

		//OrExpression
		public RuleCall getOperandsOrExpressionParserRuleCall_1_0() { return cOperandsOrExpressionParserRuleCall_1_0; }

		//("," operands+=OrExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//operands+=OrExpression
		public Assignment getOperandsAssignment_2_1() { return cOperandsAssignment_2_1; }

		//OrExpression
		public RuleCall getOperandsOrExpressionParserRuleCall_2_1_0() { return cOperandsOrExpressionParserRuleCall_2_1_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpFunctionNameParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionoperandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionoperandsFunctionOperandsParserRuleCall_2_0 = (RuleCall)cFunctionoperandsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall returns Expression:
		//	op=FunctionName "(" functionoperands=FunctionOperands ")";
		public ParserRule getRule() { return rule; }

		//op=FunctionName "(" functionoperands=FunctionOperands ")"
		public Group getGroup() { return cGroup; }

		//op=FunctionName
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//FunctionName
		public RuleCall getOpFunctionNameParserRuleCall_0_0() { return cOpFunctionNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//functionoperands=FunctionOperands
		public Assignment getFunctionoperandsAssignment_2() { return cFunctionoperandsAssignment_2; }

		//FunctionOperands
		public RuleCall getFunctionoperandsFunctionOperandsParserRuleCall_2_0() { return cFunctionoperandsFunctionOperandsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLiteralINTTerminalRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameExistsTmlExpressionParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameTmlExpressionParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cOpAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cOpLeftCurlyBracketKeyword_4_1_0 = (Keyword)cOpAssignment_4_1.eContents().get(0);
		private final Assignment cOperandsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperandsOrExpressionParserRuleCall_4_2_0 = (RuleCall)cOperandsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOperandsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cOperandsOrExpressionParserRuleCall_4_3_1_0 = (RuleCall)cOperandsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExpressionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cOpAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cOpNULLKeyword_5_1_0 = (Keyword)cOpAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExpressionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cOpAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cOpTODAYKeyword_6_1_0 = (Keyword)cOpAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExpressionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cOpAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cOpTRUEKeyword_7_1_0 = (Keyword)cOpAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExpressionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cOpAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cOpFALSEKeyword_8_1_0 = (Keyword)cOpAssignment_8_1.eContents().get(0);
		
		//Literal returns Expression:
		//	{Expression} literal=INT //  | {Expression} literalstring=LITERALSTRING
		//	//  | {Expression} op='FORALL' '(' literalstring=LITERALSTRING ',' operands+=OrExpression ')'
		//	// TODO Add float
		//	| FunctionCall | {Expression} name=ExistsTmlExpression | {Expression} name=TmlExpression | {Expression} op="{"
		//	operands+=OrExpression? ("," operands+=OrExpression)* "}" | {Expression} op="NULL" | {Expression} op="TODAY" |
		//	{Expression} op="TRUE" | {Expression} op="FALSE";
		public ParserRule getRule() { return rule; }

		//{Expression} literal=INT //  | {Expression} literalstring=LITERALSTRING
		////  | {Expression} op='FORALL' '(' literalstring=LITERALSTRING ',' operands+=OrExpression ')'
		//// TODO Add float
		//| FunctionCall | {Expression} name=ExistsTmlExpression | {Expression} name=TmlExpression | {Expression} op="{"
		//operands+=OrExpression? ("," operands+=OrExpression)* "}" | {Expression} op="NULL" | {Expression} op="TODAY" |
		//{Expression} op="TRUE" | {Expression} op="FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} literal=INT
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//literal=INT
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }

		//INT
		public RuleCall getLiteralINTTerminalRuleCall_0_1_0() { return cLiteralINTTerminalRuleCall_0_1_0; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }

		//{Expression} name=ExistsTmlExpression
		public Group getGroup_2() { return cGroup_2; }

		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }

		//name=ExistsTmlExpression
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ExistsTmlExpression
		public RuleCall getNameExistsTmlExpressionParserRuleCall_2_1_0() { return cNameExistsTmlExpressionParserRuleCall_2_1_0; }

		//{Expression} name=TmlExpression
		public Group getGroup_3() { return cGroup_3; }

		//{Expression}
		public Action getExpressionAction_3_0() { return cExpressionAction_3_0; }

		//name=TmlExpression
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//TmlExpression
		public RuleCall getNameTmlExpressionParserRuleCall_3_1_0() { return cNameTmlExpressionParserRuleCall_3_1_0; }

		//{Expression} op="{" operands+=OrExpression? ("," operands+=OrExpression)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//{Expression}
		public Action getExpressionAction_4_0() { return cExpressionAction_4_0; }

		//op="{"
		public Assignment getOpAssignment_4_1() { return cOpAssignment_4_1; }

		//"{"
		public Keyword getOpLeftCurlyBracketKeyword_4_1_0() { return cOpLeftCurlyBracketKeyword_4_1_0; }

		//operands+=OrExpression?
		public Assignment getOperandsAssignment_4_2() { return cOperandsAssignment_4_2; }

		//OrExpression
		public RuleCall getOperandsOrExpressionParserRuleCall_4_2_0() { return cOperandsOrExpressionParserRuleCall_4_2_0; }

		//("," operands+=OrExpression)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//operands+=OrExpression
		public Assignment getOperandsAssignment_4_3_1() { return cOperandsAssignment_4_3_1; }

		//OrExpression
		public RuleCall getOperandsOrExpressionParserRuleCall_4_3_1_0() { return cOperandsOrExpressionParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//{Expression} op="NULL"
		public Group getGroup_5() { return cGroup_5; }

		//{Expression}
		public Action getExpressionAction_5_0() { return cExpressionAction_5_0; }

		//op="NULL"
		public Assignment getOpAssignment_5_1() { return cOpAssignment_5_1; }

		//"NULL"
		public Keyword getOpNULLKeyword_5_1_0() { return cOpNULLKeyword_5_1_0; }

		//{Expression} op="TODAY"
		public Group getGroup_6() { return cGroup_6; }

		//{Expression}
		public Action getExpressionAction_6_0() { return cExpressionAction_6_0; }

		//op="TODAY"
		public Assignment getOpAssignment_6_1() { return cOpAssignment_6_1; }

		//"TODAY"
		public Keyword getOpTODAYKeyword_6_1_0() { return cOpTODAYKeyword_6_1_0; }

		//{Expression} op="TRUE"
		public Group getGroup_7() { return cGroup_7; }

		//{Expression}
		public Action getExpressionAction_7_0() { return cExpressionAction_7_0; }

		//op="TRUE"
		public Assignment getOpAssignment_7_1() { return cOpAssignment_7_1; }

		//"TRUE"
		public Keyword getOpTRUEKeyword_7_1_0() { return cOpTRUEKeyword_7_1_0; }

		//{Expression} op="FALSE"
		public Group getGroup_8() { return cGroup_8; }

		//{Expression}
		public Action getExpressionAction_8_0() { return cExpressionAction_8_0; }

		//op="FALSE"
		public Assignment getOpAssignment_8_1() { return cOpAssignment_8_1; }

		//"FALSE"
		public Keyword getOpFALSEKeyword_8_1_0() { return cOpFALSEKeyword_8_1_0; }
	}
	
	
	private ExpressionElements pExpression;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tATTRIBUTESTRING;
	private TerminalRule tANY_OTHER;
	private PathElementElements pPathElement;
	private PathSequenceElements pPathSequence;
	private TmlExpressionElements pTmlExpression;
	private ExistsTmlExpressionElements pExistsTmlExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private EqualityExpressionElements pEqualityExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private FunctionNameElements pFunctionName;
	private FunctionOperandsElements pFunctionOperands;
	private FunctionCallElements pFunctionCall;
	private LiteralElements pLiteral;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public NavajoExpressionGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Expression returns TopLevel:
	//	expression=OrExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ATTRIBUTESTRING:
	//	"\"" !"=" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getATTRIBUTESTRINGRule() {
		return (tATTRIBUTESTRING != null) ? tATTRIBUTESTRING : (tATTRIBUTESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTRIBUTESTRING"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	////terminal LITERALSTRING	: 
	////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	////	;
	//// skipped url, image, points, datepattern, password
	////terminal PATH_ELEMENT: ('.'|'..'|("a".. "z"| "A" .. "Z"|"_")("a".. "z"| "A" .. "Z"|"0" .. "9"|"_")*);
	//PathElement returns ecore::EString:
	//	ID | "." | "..";
	public PathElementElements getPathElementAccess() {
		return (pPathElement != null) ? pPathElement : (pPathElement = new PathElementElements());
	}
	
	public ParserRule getPathElementRule() {
		return getPathElementAccess().getRule();
	}

	//PathSequence returns ecore::EString:
	//	"[" "/"? PathElement ("/" PathElement)* "]";
	public PathSequenceElements getPathSequenceAccess() {
		return (pPathSequence != null) ? pPathSequence : (pPathSequence = new PathSequenceElements());
	}
	
	public ParserRule getPathSequenceRule() {
		return getPathSequenceAccess().getRule();
	}

	//TmlExpression returns ecore::EString:
	//	PathSequence;
	public TmlExpressionElements getTmlExpressionAccess() {
		return (pTmlExpression != null) ? pTmlExpression : (pTmlExpression = new TmlExpressionElements());
	}
	
	public ParserRule getTmlExpressionRule() {
		return getTmlExpressionAccess().getRule();
	}

	//ExistsTmlExpression returns ecore::EString:
	//	"?" TmlExpression;
	public ExistsTmlExpressionElements getExistsTmlExpressionAccess() {
		return (pExistsTmlExpression != null) ? pExistsTmlExpression : (pExistsTmlExpression = new ExistsTmlExpressionElements());
	}
	
	public ParserRule getExistsTmlExpressionRule() {
		return getExistsTmlExpressionAccess().getRule();
	}

	//OrExpression returns Expression:
	//	{Expression} operands+=AndExpression (op="OR" operands+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	{Expression} operands+=EqualityExpression (op="AND" operands+=EqualityExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualityExpression returns Expression:
	//	{Expression} operands+=AdditiveExpression (op="==" operands+=AdditiveExpression | op="!="
	//	operands+=AdditiveExpression)?;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return (pEqualityExpression != null) ? pEqualityExpression : (pEqualityExpression = new EqualityExpressionElements());
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}

	//// Skipped for now. Trouble with overloaded '<' stuff  
	////RelationalExpression returns Expression: 
	////   {Expression} operands+=AdditiveExpression ((op='&lt;' operands+=AdditiveExpression)|(op='&gt;' operands+=AdditiveExpression)|(op='&lt;=' operands+=AdditiveExpression)|(op='&gt;=' operands+=AdditiveExpression))?
	////    ;
	//AdditiveExpression returns Expression:
	//	{Expression} operands+=MultiplicativeExpression ("+" operands+=MultiplicativeExpression | "-"
	//	operands+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	{Expression} operands+=UnaryExpression (op="*" operands+=UnaryExpression | op="/" operands+=UnaryExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryExpression returns Expression:
	//	{Expression} op="!" operands+=PrimaryExpression | PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	{Expression} operands+=Literal | "(" OrExpression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//FunctionName returns ecore::EString:
	//	ID;
	public FunctionNameElements getFunctionNameAccess() {
		return (pFunctionName != null) ? pFunctionName : (pFunctionName = new FunctionNameElements());
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}

	//FunctionOperands returns Expression:
	//	{Expression} operands+=OrExpression? ("," operands+=OrExpression)*;
	public FunctionOperandsElements getFunctionOperandsAccess() {
		return (pFunctionOperands != null) ? pFunctionOperands : (pFunctionOperands = new FunctionOperandsElements());
	}
	
	public ParserRule getFunctionOperandsRule() {
		return getFunctionOperandsAccess().getRule();
	}

	//FunctionCall returns Expression:
	//	op=FunctionName "(" functionoperands=FunctionOperands ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Literal returns Expression:
	//	{Expression} literal=INT //  | {Expression} literalstring=LITERALSTRING
	//	//  | {Expression} op='FORALL' '(' literalstring=LITERALSTRING ',' operands+=OrExpression ')'
	//	// TODO Add float
	//	| FunctionCall | {Expression} name=ExistsTmlExpression | {Expression} name=TmlExpression | {Expression} op="{"
	//	operands+=OrExpression? ("," operands+=OrExpression)* "}" | {Expression} op="NULL" | {Expression} op="TODAY" |
	//	{Expression} op="TRUE" | {Expression} op="FALSE";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
}
