/*
* generated by Xtext
*/
grammar InternalNavajoExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dexels.navajo.dsl.expression.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dexels.navajo.dsl.expression.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

}

@parser::members {
 
 	private NavajoExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NavajoExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getExpressionAssignment()); }
(rule__Expression__ExpressionAssignment)
{ after(grammarAccess.getExpressionAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathElement
entryRulePathElement 
:
{ before(grammarAccess.getPathElementRule()); }
	 rulePathElement
{ after(grammarAccess.getPathElementRule()); } 
	 EOF 
;

// Rule PathElement
rulePathElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathElementAccess().getAlternatives()); }
(rule__PathElement__Alternatives)
{ after(grammarAccess.getPathElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathSequence
entryRulePathSequence 
:
{ before(grammarAccess.getPathSequenceRule()); }
	 rulePathSequence
{ after(grammarAccess.getPathSequenceRule()); } 
	 EOF 
;

// Rule PathSequence
rulePathSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathSequenceAccess().getGroup()); }
(rule__PathSequence__Group__0)
{ after(grammarAccess.getPathSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTmlExpression
entryRuleTmlExpression 
:
{ before(grammarAccess.getTmlExpressionRule()); }
	 ruleTmlExpression
{ after(grammarAccess.getTmlExpressionRule()); } 
	 EOF 
;

// Rule TmlExpression
ruleTmlExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTmlExpressionAccess().getPathSequenceParserRuleCall()); }
	rulePathSequence
{ after(grammarAccess.getTmlExpressionAccess().getPathSequenceParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsTmlExpression
entryRuleExistsTmlExpression 
:
{ before(grammarAccess.getExistsTmlExpressionRule()); }
	 ruleExistsTmlExpression
{ after(grammarAccess.getExistsTmlExpressionRule()); } 
	 EOF 
;

// Rule ExistsTmlExpression
ruleExistsTmlExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getGroup()); }
(rule__ExistsTmlExpression__Group__0)
{ after(grammarAccess.getExistsTmlExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionName
entryRuleFunctionName 
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionOperands
entryRuleFunctionOperands 
:
{ before(grammarAccess.getFunctionOperandsRule()); }
	 ruleFunctionOperands
{ after(grammarAccess.getFunctionOperandsRule()); } 
	 EOF 
;

// Rule FunctionOperands
ruleFunctionOperands
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionOperandsAccess().getGroup()); }
(rule__FunctionOperands__Group__0)
{ after(grammarAccess.getFunctionOperandsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PathElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPathElementAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getPathElementAccess().getFullStopKeyword_1()); }
)

    |(
{ before(grammarAccess.getPathElementAccess().getFullStopFullStopKeyword_2()); }

	'..' 

{ after(grammarAccess.getPathElementAccess().getFullStopFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_2_0()); }
(rule__EqualityExpression__Group_2_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_2_1()); }
(rule__EqualityExpression__Group_2_1__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_2_0()); }
(rule__AdditiveExpression__Group_2_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_2_1()); }
(rule__AdditiveExpression__Group_2_1__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0()); }
(rule__MultiplicativeExpression__Group_2_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_1()); }
(rule__MultiplicativeExpression__Group_2_1__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
(rule__PrimaryExpression__Group_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
(rule__Literal__Group_0__0)
{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFunctionCallParserRuleCall_1()); }
	ruleFunctionCall
{ after(grammarAccess.getLiteralAccess().getFunctionCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
(rule__Literal__Group_2__0)
{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_3()); }
(rule__Literal__Group_3__0)
{ after(grammarAccess.getLiteralAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_4()); }
(rule__Literal__Group_4__0)
{ after(grammarAccess.getLiteralAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_5()); }
(rule__Literal__Group_5__0)
{ after(grammarAccess.getLiteralAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_6()); }
(rule__Literal__Group_6__0)
{ after(grammarAccess.getLiteralAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_7()); }
(rule__Literal__Group_7__0)
{ after(grammarAccess.getLiteralAccess().getGroup_7()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_8()); }
(rule__Literal__Group_8__0)
{ after(grammarAccess.getLiteralAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PathSequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group__0__Impl
	rule__PathSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getPathSequenceAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathSequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group__1__Impl
	rule__PathSequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getSolidusKeyword_1()); }
(
	'/' 
)?
{ after(grammarAccess.getPathSequenceAccess().getSolidusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathSequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group__2__Impl
	rule__PathSequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_2()); }
	rulePathElement
{ after(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathSequence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group__3__Impl
	rule__PathSequence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getGroup_3()); }
(rule__PathSequence__Group_3__0)*
{ after(grammarAccess.getPathSequenceAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathSequence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getPathSequenceAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PathSequence__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group_3__0__Impl
	rule__PathSequence__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getSolidusKeyword_3_0()); }

	'/' 

{ after(grammarAccess.getPathSequenceAccess().getSolidusKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathSequence__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathSequence__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathSequence__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_3_1()); }
	rulePathElement
{ after(grammarAccess.getPathSequenceAccess().getPathElementParserRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExistsTmlExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__0__Impl
	rule__ExistsTmlExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getExistsTmlExpressionAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getTmlExpressionParserRuleCall_1()); }
	ruleTmlExpression
{ after(grammarAccess.getExistsTmlExpressionAccess().getTmlExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
	rule__OrExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAssignment_1()); }
(rule__OrExpression__OperandsAssignment_1)
{ after(grammarAccess.getOrExpressionAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_2()); }
(rule__OrExpression__Group_2__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_2__0__Impl
	rule__OrExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_2_0()); }
(rule__OrExpression__OpAssignment_2_0)
{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAssignment_2_1()); }
(rule__OrExpression__OperandsAssignment_2_1)
{ after(grammarAccess.getOrExpressionAccess().getOperandsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
	rule__AndExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsAssignment_1()); }
(rule__AndExpression__OperandsAssignment_1)
{ after(grammarAccess.getAndExpressionAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_2()); }
(rule__AndExpression__Group_2__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__0__Impl
	rule__AndExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_2_0()); }
(rule__AndExpression__OpAssignment_2_0)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsAssignment_2_1()); }
(rule__AndExpression__OperandsAssignment_2_1)
{ after(grammarAccess.getAndExpressionAccess().getOperandsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
	rule__EqualityExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_1()); }
(rule__EqualityExpression__OperandsAssignment_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_2()); }
(rule__EqualityExpression__Alternatives_2)?
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2_0__0__Impl
	rule__EqualityExpression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
(rule__EqualityExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_0_1()); }
(rule__EqualityExpression__OperandsAssignment_2_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2_1__0__Impl
	rule__EqualityExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_1_0()); }
(rule__EqualityExpression__OpAssignment_2_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_1_1()); }
(rule__EqualityExpression__OperandsAssignment_2_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
	rule__AdditiveExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_1()); }
(rule__AdditiveExpression__OperandsAssignment_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2()); }
(rule__AdditiveExpression__Alternatives_2)*
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2_0__0__Impl
	rule__AdditiveExpression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_2_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_0_1()); }
(rule__AdditiveExpression__OperandsAssignment_2_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2_1__0__Impl
	rule__AdditiveExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_2_1_0()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_1_1()); }
(rule__AdditiveExpression__OperandsAssignment_2_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
	rule__MultiplicativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_1()); }
(rule__MultiplicativeExpression__OperandsAssignment_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2()); }
(rule__MultiplicativeExpression__Alternatives_2)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_0__0__Impl
	rule__MultiplicativeExpression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
(rule__MultiplicativeExpression__OpAssignment_2_0_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_0_1()); }
(rule__MultiplicativeExpression__OperandsAssignment_2_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_1__0__Impl
	rule__MultiplicativeExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_1_0()); }
(rule__MultiplicativeExpression__OpAssignment_2_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_1_1()); }
(rule__MultiplicativeExpression__OperandsAssignment_2_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
(rule__UnaryExpression__OpAssignment_0_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandsAssignment_0_2()); }
(rule__UnaryExpression__OperandsAssignment_0_2)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandsAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOperandsAssignment_0_1()); }
(rule__PrimaryExpression__OperandsAssignment_0_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getOperandsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_1_1()); }
	ruleOrExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionOperands__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionOperands__Group__0__Impl
	rule__FunctionOperands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getFunctionOperandsAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionOperands__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionOperands__Group__1__Impl
	rule__FunctionOperands__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_1()); }
(rule__FunctionOperands__OperandsAssignment_1)?
{ after(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionOperands__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionOperands__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getGroup_2()); }
(rule__FunctionOperands__Group_2__0)*
{ after(grammarAccess.getFunctionOperandsAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionOperands__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionOperands__Group_2__0__Impl
	rule__FunctionOperands__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getFunctionOperandsAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionOperands__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionOperands__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_2_1()); }
(rule__FunctionOperands__OperandsAssignment_2_1)
{ after(grammarAccess.getFunctionOperandsAccess().getOperandsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getOpAssignment_0()); }
(rule__FunctionCall__OpAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionoperandsAssignment_2()); }
(rule__FunctionCall__FunctionoperandsAssignment_2)
{ after(grammarAccess.getFunctionCallAccess().getFunctionoperandsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Literal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getLiteralAssignment_0_1()); }
(rule__Literal__LiteralAssignment_0_1)
{ after(grammarAccess.getLiteralAccess().getLiteralAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameAssignment_2_1()); }
(rule__Literal__NameAssignment_2_1)
{ after(grammarAccess.getLiteralAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_3__0__Impl
	rule__Literal__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_3_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameAssignment_3_1()); }
(rule__Literal__NameAssignment_3_1)
{ after(grammarAccess.getLiteralAccess().getNameAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__0__Impl
	rule__Literal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_4_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__1__Impl
	rule__Literal__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpAssignment_4_1()); }
(rule__Literal__OpAssignment_4_1)
{ after(grammarAccess.getLiteralAccess().getOpAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__2__Impl
	rule__Literal__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperandsAssignment_4_2()); }
(rule__Literal__OperandsAssignment_4_2)?
{ after(grammarAccess.getLiteralAccess().getOperandsAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__3__Impl
	rule__Literal__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_4_3()); }
(rule__Literal__Group_4_3__0)*
{ after(grammarAccess.getLiteralAccess().getGroup_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_4()); }

	'}' 

{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Literal__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4_3__0__Impl
	rule__Literal__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getCommaKeyword_4_3_0()); }

	',' 

{ after(grammarAccess.getLiteralAccess().getCommaKeyword_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperandsAssignment_4_3_1()); }
(rule__Literal__OperandsAssignment_4_3_1)
{ after(grammarAccess.getLiteralAccess().getOperandsAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_5__0__Impl
	rule__Literal__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_5_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpAssignment_5_1()); }
(rule__Literal__OpAssignment_5_1)
{ after(grammarAccess.getLiteralAccess().getOpAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_6__0__Impl
	rule__Literal__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_6_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpAssignment_6_1()); }
(rule__Literal__OpAssignment_6_1)
{ after(grammarAccess.getLiteralAccess().getOpAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_7__0__Impl
	rule__Literal__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_7_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpAssignment_7_1()); }
(rule__Literal__OpAssignment_7_1)
{ after(grammarAccess.getLiteralAccess().getOpAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_8__0__Impl
	rule__Literal__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_8_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpAssignment_8_1()); }
(rule__Literal__OpAssignment_8_1)
{ after(grammarAccess.getLiteralAccess().getOpAssignment_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Expression__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionOrExpressionParserRuleCall_0()); }
	ruleOrExpression{ after(grammarAccess.getExpressionAccess().getExpressionOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0()); }

	'OR' 

{ after(grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOpORKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperandsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_2_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0()); }

	'AND' 

{ after(grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOpANDKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperandsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_2_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getOperandsEqualityExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0()); }
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0()); }
)

{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperandsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_0_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_1_0_0()); }
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_1_0_0()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_1_0_0()); }
)

{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperandsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getEqualityExpressionAccess().getOperandsAdditiveExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperandsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OperandsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getOperandsMultiplicativeExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_2_0_0_0()); }
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_2_0_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_2_0_0_0()); }
)

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperandsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_0_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_2_1_0_0()); }
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_2_1_0_0()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_2_1_0_0()); }
)

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperandsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperandsUnaryExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_1_0()); }
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_1_0()); }

	'!' 

{ after(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_1_0()); }
)

{ after(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandsAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandsPrimaryExpressionParserRuleCall_0_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getOperandsPrimaryExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__OperandsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOperandsLiteralParserRuleCall_0_1_0()); }
	ruleLiteral{ after(grammarAccess.getPrimaryExpressionAccess().getOperandsLiteralParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__OperandsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionOperands__OperandsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_2_1_0()); }
	ruleOrExpression{ after(grammarAccess.getFunctionOperandsAccess().getOperandsOrExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getOpFunctionNameParserRuleCall_0_0()); }
	ruleFunctionName{ after(grammarAccess.getFunctionCallAccess().getOpFunctionNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionoperandsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionoperandsFunctionOperandsParserRuleCall_2_0()); }
	ruleFunctionOperands{ after(grammarAccess.getFunctionCallAccess().getFunctionoperandsFunctionOperandsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__LiteralAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getLiteralINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getLiteralAccess().getLiteralINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameExistsTmlExpressionParserRuleCall_2_1_0()); }
	ruleExistsTmlExpression{ after(grammarAccess.getLiteralAccess().getNameExistsTmlExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__NameAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNameTmlExpressionParserRuleCall_3_1_0()); }
	ruleTmlExpression{ after(grammarAccess.getLiteralAccess().getNameTmlExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OpAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpLeftCurlyBracketKeyword_4_1_0()); }
(
{ before(grammarAccess.getLiteralAccess().getOpLeftCurlyBracketKeyword_4_1_0()); }

	'{' 

{ after(grammarAccess.getLiteralAccess().getOpLeftCurlyBracketKeyword_4_1_0()); }
)

{ after(grammarAccess.getLiteralAccess().getOpLeftCurlyBracketKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OperandsAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_2_0()); }
	ruleOrExpression{ after(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OperandsAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_3_1_0()); }
	ruleOrExpression{ after(grammarAccess.getLiteralAccess().getOperandsOrExpressionParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OpAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpNULLKeyword_5_1_0()); }
(
{ before(grammarAccess.getLiteralAccess().getOpNULLKeyword_5_1_0()); }

	'NULL' 

{ after(grammarAccess.getLiteralAccess().getOpNULLKeyword_5_1_0()); }
)

{ after(grammarAccess.getLiteralAccess().getOpNULLKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OpAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpTODAYKeyword_6_1_0()); }
(
{ before(grammarAccess.getLiteralAccess().getOpTODAYKeyword_6_1_0()); }

	'TODAY' 

{ after(grammarAccess.getLiteralAccess().getOpTODAYKeyword_6_1_0()); }
)

{ after(grammarAccess.getLiteralAccess().getOpTODAYKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OpAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpTRUEKeyword_7_1_0()); }
(
{ before(grammarAccess.getLiteralAccess().getOpTRUEKeyword_7_1_0()); }

	'TRUE' 

{ after(grammarAccess.getLiteralAccess().getOpTRUEKeyword_7_1_0()); }
)

{ after(grammarAccess.getLiteralAccess().getOpTRUEKeyword_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OpAssignment_8_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOpFALSEKeyword_8_1_0()); }
(
{ before(grammarAccess.getLiteralAccess().getOpFALSEKeyword_8_1_0()); }

	'FALSE' 

{ after(grammarAccess.getLiteralAccess().getOpFALSEKeyword_8_1_0()); }
)

{ after(grammarAccess.getLiteralAccess().getOpFALSEKeyword_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ATTRIBUTESTRING : '"' ~('=') ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ANY_OTHER : .;


