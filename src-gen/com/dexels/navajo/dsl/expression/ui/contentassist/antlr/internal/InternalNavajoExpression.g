/*
* generated by Xtext
*/
grammar InternalNavajoExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.dexels.navajo.dsl.expression.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.dexels.navajo.dsl.expression.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.dexels.navajo.dsl.expression.services.NavajoExpressionGrammarAccess;

}

@parser::members {
 
 	private NavajoExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NavajoExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTopLevel
entryRuleTopLevel 
:
{ before(grammarAccess.getTopLevelRule()); }
	 ruleTopLevel
{ after(grammarAccess.getTopLevelRule()); } 
	 EOF 
;

// Rule TopLevel
ruleTopLevel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTopLevelAccess().getToplevelExpressionAssignment()); }
(rule__TopLevel__ToplevelExpressionAssignment)
{ after(grammarAccess.getTopLevelAccess().getToplevelExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathElement
entryRulePathElement 
:
{ before(grammarAccess.getPathElementRule()); }
	 rulePathElement
{ after(grammarAccess.getPathElementRule()); } 
	 EOF 
;

// Rule PathElement
rulePathElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathElementAccess().getAlternatives()); }
(rule__PathElement__Alternatives)
{ after(grammarAccess.getPathElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTmlExpression
entryRuleTmlExpression 
:
{ before(grammarAccess.getTmlExpressionRule()); }
	 ruleTmlExpression
{ after(grammarAccess.getTmlExpressionRule()); } 
	 EOF 
;

// Rule TmlExpression
ruleTmlExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTmlExpressionAccess().getGroup()); }
(rule__TmlExpression__Group__0)
{ after(grammarAccess.getTmlExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExistsTmlExpression
entryRuleExistsTmlExpression 
:
{ before(grammarAccess.getExistsTmlExpressionRule()); }
	 ruleExistsTmlExpression
{ after(grammarAccess.getExistsTmlExpressionRule()); } 
	 EOF 
;

// Rule ExistsTmlExpression
ruleExistsTmlExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getGroup()); }
(rule__ExistsTmlExpression__Group__0)
{ after(grammarAccess.getExistsTmlExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapReferenceParams
entryRuleMapReferenceParams 
:
{ before(grammarAccess.getMapReferenceParamsRule()); }
	 ruleMapReferenceParams
{ after(grammarAccess.getMapReferenceParamsRule()); } 
	 EOF 
;

// Rule MapReferenceParams
ruleMapReferenceParams
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGroup()); }
(rule__MapReferenceParams__Group__0)
{ after(grammarAccess.getMapReferenceParamsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapGetReference
entryRuleMapGetReference 
:
{ before(grammarAccess.getMapGetReferenceRule()); }
	 ruleMapGetReference
{ after(grammarAccess.getMapGetReferenceRule()); } 
	 EOF 
;

// Rule MapGetReference
ruleMapGetReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapGetReferenceAccess().getGroup()); }
(rule__MapGetReference__Group__0)
{ after(grammarAccess.getMapGetReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionName
entryRuleFunctionName 
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getFunctionNameAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateLiteral
entryRuleDateLiteral 
:
{ before(grammarAccess.getDateLiteralRule()); }
	 ruleDateLiteral
{ after(grammarAccess.getDateLiteralRule()); } 
	 EOF 
;

// Rule DateLiteral
ruleDateLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateLiteralAccess().getGroup()); }
(rule__DateLiteral__Group__0)
{ after(grammarAccess.getDateLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PathElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getPathElementAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPathElementAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getPathElementAccess().getFullStopKeyword_1()); }
)

    |(
{ before(grammarAccess.getPathElementAccess().getPARENTTerminalRuleCall_2()); }
	RULE_PARENT
{ after(grammarAccess.getPathElementAccess().getPARENTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
(rule__EqualityExpression__Group_1_0__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1_1()); }
(rule__EqualityExpression__Group_1_1__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2_0()); }
(rule__RelationalExpression__Group_2_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2_1()); }
(rule__RelationalExpression__Group_2_1__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2_2()); }
(rule__RelationalExpression__Group_2_2__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_2_3()); }
(rule__RelationalExpression__Group_2_3__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_1()); }
(rule__AdditiveExpression__Group_1_1__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__MultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1()); }
(rule__MultiplicativeExpression__Group_1_1__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParametersAssignment_0()); }
(rule__PrimaryExpression__ParametersAssignment_0)
{ after(grammarAccess.getPrimaryExpressionAccess().getParametersAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
(rule__Literal__Group_0__0)
{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getValueStringAssignment_1()); }
(rule__Literal__ValueStringAssignment_1)
{ after(grammarAccess.getLiteralAccess().getValueStringAssignment_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
(rule__Literal__Group_2__0)
{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_3()); }
(rule__Literal__ParametersAssignment_3)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_4()); }
(rule__Literal__Group_4__0)
{ after(grammarAccess.getLiteralAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getElementsAssignment_5()); }
(rule__Literal__ElementsAssignment_5)
{ after(grammarAccess.getLiteralAccess().getElementsAssignment_5()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getElementsAssignment_6()); }
(rule__Literal__ElementsAssignment_6)
{ after(grammarAccess.getLiteralAccess().getElementsAssignment_6()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getElementsAssignment_7()); }
(rule__Literal__ElementsAssignment_7)
{ after(grammarAccess.getLiteralAccess().getElementsAssignment_7()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getElementsAssignment_8()); }
(rule__Literal__ElementsAssignment_8)
{ after(grammarAccess.getLiteralAccess().getElementsAssignment_8()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_9()); }
(rule__Literal__ParametersAssignment_9)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_9()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_10()); }
(rule__Literal__ParametersAssignment_10)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_10()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_11()); }
(rule__Literal__ParametersAssignment_11)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_11()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_12()); }
(rule__Literal__ParametersAssignment_12)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TmlExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__0__Impl
	rule__TmlExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_0()); }
	RULE_SQBRACKET_OPEN
{ after(grammarAccess.getTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__1__Impl
	rule__TmlExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getAbsoluteAssignment_1()); }
(rule__TmlExpression__AbsoluteAssignment_1)?
{ after(grammarAccess.getTmlExpressionAccess().getAbsoluteAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__2__Impl
	rule__TmlExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getParamAssignment_2()); }
(rule__TmlExpression__ParamAssignment_2)?
{ after(grammarAccess.getTmlExpressionAccess().getParamAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__3__Impl
	rule__TmlExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getElementsAssignment_3()); }
(rule__TmlExpression__ElementsAssignment_3)
{ after(grammarAccess.getTmlExpressionAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__4__Impl
	rule__TmlExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getGroup_4()); }
(rule__TmlExpression__Group_4__0)*
{ after(grammarAccess.getTmlExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_5()); }
	RULE_SQBRACKET_CLOSE
{ after(grammarAccess.getTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__TmlExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group_4__0__Impl
	rule__TmlExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_4_0()); }
	RULE_TML_SEPARATOR
{ after(grammarAccess.getTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TmlExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TmlExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getElementsAssignment_4_1()); }
(rule__TmlExpression__ElementsAssignment_4_1)
{ after(grammarAccess.getTmlExpressionAccess().getElementsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExistsTmlExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__0__Impl
	rule__ExistsTmlExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getTML_EXISTSTerminalRuleCall_0()); }
	RULE_TML_EXISTS
{ after(grammarAccess.getExistsTmlExpressionAccess().getTML_EXISTSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__1__Impl
	rule__ExistsTmlExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_1()); }
	RULE_SQBRACKET_OPEN
{ after(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_OPENTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__2__Impl
	rule__ExistsTmlExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getAbsoluteAssignment_2()); }
(rule__ExistsTmlExpression__AbsoluteAssignment_2)?
{ after(grammarAccess.getExistsTmlExpressionAccess().getAbsoluteAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__3__Impl
	rule__ExistsTmlExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getParamAssignment_3()); }
(rule__ExistsTmlExpression__ParamAssignment_3)?
{ after(grammarAccess.getExistsTmlExpressionAccess().getParamAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__4__Impl
	rule__ExistsTmlExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getElementsAssignment_4()); }
(rule__ExistsTmlExpression__ElementsAssignment_4)
{ after(grammarAccess.getExistsTmlExpressionAccess().getElementsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__5__Impl
	rule__ExistsTmlExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getGroup_5()); }
(rule__ExistsTmlExpression__Group_5__0)*
{ after(grammarAccess.getExistsTmlExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_6()); }
	RULE_SQBRACKET_CLOSE
{ after(grammarAccess.getExistsTmlExpressionAccess().getSQBRACKET_CLOSETerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ExistsTmlExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group_5__0__Impl
	rule__ExistsTmlExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_5_0()); }
	RULE_TML_SEPARATOR
{ after(grammarAccess.getExistsTmlExpressionAccess().getTML_SEPARATORTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExistsTmlExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExistsTmlExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getElementsAssignment_5_1()); }
(rule__ExistsTmlExpression__ElementsAssignment_5_1)
{ after(grammarAccess.getExistsTmlExpressionAccess().getElementsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapReferenceParams__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group__0__Impl
	rule__MapReferenceParams__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getMapReferenceParamsAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapReferenceParams__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group__1__Impl
	rule__MapReferenceParams__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGetterParamsAssignment_1()); }
(rule__MapReferenceParams__GetterParamsAssignment_1)
{ after(grammarAccess.getMapReferenceParamsAccess().getGetterParamsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapReferenceParams__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group__2__Impl
	rule__MapReferenceParams__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGroup_2()); }
(rule__MapReferenceParams__Group_2__0)*
{ after(grammarAccess.getMapReferenceParamsAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapReferenceParams__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMapReferenceParamsAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapReferenceParams__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group_2__0__Impl
	rule__MapReferenceParams__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getMapReferenceParamsAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapReferenceParams__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapReferenceParams__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGetterParamsAssignment_2_1()); }
(rule__MapReferenceParams__GetterParamsAssignment_2_1)
{ after(grammarAccess.getMapReferenceParamsAccess().getGetterParamsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapGetReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group__0__Impl
	rule__MapGetReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getOperationsAssignment_0()); }
(rule__MapGetReference__OperationsAssignment_0)
{ after(grammarAccess.getMapGetReferenceAccess().getOperationsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapGetReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group__1__Impl
	rule__MapGetReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getGroup_1()); }
(rule__MapGetReference__Group_1__0)*
{ after(grammarAccess.getMapGetReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapGetReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group__2__Impl
	rule__MapGetReference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getElementsAssignment_2()); }
(rule__MapGetReference__ElementsAssignment_2)
{ after(grammarAccess.getMapGetReferenceAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapGetReference__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getReferenceParamsAssignment_3()); }
(rule__MapGetReference__ReferenceParamsAssignment_3)?
{ after(grammarAccess.getMapGetReferenceAccess().getReferenceParamsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapGetReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group_1__0__Impl
	rule__MapGetReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getElementsAssignment_1_0()); }
(rule__MapGetReference__ElementsAssignment_1_0)
{ after(grammarAccess.getMapGetReferenceAccess().getElementsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapGetReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapGetReference__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getTML_SEPARATORTerminalRuleCall_1_1()); }
	RULE_TML_SEPARATOR
{ after(grammarAccess.getMapGetReferenceAccess().getTML_SEPARATORTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getParametersAssignment_0()); }
(rule__OrExpression__ParametersAssignment_0)
{ after(grammarAccess.getOrExpressionAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperationsAssignment_1_0()); }
(rule__OrExpression__OperationsAssignment_1_0)
{ after(grammarAccess.getOrExpressionAccess().getOperationsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getParametersAssignment_1_1()); }
(rule__OrExpression__ParametersAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getParametersAssignment_0()); }
(rule__AndExpression__ParametersAssignment_0)
{ after(grammarAccess.getAndExpressionAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperationsAssignment_1_0()); }
(rule__AndExpression__OperationsAssignment_1_0)
{ after(grammarAccess.getAndExpressionAccess().getOperationsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getParametersAssignment_1_1()); }
(rule__AndExpression__ParametersAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_0()); }
(rule__EqualityExpression__ParametersAssignment_0)
{ after(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getAlternatives_1()); }
(rule__EqualityExpression__Alternatives_1)?
{ after(grammarAccess.getEqualityExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0__0__Impl
	rule__EqualityExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsAssignment_1_0_0()); }
(rule__EqualityExpression__OperationsAssignment_1_0_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOperationsAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_1_0_1()); }
(rule__EqualityExpression__ParametersAssignment_1_0_1)
{ after(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_1__0__Impl
	rule__EqualityExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsAssignment_1_1_0()); }
(rule__EqualityExpression__OperationsAssignment_1_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOperationsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_1_1_1()); }
(rule__EqualityExpression__ParametersAssignment_1_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
	rule__RelationalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_1()); }
(rule__RelationalExpression__ParametersAssignment_1)
{ after(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAlternatives_2()); }
(rule__RelationalExpression__Alternatives_2)?
{ after(grammarAccess.getRelationalExpressionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_0__0__Impl
	rule__RelationalExpression__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_0_0()); }
(rule__RelationalExpression__OperationsAssignment_2_0_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_0_1()); }
(rule__RelationalExpression__ParametersAssignment_2_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_1__0__Impl
	rule__RelationalExpression__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_1_0()); }
(rule__RelationalExpression__OperationsAssignment_2_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_1_1()); }
(rule__RelationalExpression__ParametersAssignment_2_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_2__0__Impl
	rule__RelationalExpression__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_2_0()); }
(rule__RelationalExpression__OperationsAssignment_2_2_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_2_1()); }
(rule__RelationalExpression__ParametersAssignment_2_2_1)
{ after(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_3__0__Impl
	rule__RelationalExpression__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_3_0()); }
(rule__RelationalExpression__OperationsAssignment_2_3_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperationsAssignment_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_3_1()); }
(rule__RelationalExpression__ParametersAssignment_2_3_1)
{ after(grammarAccess.getRelationalExpressionAccess().getParametersAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_0()); }
(rule__AdditiveExpression__ParametersAssignment_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1()); }
(rule__AdditiveExpression__Alternatives_1)*
{ after(grammarAccess.getAdditiveExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__0__Impl
	rule__AdditiveExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getPlusSignKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_1_0_1()); }
(rule__AdditiveExpression__ParametersAssignment_1_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_1__0__Impl
	rule__AdditiveExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_0()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getHyphenMinusKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_1_1_1()); }
(rule__AdditiveExpression__ParametersAssignment_1_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_0()); }
(rule__MultiplicativeExpression__ParametersAssignment_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1()); }
(rule__MultiplicativeExpression__Alternatives_1)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAssignment_1_0_0()); }
(rule__MultiplicativeExpression__OperationsAssignment_1_0_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_1_0_1()); }
(rule__MultiplicativeExpression__ParametersAssignment_1_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1__0__Impl
	rule__MultiplicativeExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAssignment_1_1_0()); }
(rule__MultiplicativeExpression__OperationsAssignment_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_1_1_1()); }
(rule__MultiplicativeExpression__ParametersAssignment_1_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperationsAssignment_0_0()); }
(rule__UnaryExpression__OperationsAssignment_0_0)
{ after(grammarAccess.getUnaryExpressionAccess().getOperationsAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getParametersAssignment_0_1()); }
(rule__UnaryExpression__ParametersAssignment_0_1)
{ after(grammarAccess.getUnaryExpressionAccess().getParametersAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
	rule__PrimaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParametersAssignment_1_1()); }
(rule__PrimaryExpression__ParametersAssignment_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
(rule__FunctionCall__NameAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2()); }
(rule__FunctionCall__ParametersAssignment_2)?
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
(rule__FunctionCall__Group_3__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_1()); }
(rule__FunctionCall__ParametersAssignment_3_1)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DateLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__0__Impl
	rule__DateLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getExpressionAction_0()); }
(

)
{ after(grammarAccess.getDateLiteralAccess().getExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__1__Impl
	rule__DateLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_1()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__2__Impl
	rule__DateLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_2()); }

	'#' 

{ after(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__3__Impl
	rule__DateLiteral__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_3()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__4__Impl
	rule__DateLiteral__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_4()); }

	'#' 

{ after(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__5__Impl
	rule__DateLiteral__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_5()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__6__Impl
	rule__DateLiteral__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_6()); }

	'#' 

{ after(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__7__Impl
	rule__DateLiteral__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_7()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__8__Impl
	rule__DateLiteral__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_8()); }

	'#' 

{ after(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__9__Impl
	rule__DateLiteral__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_9()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__10__Impl
	rule__DateLiteral__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_10()); }

	'#' 

{ after(grammarAccess.getDateLiteralAccess().getNumberSignKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DateLiteral__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DateLiteral__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DateLiteral__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_11()); }
	RULE_NUMBER
{ after(grammarAccess.getDateLiteralAccess().getNUMBERTerminalRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__Literal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0_1()); }
	RULE_NUMBER
{ after(grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperationsAssignment_2_0()); }
(rule__Literal__OperationsAssignment_2_0)
{ after(grammarAccess.getLiteralAccess().getOperationsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__1__Impl
	rule__Literal__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getLiteralAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__2__Impl
	rule__Literal__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueStringAssignment_2_2()); }
(rule__Literal__ValueStringAssignment_2_2)
{ after(grammarAccess.getLiteralAccess().getValueStringAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__3__Impl
	rule__Literal__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getCommaKeyword_2_3()); }

	',' 

{ after(grammarAccess.getLiteralAccess().getCommaKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__4__Impl
	rule__Literal__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_2_4()); }
(rule__Literal__ParametersAssignment_2_4)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getRightParenthesisKeyword_2_5()); }

	')' 

{ after(grammarAccess.getLiteralAccess().getRightParenthesisKeyword_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Literal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__0__Impl
	rule__Literal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionTypeAssignment_4_0()); }
(rule__Literal__ExpressionTypeAssignment_4_0)
{ after(grammarAccess.getLiteralAccess().getExpressionTypeAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__1__Impl
	rule__Literal__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_4_1()); }
(rule__Literal__ParametersAssignment_4_1)?
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__2__Impl
	rule__Literal__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_4_2()); }
(rule__Literal__Group_4_2__0)*
{ after(grammarAccess.getLiteralAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_3()); }

	'}' 

{ after(grammarAccess.getLiteralAccess().getRightCurlyBracketKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Literal__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4_2__0__Impl
	rule__Literal__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getCommaKeyword_4_2_0()); }

	',' 

{ after(grammarAccess.getLiteralAccess().getCommaKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersAssignment_4_2_1()); }
(rule__Literal__ParametersAssignment_4_2_1)
{ after(grammarAccess.getLiteralAccess().getParametersAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TopLevel__ToplevelExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTopLevelAccess().getToplevelExpressionOrExpressionParserRuleCall_0()); }
	ruleOrExpression{ after(grammarAccess.getTopLevelAccess().getToplevelExpressionOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__AbsoluteAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_1_0()); }
	RULE_TML_SEPARATOR{ after(grammarAccess.getTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__ParamAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getParamATTerminalRuleCall_2_0()); }
	RULE_AT{ after(grammarAccess.getTmlExpressionAccess().getParamATTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_3_0()); }
	rulePathElement{ after(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TmlExpression__ElementsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_4_1_0()); }
	rulePathElement{ after(grammarAccess.getTmlExpressionAccess().getElementsPathElementParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__AbsoluteAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_2_0()); }
	RULE_TML_SEPARATOR{ after(grammarAccess.getExistsTmlExpressionAccess().getAbsoluteTML_SEPARATORTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__ParamAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getParamATTerminalRuleCall_3_0()); }
	RULE_AT{ after(grammarAccess.getExistsTmlExpressionAccess().getParamATTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__ElementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_4_0()); }
	rulePathElement{ after(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExistsTmlExpression__ElementsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_5_1_0()); }
	rulePathElement{ after(grammarAccess.getExistsTmlExpressionAccess().getElementsPathElementParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__GetterParamsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapReferenceParams__GetterParamsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_2_1_0()); }
	ruleLiteral{ after(grammarAccess.getMapReferenceParamsAccess().getGetterParamsLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__OperationsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getOperationsDOLLARTerminalRuleCall_0_0()); }
	RULE_DOLLAR{ after(grammarAccess.getMapGetReferenceAccess().getOperationsDOLLARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getElementsPARENTTerminalRuleCall_1_0_0()); }
	RULE_PARENT{ after(grammarAccess.getMapGetReferenceAccess().getElementsPARENTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getElementsIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getMapGetReferenceAccess().getElementsIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapGetReference__ReferenceParamsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapGetReferenceAccess().getReferenceParamsMapReferenceParamsParserRuleCall_3_0()); }
	ruleMapReferenceParams{ after(grammarAccess.getMapGetReferenceAccess().getReferenceParamsMapReferenceParamsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_0_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperationsORKeyword_1_0_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOperationsORKeyword_1_0_0()); }

	'OR' 

{ after(grammarAccess.getOrExpressionAccess().getOperationsORKeyword_1_0_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOperationsORKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getParametersAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_0_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperationsANDKeyword_1_0_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOperationsANDKeyword_1_0_0()); }

	'AND' 

{ after(grammarAccess.getAndExpressionAccess().getOperationsANDKeyword_1_0_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOperationsANDKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_1_1_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getParametersEqualityExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_0_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperationsAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsEqualsSignEqualsSignKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsEqualsSignEqualsSignKeyword_1_0_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOperationsEqualsSignEqualsSignKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getEqualityExpressionAccess().getOperationsEqualsSignEqualsSignKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ParametersAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_0_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OperationsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0()); }
(
{ before(grammarAccess.getEqualityExpressionAccess().getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0()); }
)

{ after(grammarAccess.getEqualityExpressionAccess().getOperationsExclamationMarkEqualsSignKeyword_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_1_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getParametersRelationalExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ParametersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperationsAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTTerminalRuleCall_2_0_0_0()); }
	RULE_XML_LT{ after(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTTerminalRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ParametersAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_0_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperationsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTTerminalRuleCall_2_1_0_0()); }
	RULE_XML_GT{ after(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTTerminalRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ParametersAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_1_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperationsAssignment_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTEQTerminalRuleCall_2_2_0_0()); }
	RULE_XML_LTEQ{ after(grammarAccess.getRelationalExpressionAccess().getOperationsXML_LTEQTerminalRuleCall_2_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ParametersAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_2_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperationsAssignment_2_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTEQTerminalRuleCall_2_3_0_0()); }
	RULE_XML_GTEQ{ after(grammarAccess.getRelationalExpressionAccess().getOperationsXML_GTEQTerminalRuleCall_2_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__ParametersAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_3_1_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getParametersAdditiveExpressionParserRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_0_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ParametersAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_0_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getParametersMultiplicativeExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperationsAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAsteriskKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAsteriskKeyword_1_0_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAsteriskKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationsAsteriskKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ParametersAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_0_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OperationsAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0()); }
	RULE_TML_SEPARATOR{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationsTML_SEPARATORTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_1_1_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getParametersUnaryExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperationsAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperationsExclamationMarkKeyword_0_0_0()); }
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperationsExclamationMarkKeyword_0_0_0()); }

	'!' 

{ after(grammarAccess.getUnaryExpressionAccess().getOperationsExclamationMarkKeyword_0_0_0()); }
)

{ after(grammarAccess.getUnaryExpressionAccess().getOperationsExclamationMarkKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ParametersAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getParametersPrimaryExpressionParserRuleCall_0_1_0()); }
	rulePrimaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getParametersPrimaryExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ParametersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParametersLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getPrimaryExpressionAccess().getParametersLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParametersOrExpressionParserRuleCall_1_1_0()); }
	ruleOrExpression{ after(grammarAccess.getPrimaryExpressionAccess().getParametersOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameFunctionNameParserRuleCall_0_0()); }
	ruleFunctionName{ after(grammarAccess.getFunctionCallAccess().getNameFunctionNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_2_0()); }
	ruleOrExpression{ after(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_3_1_0()); }
	ruleOrExpression{ after(grammarAccess.getFunctionCallAccess().getParametersOrExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueStringAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_1_0()); }
	RULE_LITERALSTRING{ after(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__OperationsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getOperationsFORALLTerminalRuleCall_2_0_0()); }
	RULE_FORALL{ after(grammarAccess.getLiteralAccess().getOperationsFORALLTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueStringAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_2_2_0()); }
	RULE_LITERALSTRING{ after(grammarAccess.getLiteralAccess().getValueStringLITERALSTRINGTerminalRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_2_4_0()); }
	ruleOrExpression{ after(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersFunctionCallParserRuleCall_3_0()); }
	ruleFunctionCall{ after(grammarAccess.getLiteralAccess().getParametersFunctionCallParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ExpressionTypeAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getExpressionTypeLeftCurlyBracketKeyword_4_0_0()); }
(
{ before(grammarAccess.getLiteralAccess().getExpressionTypeLeftCurlyBracketKeyword_4_0_0()); }

	'{' 

{ after(grammarAccess.getLiteralAccess().getExpressionTypeLeftCurlyBracketKeyword_4_0_0()); }
)

{ after(grammarAccess.getLiteralAccess().getExpressionTypeLeftCurlyBracketKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_1_0()); }
	ruleOrExpression{ after(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_2_1_0()); }
	ruleOrExpression{ after(grammarAccess.getLiteralAccess().getParametersOrExpressionParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ElementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getElementsNULLTerminalRuleCall_5_0()); }
	RULE_NULL{ after(grammarAccess.getLiteralAccess().getElementsNULLTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ElementsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getElementsTODAYTerminalRuleCall_6_0()); }
	RULE_TODAY{ after(grammarAccess.getLiteralAccess().getElementsTODAYTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ElementsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getElementsTRUETerminalRuleCall_7_0()); }
	RULE_TRUE{ after(grammarAccess.getLiteralAccess().getElementsTRUETerminalRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ElementsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getElementsFALSETerminalRuleCall_8_0()); }
	RULE_FALSE{ after(grammarAccess.getLiteralAccess().getElementsFALSETerminalRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersTmlExpressionParserRuleCall_9_0()); }
	ruleTmlExpression{ after(grammarAccess.getLiteralAccess().getParametersTmlExpressionParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_10
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersExistsTmlExpressionParserRuleCall_10_0()); }
	ruleExistsTmlExpression{ after(grammarAccess.getLiteralAccess().getParametersExistsTmlExpressionParserRuleCall_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_11
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersMapGetReferenceParserRuleCall_11_0()); }
	ruleMapGetReference{ after(grammarAccess.getLiteralAccess().getParametersMapGetReferenceParserRuleCall_11_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ParametersAssignment_12
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getParametersDateLiteralParserRuleCall_12_0()); }
	ruleDateLiteral{ after(grammarAccess.getLiteralAccess().getParametersDateLiteralParserRuleCall_12_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_XML_GT : '&gt;';

RULE_XML_LT : '&lt;';

RULE_XML_GTEQ : '&gt;=';

RULE_XML_LTEQ : '&lt;=';

RULE_NUMBER : ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_TRUE : ('true'|'TRUE');

RULE_FALSE : ('false'|'FALSE');

RULE_NULL : ('null'|'NULL');

RULE_TODAY : ('today'|'TODAY');

RULE_FORALL : 'FORALL';

RULE_PARENT : '..';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_AT : '@';

RULE_LITERALSTRING : ('\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\''|'<![CDATA[' ( options {greedy=false;} : . )*']]>');

RULE_SQBRACKET_OPEN : '[';

RULE_SQBRACKET_CLOSE : ']';

RULE_TML_SEPARATOR : '/';

RULE_TML_EXISTS : '?';

RULE_DOLLAR : '$';


