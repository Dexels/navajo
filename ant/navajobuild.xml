<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Id$ -->
<project default="archive" basedir=".">
	<property name="src" value="src" />
	<property name="testsrc" value="testsrc" />
	<property name="build" value="classes" />
	<property name="testbase" value="test" />
	<property name="testbuild" value="test/classes" />
	<property name="testreports" value="test/reports" />
	<property name="dist" value="dist"/>
	<property name="lib" value="lib" />
	<property name="compilelib" value="compilelib" />
	<property name="javadoc" value="${dist}/docs" />
	<property name="dependencybase" value="${dist}/dependency" />
	<property name="dependencyclasses" value="${dependencybase}/classes" />
	<property name="dependencysrc" value="${dependencybase}/src" />
	<property name="dependencylib" value="${dependencybase}/lib" />
	<property name="dependencycompilelib" value="${dependencybase}/compilelib" />
	<property name="archive" value="${ant.project.name}.jar" />
	<property name="junitjar" value="../DexelsVersionControl/compilelib/junit.jar" />

<!--	<taskdef name="antclipse" classname="net.sf.antcontrib.antclipse.ClassPathTask"/>
-->	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" onerror="ignore" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<fail message="This file is only supposed to be imported, not invoked standalone. Also, make sure your invoking file has a project name!" unless="ant.project.name"/>

	<path id="depend">
	   <fileset dir="${lib}">
	      <include name="**/*.jar"/>
 	   </fileset>
	   <fileset dir="${compilelib}" >
	      <include name="**/*.jar"/>
 	   </fileset>
	</path>

	<target name="init">
		<tstamp />
		<antcall target="clean"/>
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${dependencybase}" />
		<mkdir dir="${dependencyclasses}" />
		<mkdir dir="${dependencylib}" />
		<mkdir dir="${dependencycompilelib}" />
		
		<mkdir dir="${javadoc}"/>
		<if>
			<not>
				<available file="lib"></available>
			</not>
			<then>
				<mkdir dir="lib"/>
			</then>
		</if>
		<if>
			<not>
				<available file="compilelib"></available>
			</not>
			<then>
				<mkdir dir="compilelib"/>
			</then>
		</if>
	</target>
	<target name="clean" if="clean">
		<delete dir="${build}" />
		<delete dir="${testbase}" />
		<delete dir="${dist}" />
	</target>
	<target name="precompile">
	</target>

	<target name="recursiveBuild" >
		
		<if>
			<and>
				<isset property="dependencies"/>
				<equals arg1="${recursivebuild}" arg2="true" />
			</and>
			<then>
				<echo message="Calling build on: ${currentdep}"/>
				<ant dir="../${currentdep}" antfile="build.xml" inheritall="false">
				</ant>
			</then>
			<else>
				<echo message="Skipping build on: ${currentdep}"/>
			</else>
		</if>
	</target>
	
	<target name="resolveDependency">
		<antcall target="recursiveBuild">
		</antcall>
		<echo message="Current dependency: ${currentdep}" />
		<copy todir="${dependencyclasses}" failonerror="false">
			<fileset dir="../${currentdep}/classes" />
		</copy>
		<copy todir="${dependencycompilelib}" failonerror="false">
			<fileset dir="../${currentdep}/compilelib" />
		</copy>
		
		<copy todir="${dependencylib}" failonerror="false" >
			<fileset dir="../${currentdep}/lib" />
		</copy>
	</target>

	<target name="resolveDependencies">
		<for list="${dependencies}" delimiter="," param="currentdep">
			<sequential>
				<ant target="resolveDependency" antfile="../DexelsVersionControl/ant/navajobuild.xml" >
					<property name="currentdep" value="@{currentdep}" />
				</ant>
			</sequential>
		</for>
	</target>
	
	
	<target name="compile" depends="init,resolveDependencies, precompile,resource">
		<javac srcdir="${src}" destdir="${build}">
			<classpath refid="depend" />
			<classpath path="${dependencyclasses}"/>
		</javac>
	</target>

	<target name="buildjavadoc" if="buildJavadoc">
		<javadoc verbose="false" destdir="docs/api" author="true"  version="true" use="true"  windowtitle="Navajo API docs">

		    <fileset dir="${src}" defaultexcludes="yes">
		    </fileset>

		    <doctitle><![CDATA[<h1>Navajo Framework</h1>]]></doctitle>
		    <bottom><![CDATA[<i>Copyright &#169; 2009 Dexels BV. All Rights Reserved.</i>]]></bottom>
		    <tag name="todo" scope="all" description="To do:"/>
		    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
		    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
		    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
		    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
		  </javadoc>
	</target>
	<target name="compiletest">
		<mkdir dir="${testbase}"/>
		<mkdir dir="${testbuild}"/>
		<mkdir dir="${testreports}"/>
		<javac srcdir="${testsrc}" destdir="${testbuild}">
			<classpath refid="depend" />
			<classpath path="${build}"/>
			<classpath path="${dependencyclasses}"/>

		</javac>
	</target>
	
	<target name="resource">
		<copy todir="${build}">
			<fileset dir="${src}">
				<exclude name="**/*.java" />
				<exclude name="CVS" />
			</fileset>
		</copy>
	</target>

	<path id="test.class.path">
		<pathelement path="${testbuild}"/>
	</path>

	<target name="testgeneral" description="Run the JUnit tests" if="testfound">
		<antcall target="compiletest"/>
		<echo message="Testing project: ${ant.project.name}"/>
		<junit showoutput="true" printsummary="yes" haltonfailure="no" >
			<classpath refid="test.class.path" />
			<classpath path="${junitjar}"></classpath>
			<classpath refid="depend" />
			<classpath path="${build}"/>
			<classpath path="${dependencyclasses}"/>
			<formatter type="plain" />
			<test name="NavajoTestSuite" outfile="result" todir="./${testreports}"/>
		</junit>
	</target>
	<target name="test" description="Run the JUnit tests">
		<condition property="testfound">
			<and>
				<available file="testsrc"></available>
				<not>
					<isset property="notests"/>
				</not>
			</and>
		</condition>
		<antcall target="testgeneral" inheritrefs="true"/>
	</target>
	<!-- <target name="nano" depends="compile">
	    <jar jarfile="${nano.archive}">
	      <fileset dir="${build}">
	        <include name="${document.base}/nanoimpl/**/*.class"/>
	     </fileset>
	      <fileset dir="${build}">
	        <include name="navajodocument/*.class"/>
	      </fileset>
	      <fileset dir="${DexelsVersionControl.build}"/>
	    </jar>
	  </target>-->
	<target name="archive" depends="compile,resource,test,buildjavadoc">
		<jar jarfile="${archive}">
			<fileset dir="${build}">
				<include name="*/**" />
			</fileset>
		</jar>
		<antcall target="cleanup"></antcall>
	</target>
	
	<target name="cleanup" if="cleanupdependencies">
		<delete dir="${dependencybase}"> </delete>
	</target>
	
	<target name="onlyarchive" depends="resource">
		<jar jarfile="${archive}">
			<fileset dir="${build}">
				<include name="*/**" />
			</fileset>
		</jar>
	</target>
</project>
<!-- EOF: $RCSfile$ -->
