# (Be in -*- mode: python; coding: utf-8 -*- mode.)
#
# ====================================================================
# Copyright (c) 2006-2008 CollabNet.  All rights reserved.
#
# This software is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at http://subversion.tigris.org/license-1.html.
# If newer versions of this license are posted there, you may use a
# newer version instead, at your option.
#
# This software consists of voluntary contributions made by many
# individuals.  For exact contribution history, see the revision
# history and logs, available at http://cvs2svn.tigris.org/.
# ====================================================================

#                  #####################
#                  ## PLEASE READ ME! ##
#                  #####################
#
# This is a template for an options file that can be used to configure
# cvs2svn.  Many options do not have defaults, so it is easier to copy
# this file and modify what you need rather than creating a new
# options file from scratch.
#
# This file is in Python syntax, but you don't need to know Python to
# modify it.  But if you *do* know Python, then you will be happy to
# know that you can use arbitary Python constructs to do fancy
# configuration tricks.
#
# But please be aware of the following:
#
# * In many places, leading whitespace is significant in Python (it is
#   used instead of curly braces to group statements together).
#   Therefore, if you don't know what you are doing, it is best to
#   leave the whitespace as it is.
#
# * In normal strings, Python treats a backslash ("\") as an escape
#   character.  Therefore, if you want to specify a string that
#   contains a backslash, you need either to escape the backslash with
#   another backslash ("\\"), or use a "raw string", as in one if the
#   following equivalent examples:
#
#       ctx.sort_executable = 'c:\\windows\\system32\\sort.exe'
#       ctx.sort_executable = r'c:\windows\system32\sort.exe'
#
#   See http://docs.python.org/tutorial/introduction.html#strings for
#   more information.
#
# Two identifiers will have been defined before this file is executed,
# and can be used freely within this file:
#
#     ctx -- a Ctx object (see cvs2svn_lib/context.py), which holds
#         many configuration options
#
#     run_options -- an instance of the SVNRunOptions class (see
#         cvs2svn_lib/svn_run_options.py), which holds some variables
#         governing how cvs2svn is run


# Import some modules that are used in setting the options:
import re

from cvs2svn_lib import config
from cvs2svn_lib import changeset_database
from cvs2svn_lib.common import CVSTextDecoder
from cvs2svn_lib.log import Log
from cvs2svn_lib.project import Project
from cvs2svn_lib.svn_output_option import DumpfileOutputOption
from cvs2svn_lib.svn_output_option import ExistingRepositoryOutputOption
from cvs2svn_lib.svn_output_option import NewRepositoryOutputOption
from cvs2svn_lib.revision_manager import NullRevisionRecorder
from cvs2svn_lib.revision_manager import NullRevisionExcluder
from cvs2svn_lib.rcs_revision_manager import RCSRevisionReader
from cvs2svn_lib.cvs_revision_manager import CVSRevisionReader
from cvs2svn_lib.checkout_internal import InternalRevisionRecorder
from cvs2svn_lib.checkout_internal import InternalRevisionExcluder
from cvs2svn_lib.checkout_internal import InternalRevisionReader
from cvs2svn_lib.symbol_strategy import AllBranchRule
from cvs2svn_lib.symbol_strategy import AllTagRule
from cvs2svn_lib.symbol_strategy import BranchIfCommitsRule
from cvs2svn_lib.symbol_strategy import ExcludeRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceBranchRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ForceTagRegexpStrategyRule
from cvs2svn_lib.symbol_strategy import ExcludeTrivialImportBranchRule
from cvs2svn_lib.symbol_strategy import ExcludeVendorBranchRule
from cvs2svn_lib.symbol_strategy import HeuristicStrategyRule
from cvs2svn_lib.symbol_strategy import UnambiguousUsageRule
from cvs2svn_lib.symbol_strategy import HeuristicPreferredParentRule
from cvs2svn_lib.symbol_strategy import SymbolHintsFileRule
from cvs2svn_lib.symbol_transform import ReplaceSubstringsSymbolTransform
from cvs2svn_lib.symbol_transform import RegexpSymbolTransform
from cvs2svn_lib.symbol_transform import IgnoreSymbolTransform
from cvs2svn_lib.symbol_transform import NormalizePathsSymbolTransform
from cvs2svn_lib.property_setters import AutoPropsPropertySetter
from cvs2svn_lib.property_setters import CVSBinaryFileDefaultMimeTypeSetter
from cvs2svn_lib.property_setters import CVSBinaryFileEOLStyleSetter
from cvs2svn_lib.property_setters import CVSRevisionNumberSetter
from cvs2svn_lib.property_setters import DefaultEOLStyleSetter
from cvs2svn_lib.property_setters import EOLStyleFromMimeTypeSetter
from cvs2svn_lib.property_setters import ExecutablePropertySetter
from cvs2svn_lib.property_setters import KeywordsPropertySetter
from cvs2svn_lib.property_setters import MimeMapper
from cvs2svn_lib.property_setters import SVNBinaryFileKeywordsPropertySetter

# To choose the level of logging output, uncomment one of the
# following lines:
#Log().log_level = Log.WARN
#Log().log_level = Log.QUIET
Log().log_level = Log.NORMAL
#Log().log_level = Log.VERBOSE
#Log().log_level = Log.DEBUG


# author_transforms can be used to map CVS author names (e.g.,
# "jrandom") to whatever names make sense for your SVN configuration
# (e.g., "john.j.random").  All values should be either 16-bit strings
# (i.e., with "u" as a prefix) or 8-bit strings in the utf-8 encoding.
# To use this feature, please substitute your own project's usernames
# here and uncomment the author_transforms option when setting
# ctx.output_option below
author_transforms={
    'frank' : u'flyaruu',
    'arjen' : u'aschoneveld'
    }

# There are several possible options for where to put the output of a
# cvs2svn conversion.  Please choose one of the following and adjust
# the parameters as necessary:

# Use this output option if you would like cvs2svn to create a new SVN
# repository and store the converted repository there.  The first
# argument is the path to which the repository should be written (this
# repository must not already exist).  The (optional) fs_type argument
# allows a --fs-type option to be passed to "svnadmin create".  The
# (optional) bdb_txn_nosync argument can be specified to set the
# --bdb-txn-nosync option on a bdb repository.  The (optional)
# create_options argument can be specified to set a list of verbatim
# options to be passed to "svnadmin create".  The (optional)
# author_transforms argument allows CVS author names to be transformed
# arbitrarily into SVN author names (as described above):
ctx.output_option = NewRepositoryOutputOption(
    #r'/path/to/svnrepo',
    #fs_type='fsfs',
    #bdb_txn_nosync=False,
    #create_options=['--pre-1.5-compatible'],
    author_transforms=author_transforms,
    )

# Use this output option if you would like cvs2svn to store the
# converted CVS repository into an SVN repository that already exists.
# The first argument is the filesystem path of an existing local SVN
# repository (this repository must already exist).  The
# author_transforms option is as described above:
#ctx.output_option = ExistingRepositoryOutputOption(
#    r'/path/to/svnrepo', # Path to repository
#    #author_transforms=author_transforms,
#    )

# Use this type of output option if you want the output of the
# conversion to be written to a SVN dumpfile instead of committing
# them into an actual repository.  The author_transforms option is as
# described above:
#ctx.output_option = DumpfileOutputOption(
#    dumpfile_path=r'/path/to/cvs2svn-dump', # Name of dumpfile to create
#    #author_transforms=author_transforms,
#    )


# Independent of the ctx.output_option selected, the following option
# can be set to True to suppress cvs2svn output altogether:
ctx.dry_run = False

# The following set of options specifies how the revision contents of
# the RCS files should be read.
#
# The default selection is InternalRevisionReader, which uses built-in
# code that reads the RCS deltas while parsing the files in
# CollectRevsPass.  This method is very fast but requires lots of
# temporary disk space.  The disk space is required for (1) storing
# all of the RCS deltas, and (2) during OutputPass, keeping a copy of
# the full text of every revision that still has a descendant that
# hasn't yet been committed.  Since this can includes multiple
# revisions of each file (i.e., on multiple branches), the required
# amount of temporary space can potentially be many times the size of
# a checked out copy of the whole repository.  Setting compress=True
# cuts the disk space requirements by about 50% at the price of
# increased CPU usage.  Using compression usually speeds up the
# conversion due to the reduced I/O pressure, unless --tmpdir is on a
# RAM disk.  This method does not expand CVS's "Log" keywords.
#
# The second possibility is RCSRevisionReader, which uses RCS's "co"
# program to extract the revision contents of the RCS files during
# OutputPass.  This option doesn't require any temporary space, but it
# is relatively slow because (1) "co" has to be executed very many
# times; and (2) "co" itself has to assemble many file deltas to
# compute the contents of a particular revision.  The constructor
# argument specifies how to invoke the "co" executable.
#
# The third possibility is CVSRevisionReader, which uses the "cvs"
# program to extract the revision contents out of the RCS files during
# OutputPass.  This option doesn't require any temporary space, but it
# is the slowest of all, because "cvs" is considerably slower than
# "co".  However, it works in some situations where RCSRevisionReader
# fails; see the HTML documentation of the "--use-cvs" option for
# details.  The constructor argument specifies how to invoke the "co"
# executable.
#
# Choose one of the following three groups of lines:
ctx.revision_recorder = InternalRevisionRecorder(compress=True)
ctx.revision_excluder = InternalRevisionExcluder()
ctx.revision_reader = InternalRevisionReader(compress=True)

#ctx.revision_recorder = NullRevisionRecorder()
#ctx.revision_excluder = NullRevisionExcluder()
#ctx.revision_reader = RCSRevisionReader(co_executable=r'co')

#ctx.revision_recorder = NullRevisionRecorder()
#ctx.revision_excluder = NullRevisionExcluder()
#ctx.revision_reader = CVSRevisionReader(cvs_executable=r'cvs')

# Set the name (and optionally the path) of some other executables
# required by cvs2svn:
ctx.svnadmin_executable = r'svnadmin'
ctx.sort_executable = r'sort'

# Change the following line to True if the conversion should only
# include the trunk of the repository (i.e., all branches and tags
# should be ignored):
ctx.trunk_only = False

# Change the following line to True if cvs2svn should delete a
# directory once the last file has been deleted from it:
ctx.prune = False

# How to convert author names, log messages, and filenames to unicode.
# The first argument to CVSTextDecoder is a list of encoders that are
# tried in order in 'strict' mode until one of them succeeds.  If none
# of those succeeds, then fallback_encoder is used in lossy 'replace'
# mode (if it is specified).  Setting a fallback encoder ensures that
# the encoder always succeeds, but it can cause information loss.
ctx.cvs_author_decoder = CVSTextDecoder(
    [
        #'latin1',
        #'utf8',
        'ascii',
        ],
    #fallback_encoding='ascii'
    )
ctx.cvs_log_decoder = CVSTextDecoder(
    [
        #'latin1',
        #'utf8',
        'ascii',
        ],
    #fallback_encoding='ascii'
    )
# You might want to be especially strict when converting filenames to
# unicode (e.g., maybe not specify a fallback_encoding).


# Template for the commit message to be used for initial project
# commits.
ctx.initial_project_commit_message = (
    'Standard project directories initialized by cvs2svn.'
    )

# Template for the commit message to be used for post commits, in
# which modifications to a vendor branch are copied back to trunk.
# This message can use '%(revnum)d' to include the revision number of
# the revision that included the change to the vendor branch.
ctx.post_commit_message = (
    'This commit was generated by cvs2svn to compensate for '
    'changes in r%(revnum)d, which included commits to RCS files '
    'with non-trunk default branches.'
    )

# Template for the commit message to be used for commits in which
# symbols are created.  This message can use '%(symbol_type)d' to
# include the type of the symbol ('branch' or 'tag') or
# '%(symbol_name)' to include the name of the symbol.
ctx.symbol_commit_message = (
    "This commit was manufactured by cvs2svn to create %(symbol_type)s "
    "'%(symbol_name)s'."
    )

ctx.decode_apple_single = False
ctx.symbol_info_filename = None


global_symbol_strategy_rules = [
    ExcludeTrivialImportBranchRule(),
    UnambiguousUsageRule(),
    BranchIfCommitsRule(),
    HeuristicStrategyRule(),
    HeuristicPreferredParentRule(),
    ]

# Specify a username to be used for commits generated by cvs2svn.  If
# this option is set to None then no username will be used for such
# commits:
ctx.username = None
#ctx.username = 'cvs2svn'

ctx.svn_property_setters.extend([
    CVSBinaryFileEOLStyleSetter(),
    CVSBinaryFileDefaultMimeTypeSetter(),
    DefaultEOLStyleSetter(None),
    SVNBinaryFileKeywordsPropertySetter(),
    KeywordsPropertySetter(config.SVN_KEYWORDS_VALUE),
    ExecutablePropertySetter(),
    ])

ctx.cross_project_commits = True
ctx.cross_branch_commits = True
ctx.keep_cvsignore = False
ctx.retain_conflicting_attic_files = False



run_options.profiling = False


