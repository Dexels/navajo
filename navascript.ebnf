Navascript  ::= Validations? Body* EOF

Validations ::= VALIDATIONS "{" Checks "}"

Body ::= Include | Message | Var | Break | Map

Include ::= Conditional? INCLUDE DOUBLE_QUOTE ScriptIdentifier DOUBLE_QUOTE ";"

InnerBody ::=  Property | MethodOrSetter | Body

Checks ::=  Check*

Check ::= CHECK "(" CheckAttributes ")"

CheckAttributes ::= "condition" LiteralOrExpression ( "," "code" LiteralOrExpression)? ("," "description" LiteralOrExpression )?

LiteralOrExpression ::= ( ":" StringConstant | "=" expression )? 

Break ::= ( Conditional )?  BREAK ( "(" "conditionId" LiteralOrExpression "conditionDescription" LiteralOrExpression ")" )? 

Conditional ::= IF expression THEN

Var ::= ( Conditional )? VAR VarName (":" StringConstant  |  "=" ConditionalExpressions ) ";"

ConditionalExpressions ::= (( Conditional  expression )* ELSE expression  |  expression)
 
Message ::= ( Conditional )?  MESSAGE DOUBLE_QUOTE msg_Identifier DOUBLE_QUOTE ( "(" KeyValueArguments ")" )? "{" ( MappedArrayField | MappedArrayMessage )? InnerBody* "}"

Property ::= ( Conditional )?  PROPERTY DOUBLE_QUOTE property_name DOUBLE_QUOTE ( "(" KeyValueArguments ")" )? (":" StringConstant  |  "=" ConditionalExpressions ) ";"

KeyValueArguments ::= ParamKeyName LiteralOrExpression ( "," ParamKeyName LiteralOrExpression  )*

Map ::= ( Conditional )? ( "map." AdapterName ( "(" KeyValueArguments ")" )?  |  "map" "(" "object:" ClassName ( "," KeyValueArguments )?  ")" ) "{" InnerBody* "}"

MethodOrSetter ::= ( Conditional )?  (AdapterMethod | SetterField) ";"

SetterField ::= ( Conditional )?  "$" FieldName (":" StringConstant  |  "=" ConditionalExpressions ) 

AdapterMethod ::= ( Conditional )?  "." MethodName "(" KeyValueArguments ")" (  "{" (MappedArrayField | MappedArrayMessage) "}"  )? 

MappedArrayField ::= "$" FieldName "(" KeyValueArguments ( "," FILTER "=" expression  )?   ")" "{ " InnerBody* " }"

MappedArrayMessage ::= "[ " msg_Identifier " )? "  (  "(" FILTER "=" expression ")" )?  "{ " InnerBody* " }"

MappableIdentifier ::= "$" ( parent_msg )* Identifier ( arguments )? 

DatePattern ::= IntegerLiteral "#" IntegerLiteral "#" IntegerLiteral "#" IntegerLiteral "#" IntegerLiteral "#" IntegerLiteral 

ExpressionLiteral ::= "`" ( expression )* "`" 

FunctionLiteral ::= Identifier arguments

ForallLiteral ::= SARTRE "(" TmlLiteral "," ExpressionLiteral ")"

arguments ::= "(" expression ( "," expression )* ")" 

operator ::= ForallLiteral | TODAY | FunctionLiteral | IntegerLiteral | StringLiteral | FloatLiteral | DatePattern | TmlIdentifier | MappableIdentifier | ExistsTmlIdentifier

expression ::= arithmetic_expression | BooleanExpression 

arithmetic_expression ::= term ( ("+" | "-") term )*

term       ::= factor ( ("*"|"/") factor )*

factor     ::= operator | "(" expression ")" 

AndOrExpression ::= ComparisonExpression ( ( OR | AND ) ComparisonExpression )* 
 
ComparisonExpression ::= ( "true" | "false" | comparison ) 

comparison ::= arithmetic_expression ( "<" | "<=" | ">" | ">=" | "==" | "!=" ) arithmetic_expression 

BooleanExpression ::= ("!")? AndOrExpression

Ignore   ::= WhiteSpace
           | Comment
          /* ws: definition */

<?TOKENS?>

EOF      ::= $

LETTER ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
 | "H" | "I" | "J" | "K" | "L" | "M" | "N"
 | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
 | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
 | "c" | "d" | "e" | "f" | "g" | "h" | "i"
 | "j" | "k" | "l" | "m" | "n" | "o" | "p"
 | "q" | "r" | "s" | "t" | "u" | "v" | "w"
 | "x" | "y" | "z"

DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

SYMBOL ::= " " | "\n" | "\t" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "=" | "+" | "{" | "}" | "[" | "]" | ":" | ";" | "\" | "/" | "|" | "<" | ">" | "\'" | "," | "." | "?" | "§" | "±" | "~" | "`"

DOUBLE_QUOTE ::= '"' 

INCLUDE ::= "include"

MESSAGE ::= "message"

PROPERTY ::= "property"

VALIDATIONS ::= "validations"

CHECK ::= "check"

BREAK ::= "break"

TODAY ::= "TODAY"

VAR ::= "var"

IF ::= "if"

THEN ::= "then"

ELSE ::= "else"

AND ::= "AND"

OR ::= "OR"

FILTER ::= "filter"

CHARACTER ::= LETTER | DIGIT | SYMBOL

Identifier ::= IDENTIFIER_DEF - Keyword

IDENTIFIER_DEF ::= ( LETTER | "_" ) ( LETTER | DIGIT | "_" )*

VarName ::= Identifier

ParamKeyName ::= Identifier

AdapterName ::= Identifier

ClassName ::= Identifier

MethodName ::= Identifier

FieldName ::= Identifier

property_name ::= Identifier

StringConstant ::= DOUBLE_QUOTE ( CHARACTER )* DOUBLE_QUOTE

name_option ::= ":name"

value_option ::= ":value"

parent_msg ::= "../"

IntegerLiteral ::= ( "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) ( DIGIT )*

FloatLiteral ::= ( "0" | IntegerLiteral ) "." ( DIGIT )*

ExistsTmlIdentifier ::= "?" TmlIdentifier

ScriptIdentifier ::= Identifier ( "/" Identifier )*

msg_element_Identifier ::= Identifier ( "@" DIGIT | "@" Identifier "=" CHARACTER )? 

msg_Identifier ::= ( ( parent_msg )* "/" )? msg_element_Identifier ( "/" msg_element_Identifier )* 

property_Identifier ::= ( msg_Identifier )? Identifier ( name_option | value_option )? 

TmlIdentifier ::= "[" ( msg_Identifier | property_Identifier ) "]" 

StringLiteral ::= "'" ( CHARACTER )* "'" 

TmlLiteral ::= "'" ( TmlIdentifier )* "'" 

SARTRE ::= ( "FORALL" | "EXISTS" )

Keyword  ::= 'break'
           | 'filter'
           | 'if'
           | 'true'
           | 'false'
           | 'null'
           | ':name'
           | ':value'
           | 'then'
           | 'else'
           | 'var'
           | 'AND'
           | 'OR'
           | 'EXISTS'
           | 'FORALL'
           | 'conditionDescription'
           | 'TODAY'

WhiteSpace
         ::= ' '
           | #x0009
           | #x000C
           | LineTerminator
Comment  ::= TraditionalComment
           | EndOfLineComment
TraditionalComment
         ::= '/*' CHARACTER*  '*/'
EndOfLineComment
         ::= '//' CHARACTER*

SourceCharacter ::= .

LineContinuation ::= '\' LineTerminatorSequence

LineTerminatorSequence
         ::= #x000D #x000A
           | #x000A
           | #x000D
           | #x2028
           | #x2029

LineTerminator
         ::= #x000A
           | #x000D
           | #x2028
           | #x2029
